// This file has been generated by the SAPUI5 'AllInOne' Builder
/*!
 * @copyright@
 */

sap.ui.controller("sap.ui.demokit.explored.view.app", {

	onInit : function () {

		this._afterRenderingDone = false;

		// subscribe to app events
		this._component = sap.ui.core.Component.getOwnerComponentFor(this.getView());
		this._component.getEventBus().subscribe("app", "applyAppConfiguration", this._applyAppConfiguration, this);
	},

	onAfterRendering : function () {
		if (this.hasOwnProperty("_compactOn")) {
			this.getView().toggleStyleClass("sapUiSizeCompact", this._compactOn);
		}
		if (this.hasOwnProperty("_themeActive")) {
			sap.ui.getCore().applyTheme(this._themeActive);
		}
		this._afterRenderingDone = true;
	},
	
	_applyAppConfiguration : function(sChannel, sEvent, oData){
		if (this._afterRenderingDone){
			//handle themeChange
			sap.ui.getCore().applyTheme(oData.themeActive);
			//handle compact mode
			this.getView().toggleStyleClass("sapUiSizeCompact", oData.compactOn);
		} else {
			this._themeActive = oData.themeActive;
			this._compactOn = oData.compactOn;
		}
			
	}
});
/*!
 * @copyright@
 */

sap.ui.jsview("sap.ui.demokit.explored.view.app", {

	getControllerName : function () {
		return "sap.ui.demokit.explored.view.app";
	},
	
	createContent : function (oController) {

		// to avoid scrollbars on desktop the root view must be set to block display
		this.setDisplayBlock(true);

		// create split app
		return new sap.m.SplitApp("splitApp", {
			afterDetailNavigate: function () {
				this.hideMaster();
			}
		});
	}
});
/*!
 * @copyright@
 */

/*global JSZip *///declare unusual global vars for JSLint/SAPUI5 validation

sap.ui.controller("sap.ui.demokit.explored.view.code", {

	onInit : function () {
		this.router = sap.ui.core.UIComponent.getRouterFor(this);
		this.router.attachRoutePatternMatched(this.onRouteMatched, this);
		this._viewData = sap.ui.getCore().byId("app").getViewData();
		this._viewData.component.codeCache = {};
	},

	onRouteMatched : function (oEvt) {

		// get params
		if (oEvt.getParameter("name") !== "code") {
			return;
		}

		this._sId = oEvt.getParameter("arguments").id;

		// retrieve sample object
		var oSample = sap.ui.demokit.explored.data.samples[this._sId];
		if (!oSample) {
			this.router.myNavToWithoutHash("sap.ui.demokit.explored.view.notFound", "XML", false, { path: this._sId });
			return;
		}

		// get component
		var sCompId = 'sampleComp-' + this._sId;
		var sCompName = this._sId;
		var oComp = sap.ui.component(sCompId);
		if (!oComp) {
			oComp = sap.ui.getCore().createComponent({
				id : sCompId,
				name : sCompName
			});
		}
		
		// create data object
		var oMetadata = oComp.getMetadata();
		var oConfig = (oMetadata) ? oMetadata.getConfig() : null;
		var oData = {
			title : "Code: " + oSample.name,
			files : []
		};
		
		// retrieve files
		// (via the 'Orcish maneuver': Use XHR to retrieve and cache code)
		var that = this;
		var fnSuccess = function (result) {
			that._viewData.component.codeCache[sUrl] = result;
		};
		var fnError = function (result) {
			that._viewData.component.codeCache[sUrl] = "not found: '" + sUrl + "'";
		};
		if (oConfig && oConfig.sample && oConfig.sample.files) {
			var sRef = jQuery.sap.getModulePath(oSample.id);
			for (var i = 0 ; i < oConfig.sample.files.length ; i++) {
				var sFile = oConfig.sample.files[i];
				var sUrl = sRef + "/" + sFile;
				if (! (sUrl in this._viewData.component.codeCache)) {
					this._viewData.component.codeCache[sUrl] = "";
					jQuery.ajax(sUrl, {
						async: false,
						dataType: "text",
						success: fnSuccess,
						error: fnError
					});
				}
				oData.files.push({
					name : sFile,
					raw : that._viewData.component.codeCache[sUrl],
					code : this._convertCodeToHtml(that._viewData.component.codeCache[sUrl])
				});
			}
		}
		
		// set model
		this.getView().setModel(new sap.ui.model.json.JSONModel(oData));
		
		// scroll to top of page
		var page = this.getView().byId("page");
		page.scrollTo(0);
	},
	
	onDownload : function (evt) {
		
		jQuery.sap.require("sap.ui.thirdparty.jszip");
		var ozipFile = new JSZip();
		
		// zip files
		var data = this.getView().getModel().getData();
		for (var i = 0 ; i < data.files.length ; i++) {
			var oFile = data.files[i];
			ozipFile.file(oFile.name, oFile.raw);
		}
		var oContent = ozipFile.generate();

		location.href = "data:application/zip;base64," + oContent;
	},

	onNavBack : function () {
		this.router.myNavBack("sample", { id : this._sId }, true);
	},

	/**
	 * 
	 */
	_convertCodeToHtml : function (code) {

		jQuery.sap.require("jquery.sap.encoder");

		code = code.toString();

		// Get rid of function around code
		code = code.replace(/^function.+{/, "");

		//code = code.replace(/return \[[\s\S]*/, "");
		code = code.replace(/}[!}]*$/, "");

		// Get rid of unwanted code if CODESNIP tags are used
		code = code.replace(/^[\n\s\S]*\/\/\s*CODESNIP_START\n/, "");
		code = code.replace(/\/\/\s*CODESNIP_END[\n\s\S]*$/, "");

		// Improve indentation for display
		code = code.replace(/\t/g, "  ");

		return '<pre><code>' + jQuery.sap.encodeHTML(code) + '</code></pre>';
	}
});
/*!
 * @copyright@
 */

sap.ui.controller("sap.ui.demokit.explored.view.notFound", {

	onInit : function () {
		this.router = sap.ui.core.UIComponent.getRouterFor(this);
		this.router.attachRoutePatternMatched(this.onRouteMatched, this);
		this.getView().addEventDelegate(this);
	},

	_msg : "<div class='titlesNotFound'>The requested object '{0}' is unknown to the explored app. We suspect it's lost in space.</div>",

	onRouteMatched : function (evt) {
		if (evt.getParameter("name") !== "notFound") {
			return;
		}
		var params = evt.getParameter("arguments")["all*"];
		var html = this._msg.replace("{0}", params);
		this.getView().byId("msgHtml").setContent(html);
	},

	onBeforeShow : function (evt) {
		if (evt.data.path) {
			var html = this._msg.replace("{0}", evt.data.path);
			this.getView().byId("msgHtml").setContent(html);
		}
	},

	onNavBack : function () {
		this.router.myNavBack("home", {});
	}
});
/*!
 * @copyright@
 */

sap.ui.controller("sap.ui.demokit.explored.view.sample", {

	onInit : function () {
		this.router = sap.ui.core.UIComponent.getRouterFor(this);
		this.router.attachRoutePatternMatched(this.onRouteMatched, this);
	},

	onRouteMatched : function (oEvt) {

		if (oEvt.getParameter("name") !== "sample") {
			return;
		}

		this._sId = oEvt.getParameter("arguments").id;

		// retrieve sample object
		var oSample = sap.ui.demokit.explored.data.samples[this._sId];
		if (!oSample) {
			this.router.myNavToWithoutHash("sap.ui.demokit.explored.view.notFound", "XML", false, { path: this._sId });
			return;
		}

		// set nav button visibility
		var oPage = this.getView().byId("page");
		var oHistory = sap.ui.core.routing.History.getInstance();
		var oPrevHash = oHistory.getPreviousHash();
		var bShowNavButton = sap.ui.Device.system.phone || !!oPrevHash;
		oPage.setShowNavButton(bShowNavButton);

		// set page title
		oPage.setTitle("Sample: " + oSample.name);

		try {
			var oContent = this._createComponent();
		} catch (ex) {
			oPage.removeAllContent();
			oPage.addContent(new sap.m.Text({ text : "Error while loading the sample: " + ex }));
			return;
		}

		//get config
		var oConfig = (this._oComp.getMetadata()) ? this._oComp.getMetadata().getConfig() : null;
		var oSampleConfig = oConfig && oConfig.sample || {};

		if (oSampleConfig.iframe) {
			oContent = this._createIframe(oContent, oSampleConfig.iframe);
		}

		// handle stretch content
		var bStretch = !!oSampleConfig.stretch;
		var sHeight = bStretch ? "100%" : null;
		oPage.setEnableScrolling(!bStretch);
		if (oContent.setHeight) {
			oContent.setHeight(sHeight);
		}

		// add content
		oPage.removeAllContent();
		oPage.addContent(oContent);

		// scroll to top of page
		oPage.scrollTo(0);
	},

	_createIframe : function (oIframeContent, vIframe) {
		var sSrc,
			sSampleId = this._sId,
			rNoDot = /[^\.]*/,
			rStripHtml = /.html$/;
		
		if (typeof vIframe === "string") {

			var sIframeWithoutHtml = vIframe.replace(rStripHtml, "");

			if (!rNoDot.test(sIframeWithoutHtml)) {
				jQuery.sap.log.error("Don't put a . in your iframe sample url.");
				return;
			}

			var sSrc = jQuery.sap.getModulePath(sSampleId + "." + sIframeWithoutHtml, ".html");
		} else {
			jQuery.sap.log.error("no iframe source was provided");
			return;
		}

		var oHtmlControl = new sap.ui.core.HTML({
			content : '<iframe src="' + sSrc + '" id="sampleFrame"></iframe>'
		}).addEventDelegate({
			onAfterRendering : function () {
				oHtmlControl.$().on("load", function () {
					oIframeContent.placeAt("body");
				});
			}
		});

		return oHtmlControl;

	},

	_createComponent : function () {
		// create component only once
		var sCompId = 'sampleComp-' + this._sId;
		var sCompName = this._sId;

		this._oComp = sap.ui.component(sCompId);
		if (!this._oComp) {
			this._oComp = sap.ui.getCore().createComponent({
				id : sCompId,
				name : sCompName
			});
		}

		// create component container
		return new sap.ui.core.ComponentContainer({
			component: this._oComp
		});
	},

	onNavBack : function (oEvt) {
		this.router.myNavBack("home", {});
	},

	onNavToCode : function (evt) {
		this.router.navTo("code", {
			id : this._sId
		}, false);
	}
});
ï»¿/*
  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*jslint bitwise:true plusplus:true */
/*global esprima:true, define:true, exports:true, window: true,
throwErrorTolerant: true,
throwError: true, generateStatement: true, peek: true,
parseAssignmentExpression: true, parseBlock: true, parseExpression: true,
parseFunctionDeclaration: true, parseFunctionExpression: true,
parseFunctionSourceElements: true, parseVariableIdentifier: true,
parseLeftHandSideExpression: true,
parseUnaryExpression: true,
parseStatement: true, parseSourceElement: true */

(function (root, factory) {
    'use strict';

    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
    // Rhino, and plain browser loading.

    /* istanbul ignore next */
    if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports);
    } else {
        factory((root.esprima = {}));
    }
}(this, function (exports) {
    'use strict';

    var Token,
        TokenName,
        FnExprTokens,
        Syntax,
        PropertyKind,
        Messages,
        Regex,
        SyntaxTreeDelegate,
        source,
        strict,
        index,
        lineNumber,
        lineStart,
        length,
        delegate,
        lookahead,
        state,
        extra;

    Token = {
        BooleanLiteral: 1,
        EOF: 2,
        Identifier: 3,
        Keyword: 4,
        NullLiteral: 5,
        NumericLiteral: 6,
        Punctuator: 7,
        StringLiteral: 8,
        RegularExpression: 9
    };

    TokenName = {};
    TokenName[Token.BooleanLiteral] = 'Boolean';
    TokenName[Token.EOF] = '<end>';
    TokenName[Token.Identifier] = 'Identifier';
    TokenName[Token.Keyword] = 'Keyword';
    TokenName[Token.NullLiteral] = 'Null';
    TokenName[Token.NumericLiteral] = 'Numeric';
    TokenName[Token.Punctuator] = 'Punctuator';
    TokenName[Token.StringLiteral] = 'String';
    TokenName[Token.RegularExpression] = 'RegularExpression';

    // A function following one of those tokens is an expression.
    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
                    'return', 'case', 'delete', 'throw', 'void',
                    // assignment operators
                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
                    '&=', '|=', '^=', ',',
                    // binary/unary operators
                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
                    '<=', '<', '>', '!=', '!=='];

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        ArrayExpression: 'ArrayExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        Program: 'Program',
        Property: 'Property',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement'
    };

    PropertyKind = {
        Data: 1,
        Get: 2,
        Set: 4
    };

    // Error messages should be identical to V8.
    Messages = {
        UnexpectedToken:  'Unexpected token %0',
        UnexpectedNumber:  'Unexpected number',
        UnexpectedString:  'Unexpected string',
        UnexpectedIdentifier:  'Unexpected identifier',
        UnexpectedReserved:  'Unexpected reserved word',
        UnexpectedEOS:  'Unexpected end of input',
        NewlineAfterThrow:  'Illegal newline after throw',
        InvalidRegExp: 'Invalid regular expression',
        UnterminatedRegExp:  'Invalid regular expression: missing /',
        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',
        InvalidLHSInForIn:  'Invalid left-hand side in for-in',
        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
        NoCatchOrFinally:  'Missing catch or finally after try',
        UnknownLabel: 'Undefined label \'%0\'',
        Redeclaration: '%0 \'%1\' has already been declared',
        IllegalContinue: 'Illegal continue statement',
        IllegalBreak: 'Illegal break statement',
        IllegalReturn: 'Illegal return statement',
        StrictModeWith:  'Strict mode code may not include a with statement',
        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',
        StrictVarName:  'Variable name may not be eval or arguments in strict mode',
        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',
        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',
        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',
        StrictDelete:  'Delete of an unqualified identifier in strict mode.',
        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',
        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',
        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',
        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',
        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',
        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',
        StrictReservedWord:  'Use of future reserved word in strict mode'
    };

    // See also tools/generate-unicode-regex.py.
    Regex = {
        NonAsciiIdentifierStart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]'),
        NonAsciiIdentifierPart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]')
    };

    // Ensure the condition is true, otherwise throw an error.
    // This is only to have a better contract semantic, i.e. another safety net
    // to catch a logic error. The condition shall be fulfilled in normal case.
    // Do NOT use this to enforce a certain condition on any user input.

    function assert(condition, message) {
        /* istanbul ignore if */
        if (!condition) {
            throw new Error('ASSERT: ' + message);
        }
    }

    function isDecimalDigit(ch) {
        return (ch >= 48 && ch <= 57);   // 0..9
    }

    function isHexDigit(ch) {
        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
    }

    function isOctalDigit(ch) {
        return '01234567'.indexOf(ch) >= 0;
    }


    // 7.2 White Space

    function isWhiteSpace(ch) {
        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
    }

    // 7.3 Line Terminators

    function isLineTerminator(ch) {
        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
    }

    // 7.6 Identifier Names and Identifiers

    function isIdentifierStart(ch) {
        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
            (ch === 0x5C) ||                      // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));
    }

    function isIdentifierPart(ch) {
        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
            (ch >= 0x30 && ch <= 0x39) ||         // 0..9
            (ch === 0x5C) ||                      // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
    }

    // 7.6.1.2 Future Reserved Words

    function isFutureReservedWord(id) {
        switch (id) {
        case 'class':
        case 'enum':
        case 'export':
        case 'extends':
        case 'import':
        case 'super':
            return true;
        default:
            return false;
        }
    }

    function isStrictModeReservedWord(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'yield':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    // 7.6.1.1 Keywords

    function isKeyword(id) {
        if (strict && isStrictModeReservedWord(id)) {
            return true;
        }

        // 'const' is specialized as Keyword in V8.
        // 'yield' and 'let' are for compatiblity with SpiderMonkey and ES.next.
        // Some others are from future reserved words.

        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') ||
                (id === 'try') || (id === 'let');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    // 7.4 Comments

    function addComment(type, value, start, end, loc) {
        var comment, attacher;

        assert(typeof start === 'number', 'Comment must have valid position');

        // Because the way the actual token is scanned, often the comments
        // (if any) are skipped twice during the lexical analysis.
        // Thus, we need to skip adding a comment if the comment array already
        // handled it.
        if (state.lastCommentStart >= start) {
            return;
        }
        state.lastCommentStart = start;

        comment = {
            type: type,
            value: value
        };
        if (extra.range) {
            comment.range = [start, end];
        }
        if (extra.loc) {
            comment.loc = loc;
        }
        extra.comments.push(comment);
        if (extra.attachComment) {
            extra.leadingComments.push(comment);
            extra.trailingComments.push(comment);
        }
    }

    function skipSingleLineComment(offset) {
        var start, loc, ch, comment;

        start = index - offset;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart - offset
            }
        };

        while (index < length) {
            ch = source.charCodeAt(index);
            ++index;
            if (isLineTerminator(ch)) {
                if (extra.comments) {
                    comment = source.slice(start + offset, index - 1);
                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart - 1
                    };
                    addComment('Line', comment, start, index - 1, loc);
                }
                if (ch === 13 && source.charCodeAt(index) === 10) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
                return;
            }
        }

        if (extra.comments) {
            comment = source.slice(start + offset, index);
            loc.end = {
                line: lineNumber,
                column: index - lineStart
            };
            addComment('Line', comment, start, index, loc);
        }
    }

    function skipMultiLineComment() {
        var start, loc, ch, comment;

        if (extra.comments) {
            start = index - 2;
            loc = {
                start: {
                    line: lineNumber,
                    column: index - lineStart - 2
                }
            };
        }

        while (index < length) {
            ch = source.charCodeAt(index);
            if (isLineTerminator(ch)) {
                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {
                    ++index;
                }
                ++lineNumber;
                ++index;
                lineStart = index;
                if (index >= length) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
            } else if (ch === 0x2A) {
                // Block comment ends with '*/'.
                if (source.charCodeAt(index + 1) === 0x2F) {
                    ++index;
                    ++index;
                    if (extra.comments) {
                        comment = source.slice(start + 2, index - 2);
                        loc.end = {
                            line: lineNumber,
                            column: index - lineStart
                        };
                        addComment('Block', comment, start, index, loc);
                    }
                    return;
                }
                ++index;
            } else {
                ++index;
            }
        }

        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
    }

    function skipComment() {
        var ch, start;

        start = (index === 0);
        while (index < length) {
            ch = source.charCodeAt(index);

            if (isWhiteSpace(ch)) {
                ++index;
            } else if (isLineTerminator(ch)) {
                ++index;
                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
                start = true;
            } else if (ch === 0x2F) { // U+002F is '/'
                ch = source.charCodeAt(index + 1);
                if (ch === 0x2F) {
                    ++index;
                    ++index;
                    skipSingleLineComment(2);
                    start = true;
                } else if (ch === 0x2A) {  // U+002A is '*'
                    ++index;
                    ++index;
                    skipMultiLineComment();
                } else {
                    break;
                }
            } else if (start && ch === 0x2D) { // U+002D is '-'
                // U+003E is '>'
                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {
                    // '-->' is a single-line comment
                    index += 3;
                    skipSingleLineComment(3);
                } else {
                    break;
                }
            } else if (ch === 0x3C) { // U+003C is '<'
                if (source.slice(index + 1, index + 4) === '!--') {
                    ++index; // `<`
                    ++index; // `!`
                    ++index; // `-`
                    ++index; // `-`
                    skipSingleLineComment(4);
                } else {
                    break;
                }
            } else {
                break;
            }
        }
    }

    function scanHexEscape(prefix) {
        var i, len, ch, code = 0;

        len = (prefix === 'u') ? 4 : 2;
        for (i = 0; i < len; ++i) {
            if (index < length && isHexDigit(source[index])) {
                ch = source[index++];
                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
            } else {
                return '';
            }
        }
        return String.fromCharCode(code);
    }

    function getEscapedIdentifier() {
        var ch, id;

        ch = source.charCodeAt(index++);
        id = String.fromCharCode(ch);

        // '\u' (U+005C, U+0075) denotes an escaped character.
        if (ch === 0x5C) {
            if (source.charCodeAt(index) !== 0x75) {
                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }
            ++index;
            ch = scanHexEscape('u');
            if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }
            id = ch;
        }

        while (index < length) {
            ch = source.charCodeAt(index);
            if (!isIdentifierPart(ch)) {
                break;
            }
            ++index;
            id += String.fromCharCode(ch);

            // '\u' (U+005C, U+0075) denotes an escaped character.
            if (ch === 0x5C) {
                id = id.substr(0, id.length - 1);
                if (source.charCodeAt(index) !== 0x75) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
                ++index;
                ch = scanHexEscape('u');
                if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
                id += ch;
            }
        }

        return id;
    }

    function getIdentifier() {
        var start, ch;

        start = index++;
        while (index < length) {
            ch = source.charCodeAt(index);
            if (ch === 0x5C) {
                // Blackslash (U+005C) marks Unicode escape sequence.
                index = start;
                return getEscapedIdentifier();
            }
            if (isIdentifierPart(ch)) {
                ++index;
            } else {
                break;
            }
        }

        return source.slice(start, index);
    }

    function scanIdentifier() {
        var start, id, type;

        start = index;

        // Backslash (U+005C) starts an escaped character.
        id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();

        // There is no keyword or literal with only one character.
        // Thus, it must be an identifier.
        if (id.length === 1) {
            type = Token.Identifier;
        } else if (isKeyword(id)) {
            type = Token.Keyword;
        } else if (id === 'null') {
            type = Token.NullLiteral;
        } else if (id === 'true' || id === 'false') {
            type = Token.BooleanLiteral;
        } else {
            type = Token.Identifier;
        }

        return {
            type: type,
            value: id,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }


    // 7.7 Punctuators

    function scanPunctuator() {
        var start = index,
            code = source.charCodeAt(index),
            code2,
            ch1 = source[index],
            ch2,
            ch3,
            ch4;

        switch (code) {

        // Check for most common single-character punctuators.
        case 0x2E:  // . dot
        case 0x28:  // ( open bracket
        case 0x29:  // ) close bracket
        case 0x3B:  // ; semicolon
        case 0x2C:  // , comma
        case 0x7B:  // { open curly brace
        case 0x7D:  // } close curly brace
        case 0x5B:  // [
        case 0x5D:  // ]
        case 0x3A:  // :
        case 0x3F:  // ?
        case 0x7E:  // ~
            ++index;
            if (extra.tokenize) {
                if (code === 0x28) {
                    extra.openParenToken = extra.tokens.length;
                } else if (code === 0x7B) {
                    extra.openCurlyToken = extra.tokens.length;
                }
            }
            return {
                type: Token.Punctuator,
                value: String.fromCharCode(code),
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };

        default:
            code2 = source.charCodeAt(index + 1);

            // '=' (U+003D) marks an assignment or comparison operator.
            if (code2 === 0x3D) {
                switch (code) {
                case 0x2B:  // +
                case 0x2D:  // -
                case 0x2F:  // /
                case 0x3C:  // <
                case 0x3E:  // >
                case 0x5E:  // ^
                case 0x7C:  // |
                case 0x25:  // %
                case 0x26:  // &
                case 0x2A:  // *
                    index += 2;
                    return {
                        type: Token.Punctuator,
                        value: String.fromCharCode(code) + String.fromCharCode(code2),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };

                case 0x21: // !
                case 0x3D: // =
                    index += 2;

                    // !== and ===
                    if (source.charCodeAt(index) === 0x3D) {
                        ++index;
                    }
                    return {
                        type: Token.Punctuator,
                        value: source.slice(start, index),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }
            }
        }

        // 4-character punctuator: >>>=

        ch4 = source.substr(index, 4);

        if (ch4 === '>>>=') {
            index += 4;
            return {
                type: Token.Punctuator,
                value: ch4,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        // 3-character punctuators: === !== >>> <<= >>=

        ch3 = ch4.substr(0, 3);

        if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
            index += 3;
            return {
                type: Token.Punctuator,
                value: ch3,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        // Other 2-character punctuators: ++ -- << >> && ||
        ch2 = ch3.substr(0, 2);

        if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {
            index += 2;
            return {
                type: Token.Punctuator,
                value: ch2,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        // 1-character punctuators: < > = ! + - * % & | ^ /
        if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
            ++index;
            return {
                type: Token.Punctuator,
                value: ch1,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
    }

    // 7.8.3 Numeric Literals

    function scanHexLiteral(start) {
        var number = '';

        while (index < length) {
            if (!isHexDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (number.length === 0) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt('0x' + number, 16),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function scanOctalLiteral(start) {
        var number = '0' + source[index++];
        while (index < length) {
            if (!isOctalDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 8),
            octal: true,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function scanNumericLiteral() {
        var number, start, ch;

        ch = source[index];
        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
            'Numeric literal must start with a decimal digit or a decimal point');

        start = index;
        number = '';
        if (ch !== '.') {
            number = source[index++];
            ch = source[index];

            // Hex number starts with '0x'.
            // Octal number starts with '0'.
            if (number === '0') {
                if (ch === 'x' || ch === 'X') {
                    ++index;
                    return scanHexLiteral(start);
                }
                if (isOctalDigit(ch)) {
                    return scanOctalLiteral(start);
                }

                // decimal number starts with '0' such as '09' is illegal.
                if (ch && isDecimalDigit(ch.charCodeAt(0))) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
            }

            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === '.') {
            number += source[index++];
            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === 'e' || ch === 'E') {
            number += source[index++];

            ch = source[index];
            if (ch === '+' || ch === '-') {
                number += source[index++];
            }
            if (isDecimalDigit(source.charCodeAt(index))) {
                while (isDecimalDigit(source.charCodeAt(index))) {
                    number += source[index++];
                }
            } else {
                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.NumericLiteral,
            value: parseFloat(number),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    // 7.8.4 String Literals

    function scanStringLiteral() {
        var str = '', quote, start, ch, code, unescaped, restore, octal = false, startLineNumber, startLineStart;
        startLineNumber = lineNumber;
        startLineStart = lineStart;

        quote = source[index];
        assert((quote === '\'' || quote === '"'),
            'String literal must starts with a quote');

        start = index;
        ++index;

        while (index < length) {
            ch = source[index++];

            if (ch === quote) {
                quote = '';
                break;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'u':
                    case 'x':
                        restore = index;
                        unescaped = scanHexEscape(ch);
                        if (unescaped) {
                            str += unescaped;
                        } else {
                            index = restore;
                            str += ch;
                        }
                        break;
                    case 'n':
                        str += '\n';
                        break;
                    case 'r':
                        str += '\r';
                        break;
                    case 't':
                        str += '\t';
                        break;
                    case 'b':
                        str += '\b';
                        break;
                    case 'f':
                        str += '\f';
                        break;
                    case 'v':
                        str += '\x0B';
                        break;

                    default:
                        if (isOctalDigit(ch)) {
                            code = '01234567'.indexOf(ch);

                            // \0 is not octal escape sequence
                            if (code !== 0) {
                                octal = true;
                            }

                            if (index < length && isOctalDigit(source[index])) {
                                octal = true;
                                code = code * 8 + '01234567'.indexOf(source[index++]);

                                // 3 digits are only allowed when string starts
                                // with 0, 1, 2, 3
                                if ('0123'.indexOf(ch) >= 0 &&
                                        index < length &&
                                        isOctalDigit(source[index])) {
                                    code = code * 8 + '01234567'.indexOf(source[index++]);
                                }
                            }
                            str += String.fromCharCode(code);
                        } else {
                            str += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch ===  '\r' && source[index] === '\n') {
                        ++index;
                    }
                    lineStart = index;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                break;
            } else {
                str += ch;
            }
        }

        if (quote !== '') {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.StringLiteral,
            value: str,
            octal: octal,
            startLineNumber: startLineNumber,
            startLineStart: startLineStart,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function testRegExp(pattern, flags) {
        var value;
        try {
            value = new RegExp(pattern, flags);
        } catch (e) {
            throwError({}, Messages.InvalidRegExp);
        }
        return value;
    }

    function scanRegExpBody() {
        var ch, str, classMarker, terminated, body;

        ch = source[index];
        assert(ch === '/', 'Regular expression literal must start with a slash');
        str = source[index++];

        classMarker = false;
        terminated = false;
        while (index < length) {
            ch = source[index++];
            str += ch;
            if (ch === '\\') {
                ch = source[index++];
                // ECMA-262 7.8.5
                if (isLineTerminator(ch.charCodeAt(0))) {
                    throwError({}, Messages.UnterminatedRegExp);
                }
                str += ch;
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                throwError({}, Messages.UnterminatedRegExp);
            } else if (classMarker) {
                if (ch === ']') {
                    classMarker = false;
                }
            } else {
                if (ch === '/') {
                    terminated = true;
                    break;
                } else if (ch === '[') {
                    classMarker = true;
                }
            }
        }

        if (!terminated) {
            throwError({}, Messages.UnterminatedRegExp);
        }

        // Exclude leading and trailing slash.
        body = str.substr(1, str.length - 2);
        return {
            value: body,
            literal: str
        };
    }

    function scanRegExpFlags() {
        var ch, str, flags, restore;

        str = '';
        flags = '';
        while (index < length) {
            ch = source[index];
            if (!isIdentifierPart(ch.charCodeAt(0))) {
                break;
            }

            ++index;
            if (ch === '\\' && index < length) {
                ch = source[index];
                if (ch === 'u') {
                    ++index;
                    restore = index;
                    ch = scanHexEscape('u');
                    if (ch) {
                        flags += ch;
                        for (str += '\\u'; restore < index; ++restore) {
                            str += source[restore];
                        }
                    } else {
                        index = restore;
                        flags += 'u';
                        str += '\\u';
                    }
                    throwErrorTolerant({}, Messages.UnexpectedToken, 'ILLEGAL');
                } else {
                    str += '\\';
                    throwErrorTolerant({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
            } else {
                flags += ch;
                str += ch;
            }
        }

        return {
            value: flags,
            literal: str
        };
    }

    function scanRegExp() {
        var start, body, flags, pattern, value;

        lookahead = null;
        skipComment();
        start = index;

        body = scanRegExpBody();
        flags = scanRegExpFlags();
        value = testRegExp(body.value, flags.value);

        if (extra.tokenize) {
            return {
                type: Token.RegularExpression,
                value: value,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        return {
            literal: body.literal + flags.literal,
            value: value,
            start: start,
            end: index
        };
    }

    function collectRegex() {
        var pos, loc, regex, token;

        skipComment();

        pos = index;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        regex = scanRegExp();
        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        /* istanbul ignore next */
        if (!extra.tokenize) {
            // Pop the previous token, which is likely '/' or '/='
            if (extra.tokens.length > 0) {
                token = extra.tokens[extra.tokens.length - 1];
                if (token.range[0] === pos && token.type === 'Punctuator') {
                    if (token.value === '/' || token.value === '/=') {
                        extra.tokens.pop();
                    }
                }
            }

            extra.tokens.push({
                type: 'RegularExpression',
                value: regex.literal,
                range: [pos, index],
                loc: loc
            });
        }

        return regex;
    }

    function isIdentifierName(token) {
        return token.type === Token.Identifier ||
            token.type === Token.Keyword ||
            token.type === Token.BooleanLiteral ||
            token.type === Token.NullLiteral;
    }

    function advanceSlash() {
        var prevToken,
            checkToken;
        // Using the following algorithm:
        // https://github.com/mozilla/sweet.js/wiki/design
        prevToken = extra.tokens[extra.tokens.length - 1];
        if (!prevToken) {
            // Nothing before that: it cannot be a division.
            return collectRegex();
        }
        if (prevToken.type === 'Punctuator') {
            if (prevToken.value === ']') {
                return scanPunctuator();
            }
            if (prevToken.value === ')') {
                checkToken = extra.tokens[extra.openParenToken - 1];
                if (checkToken &&
                        checkToken.type === 'Keyword' &&
                        (checkToken.value === 'if' ||
                         checkToken.value === 'while' ||
                         checkToken.value === 'for' ||
                         checkToken.value === 'with')) {
                    return collectRegex();
                }
                return scanPunctuator();
            }
            if (prevToken.value === '}') {
                // Dividing a function by anything makes little sense,
                // but we have to check for that.
                if (extra.tokens[extra.openCurlyToken - 3] &&
                        extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {
                    // Anonymous function.
                    checkToken = extra.tokens[extra.openCurlyToken - 4];
                    if (!checkToken) {
                        return scanPunctuator();
                    }
                } else if (extra.tokens[extra.openCurlyToken - 4] &&
                        extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {
                    // Named function.
                    checkToken = extra.tokens[extra.openCurlyToken - 5];
                    if (!checkToken) {
                        return collectRegex();
                    }
                } else {
                    return scanPunctuator();
                }
                // checkToken determines whether the function is
                // a declaration or an expression.
                if (FnExprTokens.indexOf(checkToken.value) >= 0) {
                    // It is an expression.
                    return scanPunctuator();
                }
                // It is a declaration.
                return collectRegex();
            }
            return collectRegex();
        }
        if (prevToken.type === 'Keyword') {
            return collectRegex();
        }
        return scanPunctuator();
    }

    function advance() {
        var ch;

        skipComment();

        if (index >= length) {
            return {
                type: Token.EOF,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: index,
                end: index
            };
        }

        ch = source.charCodeAt(index);

        if (isIdentifierStart(ch)) {
            return scanIdentifier();
        }

        // Very common: ( and ) and ;
        if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
            return scanPunctuator();
        }

        // String literal starts with single quote (U+0027) or double quote (U+0022).
        if (ch === 0x27 || ch === 0x22) {
            return scanStringLiteral();
        }


        // Dot (.) U+002E can also start a floating-point number, hence the need
        // to check the next character.
        if (ch === 0x2E) {
            if (isDecimalDigit(source.charCodeAt(index + 1))) {
                return scanNumericLiteral();
            }
            return scanPunctuator();
        }

        if (isDecimalDigit(ch)) {
            return scanNumericLiteral();
        }

        // Slash (/) U+002F can also start a regex.
        if (extra.tokenize && ch === 0x2F) {
            return advanceSlash();
        }

        return scanPunctuator();
    }

    function collectToken() {
        var loc, token, range, value;

        skipComment();
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        token = advance();
        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        if (token.type !== Token.EOF) {
            value = source.slice(token.start, token.end);
            extra.tokens.push({
                type: TokenName[token.type],
                value: value,
                range: [token.start, token.end],
                loc: loc
            });
        }

        return token;
    }

    function lex() {
        var token;

        token = lookahead;
        index = token.end;
        lineNumber = token.lineNumber;
        lineStart = token.lineStart;

        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();

        index = token.end;
        lineNumber = token.lineNumber;
        lineStart = token.lineStart;

        return token;
    }

    function peek() {
        var pos, line, start;

        pos = index;
        line = lineNumber;
        start = lineStart;
        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
        index = pos;
        lineNumber = line;
        lineStart = start;
    }

    function Position(line, column) {
        this.line = line;
        this.column = column;
    }

    function SourceLocation(startLine, startColumn, line, column) {
        this.start = new Position(startLine, startColumn);
        this.end = new Position(line, column);
    }

    SyntaxTreeDelegate = {

        name: 'SyntaxTree',

        processComment: function (node) {
            var lastChild, trailingComments;

            if (node.type === Syntax.Program) {
                if (node.body.length > 0) {
                    return;
                }
            }

            if (extra.trailingComments.length > 0) {
                if (extra.trailingComments[0].range[0] >= node.range[1]) {
                    trailingComments = extra.trailingComments;
                    extra.trailingComments = [];
                } else {
                    extra.trailingComments.length = 0;
                }
            } else {
                if (extra.bottomRightStack.length > 0 &&
                        extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments &&
                        extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments[0].range[0] >= node.range[1]) {
                    trailingComments = extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;
                    delete extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;
                }
            }

            // Eating the stack.
            while (extra.bottomRightStack.length > 0 && extra.bottomRightStack[extra.bottomRightStack.length - 1].range[0] >= node.range[0]) {
                lastChild = extra.bottomRightStack.pop();
            }

            if (lastChild) {
                if (lastChild.leadingComments && lastChild.leadingComments[lastChild.leadingComments.length - 1].range[1] <= node.range[0]) {
                    node.leadingComments = lastChild.leadingComments;
                    delete lastChild.leadingComments;
                }
            } else if (extra.leadingComments.length > 0 && extra.leadingComments[extra.leadingComments.length - 1].range[1] <= node.range[0]) {
                node.leadingComments = extra.leadingComments;
                extra.leadingComments = [];
            }


            if (trailingComments) {
                node.trailingComments = trailingComments;
            }

            extra.bottomRightStack.push(node);
        },

        markEnd: function (node, startToken) {
            if (extra.range) {
                node.range = [startToken.start, index];
            }
            if (extra.loc) {
                node.loc = new SourceLocation(
                    startToken.startLineNumber === undefined ?  startToken.lineNumber : startToken.startLineNumber,
                    startToken.start - (startToken.startLineStart === undefined ?  startToken.lineStart : startToken.startLineStart),
                    lineNumber,
                    index - lineStart
                );
                this.postProcess(node);
            }

            if (extra.attachComment) {
                this.processComment(node);
            }
            return node;
        },

        postProcess: function (node) {
            if (extra.source) {
                node.loc.source = extra.source;
            }
            return node;
        },

        createArrayExpression: function (elements) {
            return {
                type: Syntax.ArrayExpression,
                elements: elements
            };
        },

        createAssignmentExpression: function (operator, left, right) {
            return {
                type: Syntax.AssignmentExpression,
                operator: operator,
                left: left,
                right: right
            };
        },

        createBinaryExpression: function (operator, left, right) {
            var type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression :
                        Syntax.BinaryExpression;
            return {
                type: type,
                operator: operator,
                left: left,
                right: right
            };
        },

        createBlockStatement: function (body) {
            return {
                type: Syntax.BlockStatement,
                body: body
            };
        },

        createBreakStatement: function (label) {
            return {
                type: Syntax.BreakStatement,
                label: label
            };
        },

        createCallExpression: function (callee, args) {
            return {
                type: Syntax.CallExpression,
                callee: callee,
                'arguments': args
            };
        },

        createCatchClause: function (param, body) {
            return {
                type: Syntax.CatchClause,
                param: param,
                body: body
            };
        },

        createConditionalExpression: function (test, consequent, alternate) {
            return {
                type: Syntax.ConditionalExpression,
                test: test,
                consequent: consequent,
                alternate: alternate
            };
        },

        createContinueStatement: function (label) {
            return {
                type: Syntax.ContinueStatement,
                label: label
            };
        },

        createDebuggerStatement: function () {
            return {
                type: Syntax.DebuggerStatement
            };
        },

        createDoWhileStatement: function (body, test) {
            return {
                type: Syntax.DoWhileStatement,
                body: body,
                test: test
            };
        },

        createEmptyStatement: function () {
            return {
                type: Syntax.EmptyStatement
            };
        },

        createExpressionStatement: function (expression) {
            return {
                type: Syntax.ExpressionStatement,
                expression: expression
            };
        },

        createForStatement: function (init, test, update, body) {
            return {
                type: Syntax.ForStatement,
                init: init,
                test: test,
                update: update,
                body: body
            };
        },

        createForInStatement: function (left, right, body) {
            return {
                type: Syntax.ForInStatement,
                left: left,
                right: right,
                body: body,
                each: false
            };
        },

        createFunctionDeclaration: function (id, params, defaults, body) {
            return {
                type: Syntax.FunctionDeclaration,
                id: id,
                params: params,
                defaults: defaults,
                body: body,
                rest: null,
                generator: false,
                expression: false
            };
        },

        createFunctionExpression: function (id, params, defaults, body) {
            return {
                type: Syntax.FunctionExpression,
                id: id,
                params: params,
                defaults: defaults,
                body: body,
                rest: null,
                generator: false,
                expression: false
            };
        },

        createIdentifier: function (name) {
            return {
                type: Syntax.Identifier,
                name: name
            };
        },

        createIfStatement: function (test, consequent, alternate) {
            return {
                type: Syntax.IfStatement,
                test: test,
                consequent: consequent,
                alternate: alternate
            };
        },

        createLabeledStatement: function (label, body) {
            return {
                type: Syntax.LabeledStatement,
                label: label,
                body: body
            };
        },

        createLiteral: function (token) {
            return {
                type: Syntax.Literal,
                value: token.value,
                raw: source.slice(token.start, token.end)
            };
        },

        createMemberExpression: function (accessor, object, property) {
            return {
                type: Syntax.MemberExpression,
                computed: accessor === '[',
                object: object,
                property: property
            };
        },

        createNewExpression: function (callee, args) {
            return {
                type: Syntax.NewExpression,
                callee: callee,
                'arguments': args
            };
        },

        createObjectExpression: function (properties) {
            return {
                type: Syntax.ObjectExpression,
                properties: properties
            };
        },

        createPostfixExpression: function (operator, argument) {
            return {
                type: Syntax.UpdateExpression,
                operator: operator,
                argument: argument,
                prefix: false
            };
        },

        createProgram: function (body) {
            return {
                type: Syntax.Program,
                body: body
            };
        },

        createProperty: function (kind, key, value) {
            return {
                type: Syntax.Property,
                key: key,
                value: value,
                kind: kind
            };
        },

        createReturnStatement: function (argument) {
            return {
                type: Syntax.ReturnStatement,
                argument: argument
            };
        },

        createSequenceExpression: function (expressions) {
            return {
                type: Syntax.SequenceExpression,
                expressions: expressions
            };
        },

        createSwitchCase: function (test, consequent) {
            return {
                type: Syntax.SwitchCase,
                test: test,
                consequent: consequent
            };
        },

        createSwitchStatement: function (discriminant, cases) {
            return {
                type: Syntax.SwitchStatement,
                discriminant: discriminant,
                cases: cases
            };
        },

        createThisExpression: function () {
            return {
                type: Syntax.ThisExpression
            };
        },

        createThrowStatement: function (argument) {
            return {
                type: Syntax.ThrowStatement,
                argument: argument
            };
        },

        createTryStatement: function (block, guardedHandlers, handlers, finalizer) {
            return {
                type: Syntax.TryStatement,
                block: block,
                guardedHandlers: guardedHandlers,
                handlers: handlers,
                finalizer: finalizer
            };
        },

        createUnaryExpression: function (operator, argument) {
            if (operator === '++' || operator === '--') {
                return {
                    type: Syntax.UpdateExpression,
                    operator: operator,
                    argument: argument,
                    prefix: true
                };
            }
            return {
                type: Syntax.UnaryExpression,
                operator: operator,
                argument: argument,
                prefix: true
            };
        },

        createVariableDeclaration: function (declarations, kind) {
            return {
                type: Syntax.VariableDeclaration,
                declarations: declarations,
                kind: kind
            };
        },

        createVariableDeclarator: function (id, init) {
            return {
                type: Syntax.VariableDeclarator,
                id: id,
                init: init
            };
        },

        createWhileStatement: function (test, body) {
            return {
                type: Syntax.WhileStatement,
                test: test,
                body: body
            };
        },

        createWithStatement: function (object, body) {
            return {
                type: Syntax.WithStatement,
                object: object,
                body: body
            };
        }
    };

    // Return true if there is a line terminator before the next token.

    function peekLineTerminator() {
        var pos, line, start, found;

        pos = index;
        line = lineNumber;
        start = lineStart;
        skipComment();
        found = lineNumber !== line;
        index = pos;
        lineNumber = line;
        lineStart = start;

        return found;
    }

    // Throw an exception

    function throwError(token, messageFormat) {
        var error,
            args = Array.prototype.slice.call(arguments, 2),
            msg = messageFormat.replace(
                /%(\d)/g,
                function (whole, index) {
                    assert(index < args.length, 'Message reference must be in range');
                    return args[index];
                }
            );

        if (typeof token.lineNumber === 'number') {
            error = new Error('Line ' + token.lineNumber + ': ' + msg);
            error.index = token.start;
            error.lineNumber = token.lineNumber;
            error.column = token.start - lineStart + 1;
        } else {
            error = new Error('Line ' + lineNumber + ': ' + msg);
            error.index = index;
            error.lineNumber = lineNumber;
            error.column = index - lineStart + 1;
        }

        error.description = msg;
        throw error;
    }

    function throwErrorTolerant() {
        try {
            throwError.apply(null, arguments);
        } catch (e) {
            if (extra.errors) {
                extra.errors.push(e);
            } else {
                throw e;
            }
        }
    }


    // Throw an exception because of the token.

    function throwUnexpected(token) {
        if (token.type === Token.EOF) {
            throwError(token, Messages.UnexpectedEOS);
        }

        if (token.type === Token.NumericLiteral) {
            throwError(token, Messages.UnexpectedNumber);
        }

        if (token.type === Token.StringLiteral) {
            throwError(token, Messages.UnexpectedString);
        }

        if (token.type === Token.Identifier) {
            throwError(token, Messages.UnexpectedIdentifier);
        }

        if (token.type === Token.Keyword) {
            if (isFutureReservedWord(token.value)) {
                throwError(token, Messages.UnexpectedReserved);
            } else if (strict && isStrictModeReservedWord(token.value)) {
                throwErrorTolerant(token, Messages.StrictReservedWord);
                return;
            }
            throwError(token, Messages.UnexpectedToken, token.value);
        }

        // BooleanLiteral, NullLiteral, or Punctuator.
        throwError(token, Messages.UnexpectedToken, token.value);
    }

    // Expect the next token to match the specified punctuator.
    // If not, an exception will be thrown.

    function expect(value) {
        var token = lex();
        if (token.type !== Token.Punctuator || token.value !== value) {
            throwUnexpected(token);
        }
    }

    // Expect the next token to match the specified keyword.
    // If not, an exception will be thrown.

    function expectKeyword(keyword) {
        var token = lex();
        if (token.type !== Token.Keyword || token.value !== keyword) {
            throwUnexpected(token);
        }
    }

    // Return true if the next token matches the specified punctuator.

    function match(value) {
        return lookahead.type === Token.Punctuator && lookahead.value === value;
    }

    // Return true if the next token matches the specified keyword

    function matchKeyword(keyword) {
        return lookahead.type === Token.Keyword && lookahead.value === keyword;
    }

    // Return true if the next token is an assignment operator

    function matchAssign() {
        var op;

        if (lookahead.type !== Token.Punctuator) {
            return false;
        }
        op = lookahead.value;
        return op === '=' ||
            op === '*=' ||
            op === '/=' ||
            op === '%=' ||
            op === '+=' ||
            op === '-=' ||
            op === '<<=' ||
            op === '>>=' ||
            op === '>>>=' ||
            op === '&=' ||
            op === '^=' ||
            op === '|=';
    }

    function consumeSemicolon() {
        var line;

        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(index) === 0x3B || match(';')) {
            lex();
            return;
        }

        line = lineNumber;
        skipComment();
        if (lineNumber !== line) {
            return;
        }

        if (lookahead.type !== Token.EOF && !match('}')) {
            throwUnexpected(lookahead);
        }
    }

    // Return true if provided expression is LeftHandSideExpression

    function isLeftHandSide(expr) {
        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;
    }

    // 11.1.4 Array Initialiser

    function parseArrayInitialiser() {
        var elements = [], startToken;

        startToken = lookahead;
        expect('[');

        while (!match(']')) {
            if (match(',')) {
                lex();
                elements.push(null);
            } else {
                elements.push(parseAssignmentExpression());

                if (!match(']')) {
                    expect(',');
                }
            }
        }

        lex();

        return delegate.markEnd(delegate.createArrayExpression(elements), startToken);
    }

    // 11.1.5 Object Initialiser

    function parsePropertyFunction(param, first) {
        var previousStrict, body, startToken;

        previousStrict = strict;
        startToken = lookahead;
        body = parseFunctionSourceElements();
        if (first && strict && isRestrictedWord(param[0].name)) {
            throwErrorTolerant(first, Messages.StrictParamName);
        }
        strict = previousStrict;
        return delegate.markEnd(delegate.createFunctionExpression(null, param, [], body), startToken);
    }

    function parseObjectPropertyKey() {
        var token, startToken;

        startToken = lookahead;
        token = lex();

        // Note: This function is called only from parseObjectProperty(), where
        // EOF and Punctuator tokens are already filtered out.

        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
            if (strict && token.octal) {
                throwErrorTolerant(token, Messages.StrictOctalLiteral);
            }
            return delegate.markEnd(delegate.createLiteral(token), startToken);
        }

        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);
    }

    function parseObjectProperty() {
        var token, key, id, value, param, startToken;

        token = lookahead;
        startToken = lookahead;

        if (token.type === Token.Identifier) {

            id = parseObjectPropertyKey();

            // Property Assignment: Getter and Setter.

            if (token.value === 'get' && !match(':')) {
                key = parseObjectPropertyKey();
                expect('(');
                expect(')');
                value = parsePropertyFunction([]);
                return delegate.markEnd(delegate.createProperty('get', key, value), startToken);
            }
            if (token.value === 'set' && !match(':')) {
                key = parseObjectPropertyKey();
                expect('(');
                token = lookahead;
                if (token.type !== Token.Identifier) {
                    expect(')');
                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);
                    value = parsePropertyFunction([]);
                } else {
                    param = [ parseVariableIdentifier() ];
                    expect(')');
                    value = parsePropertyFunction(param, token);
                }
                return delegate.markEnd(delegate.createProperty('set', key, value), startToken);
            }
            expect(':');
            value = parseAssignmentExpression();
            return delegate.markEnd(delegate.createProperty('init', id, value), startToken);
        }
        if (token.type === Token.EOF || token.type === Token.Punctuator) {
            throwUnexpected(token);
        } else {
            key = parseObjectPropertyKey();
            expect(':');
            value = parseAssignmentExpression();
            return delegate.markEnd(delegate.createProperty('init', key, value), startToken);
        }
    }

    function parseObjectInitialiser() {
        var properties = [], property, name, key, kind, map = {}, toString = String, startToken;

        startToken = lookahead;

        expect('{');

        while (!match('}')) {
            property = parseObjectProperty();

            if (property.key.type === Syntax.Identifier) {
                name = property.key.name;
            } else {
                name = toString(property.key.value);
            }
            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;

            key = '$' + name;
            if (Object.prototype.hasOwnProperty.call(map, key)) {
                if (map[key] === PropertyKind.Data) {
                    if (strict && kind === PropertyKind.Data) {
                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);
                    } else if (kind !== PropertyKind.Data) {
                        throwErrorTolerant({}, Messages.AccessorDataProperty);
                    }
                } else {
                    if (kind === PropertyKind.Data) {
                        throwErrorTolerant({}, Messages.AccessorDataProperty);
                    } else if (map[key] & kind) {
                        throwErrorTolerant({}, Messages.AccessorGetSet);
                    }
                }
                map[key] |= kind;
            } else {
                map[key] = kind;
            }

            properties.push(property);

            if (!match('}')) {
                expect(',');
            }
        }

        expect('}');

        return delegate.markEnd(delegate.createObjectExpression(properties), startToken);
    }

    // 11.1.6 The Grouping Operator

    function parseGroupExpression() {
        var expr;

        expect('(');

        expr = parseExpression();

        expect(')');

        return expr;
    }


    // 11.1 Primary Expressions

    function parsePrimaryExpression() {
        var type, token, expr, startToken;

        if (match('(')) {
            return parseGroupExpression();
        }

        if (match('[')) {
            return parseArrayInitialiser();
        }

        if (match('{')) {
            return parseObjectInitialiser();
        }

        type = lookahead.type;
        startToken = lookahead;

        if (type === Token.Identifier) {
            expr =  delegate.createIdentifier(lex().value);
        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
            if (strict && lookahead.octal) {
                throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);
            }
            expr = delegate.createLiteral(lex());
        } else if (type === Token.Keyword) {
            if (matchKeyword('function')) {
                return parseFunctionExpression();
            }
            if (matchKeyword('this')) {
                lex();
                expr = delegate.createThisExpression();
            } else {
                throwUnexpected(lex());
            }
        } else if (type === Token.BooleanLiteral) {
            token = lex();
            token.value = (token.value === 'true');
            expr = delegate.createLiteral(token);
        } else if (type === Token.NullLiteral) {
            token = lex();
            token.value = null;
            expr = delegate.createLiteral(token);
        } else if (match('/') || match('/=')) {
            if (typeof extra.tokens !== 'undefined') {
                expr = delegate.createLiteral(collectRegex());
            } else {
                expr = delegate.createLiteral(scanRegExp());
            }
            peek();
        } else {
            throwUnexpected(lex());
        }

        return delegate.markEnd(expr, startToken);
    }

    // 11.2 Left-Hand-Side Expressions

    function parseArguments() {
        var args = [];

        expect('(');

        if (!match(')')) {
            while (index < length) {
                args.push(parseAssignmentExpression());
                if (match(')')) {
                    break;
                }
                expect(',');
            }
        }

        expect(')');

        return args;
    }

    function parseNonComputedProperty() {
        var token, startToken;

        startToken = lookahead;
        token = lex();

        if (!isIdentifierName(token)) {
            throwUnexpected(token);
        }

        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);
    }

    function parseNonComputedMember() {
        expect('.');

        return parseNonComputedProperty();
    }

    function parseComputedMember() {
        var expr;

        expect('[');

        expr = parseExpression();

        expect(']');

        return expr;
    }

    function parseNewExpression() {
        var callee, args, startToken;

        startToken = lookahead;
        expectKeyword('new');
        callee = parseLeftHandSideExpression();
        args = match('(') ? parseArguments() : [];

        return delegate.markEnd(delegate.createNewExpression(callee, args), startToken);
    }

    function parseLeftHandSideExpressionAllowCall() {
        var previousAllowIn, expr, args, property, startToken;

        startToken = lookahead;

        previousAllowIn = state.allowIn;
        state.allowIn = true;
        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
        state.allowIn = previousAllowIn;

        for (;;) {
            if (match('.')) {
                property = parseNonComputedMember();
                expr = delegate.createMemberExpression('.', expr, property);
            } else if (match('(')) {
                args = parseArguments();
                expr = delegate.createCallExpression(expr, args);
            } else if (match('[')) {
                property = parseComputedMember();
                expr = delegate.createMemberExpression('[', expr, property);
            } else {
                break;
            }
            delegate.markEnd(expr, startToken);
        }

        return expr;
    }

    function parseLeftHandSideExpression() {
        var previousAllowIn, expr, property, startToken;

        startToken = lookahead;

        previousAllowIn = state.allowIn;
        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
        state.allowIn = previousAllowIn;

        while (match('.') || match('[')) {
            if (match('[')) {
                property = parseComputedMember();
                expr = delegate.createMemberExpression('[', expr, property);
            } else {
                property = parseNonComputedMember();
                expr = delegate.createMemberExpression('.', expr, property);
            }
            delegate.markEnd(expr, startToken);
        }

        return expr;
    }

    // 11.3 Postfix Expressions

    function parsePostfixExpression() {
        var expr, token, startToken = lookahead;

        expr = parseLeftHandSideExpressionAllowCall();

        if (lookahead.type === Token.Punctuator) {
            if ((match('++') || match('--')) && !peekLineTerminator()) {
                // 11.3.1, 11.3.2
                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                    throwErrorTolerant({}, Messages.StrictLHSPostfix);
                }

                if (!isLeftHandSide(expr)) {
                    throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
                }

                token = lex();
                expr = delegate.markEnd(delegate.createPostfixExpression(token.value, expr), startToken);
            }
        }

        return expr;
    }

    // 11.4 Unary Operators

    function parseUnaryExpression() {
        var token, expr, startToken;

        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
            expr = parsePostfixExpression();
        } else if (match('++') || match('--')) {
            startToken = lookahead;
            token = lex();
            expr = parseUnaryExpression();
            // 11.4.4, 11.4.5
            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                throwErrorTolerant({}, Messages.StrictLHSPrefix);
            }

            if (!isLeftHandSide(expr)) {
                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
            }

            expr = delegate.createUnaryExpression(token.value, expr);
            expr = delegate.markEnd(expr, startToken);
        } else if (match('+') || match('-') || match('~') || match('!')) {
            startToken = lookahead;
            token = lex();
            expr = parseUnaryExpression();
            expr = delegate.createUnaryExpression(token.value, expr);
            expr = delegate.markEnd(expr, startToken);
        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
            startToken = lookahead;
            token = lex();
            expr = parseUnaryExpression();
            expr = delegate.createUnaryExpression(token.value, expr);
            expr = delegate.markEnd(expr, startToken);
            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
                throwErrorTolerant({}, Messages.StrictDelete);
            }
        } else {
            expr = parsePostfixExpression();
        }

        return expr;
    }

    function binaryPrecedence(token, allowIn) {
        var prec = 0;

        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
            return 0;
        }

        switch (token.value) {
        case '||':
            prec = 1;
            break;

        case '&&':
            prec = 2;
            break;

        case '|':
            prec = 3;
            break;

        case '^':
            prec = 4;
            break;

        case '&':
            prec = 5;
            break;

        case '==':
        case '!=':
        case '===':
        case '!==':
            prec = 6;
            break;

        case '<':
        case '>':
        case '<=':
        case '>=':
        case 'instanceof':
            prec = 7;
            break;

        case 'in':
            prec = allowIn ? 7 : 0;
            break;

        case '<<':
        case '>>':
        case '>>>':
            prec = 8;
            break;

        case '+':
        case '-':
            prec = 9;
            break;

        case '*':
        case '/':
        case '%':
            prec = 11;
            break;

        default:
            break;
        }

        return prec;
    }

    // 11.5 Multiplicative Operators
    // 11.6 Additive Operators
    // 11.7 Bitwise Shift Operators
    // 11.8 Relational Operators
    // 11.9 Equality Operators
    // 11.10 Binary Bitwise Operators
    // 11.11 Binary Logical Operators

    function parseBinaryExpression() {
        var marker, markers, expr, token, prec, stack, right, operator, left, i;

        marker = lookahead;
        left = parseUnaryExpression();

        token = lookahead;
        prec = binaryPrecedence(token, state.allowIn);
        if (prec === 0) {
            return left;
        }
        token.prec = prec;
        lex();

        markers = [marker, lookahead];
        right = parseUnaryExpression();

        stack = [left, token, right];

        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {

            // Reduce: make a binary expression from the three topmost entries.
            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
                right = stack.pop();
                operator = stack.pop().value;
                left = stack.pop();
                expr = delegate.createBinaryExpression(operator, left, right);
                markers.pop();
                marker = markers[markers.length - 1];
                delegate.markEnd(expr, marker);
                stack.push(expr);
            }

            // Shift.
            token = lex();
            token.prec = prec;
            stack.push(token);
            markers.push(lookahead);
            expr = parseUnaryExpression();
            stack.push(expr);
        }

        // Final reduce to clean-up the stack.
        i = stack.length - 1;
        expr = stack[i];
        markers.pop();
        while (i > 1) {
            expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
            i -= 2;
            marker = markers.pop();
            delegate.markEnd(expr, marker);
        }

        return expr;
    }


    // 11.12 Conditional Operator

    function parseConditionalExpression() {
        var expr, previousAllowIn, consequent, alternate, startToken;

        startToken = lookahead;

        expr = parseBinaryExpression();

        if (match('?')) {
            lex();
            previousAllowIn = state.allowIn;
            state.allowIn = true;
            consequent = parseAssignmentExpression();
            state.allowIn = previousAllowIn;
            expect(':');
            alternate = parseAssignmentExpression();

            expr = delegate.createConditionalExpression(expr, consequent, alternate);
            delegate.markEnd(expr, startToken);
        }

        return expr;
    }

    // 11.13 Assignment Operators

    function parseAssignmentExpression() {
        var token, left, right, node, startToken;

        token = lookahead;
        startToken = lookahead;

        node = left = parseConditionalExpression();

        if (matchAssign()) {
            // LeftHandSideExpression
            if (!isLeftHandSide(left)) {
                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
            }

            // 11.13.1
            if (strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) {
                throwErrorTolerant(token, Messages.StrictLHSAssignment);
            }

            token = lex();
            right = parseAssignmentExpression();
            node = delegate.markEnd(delegate.createAssignmentExpression(token.value, left, right), startToken);
        }

        return node;
    }

    // 11.14 Comma Operator

    function parseExpression() {
        var expr, startToken = lookahead;

        expr = parseAssignmentExpression();

        if (match(',')) {
            expr = delegate.createSequenceExpression([ expr ]);

            while (index < length) {
                if (!match(',')) {
                    break;
                }
                lex();
                expr.expressions.push(parseAssignmentExpression());
            }

            delegate.markEnd(expr, startToken);
        }

        return expr;
    }

    // 12.1 Block

    function parseStatementList() {
        var list = [],
            statement;

        while (index < length) {
            if (match('}')) {
                break;
            }
            statement = parseSourceElement();
            if (typeof statement === 'undefined') {
                break;
            }
            list.push(statement);
        }

        return list;
    }

    function parseBlock() {
        var block, startToken;

        startToken = lookahead;
        expect('{');

        block = parseStatementList();

        expect('}');

        return delegate.markEnd(delegate.createBlockStatement(block), startToken);
    }

    // 12.2 Variable Statement

    function parseVariableIdentifier() {
        var token, startToken;

        startToken = lookahead;
        token = lex();

        if (token.type !== Token.Identifier) {
            throwUnexpected(token);
        }

        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);
    }

    function parseVariableDeclaration(kind) {
        var init = null, id, startToken;

        startToken = lookahead;
        id = parseVariableIdentifier();

        // 12.2.1
        if (strict && isRestrictedWord(id.name)) {
            throwErrorTolerant({}, Messages.StrictVarName);
        }

        if (kind === 'const') {
            expect('=');
            init = parseAssignmentExpression();
        } else if (match('=')) {
            lex();
            init = parseAssignmentExpression();
        }

        return delegate.markEnd(delegate.createVariableDeclarator(id, init), startToken);
    }

    function parseVariableDeclarationList(kind) {
        var list = [];

        do {
            list.push(parseVariableDeclaration(kind));
            if (!match(',')) {
                break;
            }
            lex();
        } while (index < length);

        return list;
    }

    function parseVariableStatement() {
        var declarations;

        expectKeyword('var');

        declarations = parseVariableDeclarationList();

        consumeSemicolon();

        return delegate.createVariableDeclaration(declarations, 'var');
    }

    // kind may be `const` or `let`
    // Both are experimental and not in the specification yet.
    // see http://wiki.ecmascript.org/doku.php?id=harmony:const
    // and http://wiki.ecmascript.org/doku.php?id=harmony:let
    function parseConstLetDeclaration(kind) {
        var declarations, startToken;

        startToken = lookahead;

        expectKeyword(kind);

        declarations = parseVariableDeclarationList(kind);

        consumeSemicolon();

        return delegate.markEnd(delegate.createVariableDeclaration(declarations, kind), startToken);
    }

    // 12.3 Empty Statement

    function parseEmptyStatement() {
        expect(';');
        return delegate.createEmptyStatement();
    }

    // 12.4 Expression Statement

    function parseExpressionStatement() {
        var expr = parseExpression();
        consumeSemicolon();
        return delegate.createExpressionStatement(expr);
    }

    // 12.5 If statement

    function parseIfStatement() {
        var test, consequent, alternate;

        expectKeyword('if');

        expect('(');

        test = parseExpression();

        expect(')');

        consequent = parseStatement();

        if (matchKeyword('else')) {
            lex();
            alternate = parseStatement();
        } else {
            alternate = null;
        }

        return delegate.createIfStatement(test, consequent, alternate);
    }

    // 12.6 Iteration Statements

    function parseDoWhileStatement() {
        var body, test, oldInIteration;

        expectKeyword('do');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        if (match(';')) {
            lex();
        }

        return delegate.createDoWhileStatement(body, test);
    }

    function parseWhileStatement() {
        var test, body, oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        return delegate.createWhileStatement(test, body);
    }

    function parseForVariableDeclaration() {
        var token, declarations, startToken;

        startToken = lookahead;
        token = lex();
        declarations = parseVariableDeclarationList();

        return delegate.markEnd(delegate.createVariableDeclaration(declarations, token.value), startToken);
    }

    function parseForStatement() {
        var init, test, update, left, right, body, oldInIteration;

        init = test = update = null;

        expectKeyword('for');

        expect('(');

        if (match(';')) {
            lex();
        } else {
            if (matchKeyword('var') || matchKeyword('let')) {
                state.allowIn = false;
                init = parseForVariableDeclaration();
                state.allowIn = true;

                if (init.declarations.length === 1 && matchKeyword('in')) {
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                }
            } else {
                state.allowIn = false;
                init = parseExpression();
                state.allowIn = true;

                if (matchKeyword('in')) {
                    // LeftHandSideExpression
                    if (!isLeftHandSide(init)) {
                        throwErrorTolerant({}, Messages.InvalidLHSInForIn);
                    }

                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                }
            }

            if (typeof left === 'undefined') {
                expect(';');
            }
        }

        if (typeof left === 'undefined') {

            if (!match(';')) {
                test = parseExpression();
            }
            expect(';');

            if (!match(')')) {
                update = parseExpression();
            }
        }

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        return (typeof left === 'undefined') ?
                delegate.createForStatement(init, test, update, body) :
                delegate.createForInStatement(left, right, body);
    }

    // 12.7 The continue statement

    function parseContinueStatement() {
        var label = null, key;

        expectKeyword('continue');

        // Optimize the most common form: 'continue;'.
        if (source.charCodeAt(index) === 0x3B) {
            lex();

            if (!state.inIteration) {
                throwError({}, Messages.IllegalContinue);
            }

            return delegate.createContinueStatement(null);
        }

        if (peekLineTerminator()) {
            if (!state.inIteration) {
                throwError({}, Messages.IllegalContinue);
            }

            return delegate.createContinueStatement(null);
        }

        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError({}, Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !state.inIteration) {
            throwError({}, Messages.IllegalContinue);
        }

        return delegate.createContinueStatement(label);
    }

    // 12.8 The break statement

    function parseBreakStatement() {
        var label = null, key;

        expectKeyword('break');

        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(index) === 0x3B) {
            lex();

            if (!(state.inIteration || state.inSwitch)) {
                throwError({}, Messages.IllegalBreak);
            }

            return delegate.createBreakStatement(null);
        }

        if (peekLineTerminator()) {
            if (!(state.inIteration || state.inSwitch)) {
                throwError({}, Messages.IllegalBreak);
            }

            return delegate.createBreakStatement(null);
        }

        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError({}, Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !(state.inIteration || state.inSwitch)) {
            throwError({}, Messages.IllegalBreak);
        }

        return delegate.createBreakStatement(label);
    }

    // 12.9 The return statement

    function parseReturnStatement() {
        var argument = null;

        expectKeyword('return');

        if (!state.inFunctionBody) {
            throwErrorTolerant({}, Messages.IllegalReturn);
        }

        // 'return' followed by a space and an identifier is very common.
        if (source.charCodeAt(index) === 0x20) {
            if (isIdentifierStart(source.charCodeAt(index + 1))) {
                argument = parseExpression();
                consumeSemicolon();
                return delegate.createReturnStatement(argument);
            }
        }

        if (peekLineTerminator()) {
            return delegate.createReturnStatement(null);
        }

        if (!match(';')) {
            if (!match('}') && lookahead.type !== Token.EOF) {
                argument = parseExpression();
            }
        }

        consumeSemicolon();

        return delegate.createReturnStatement(argument);
    }

    // 12.10 The with statement

    function parseWithStatement() {
        var object, body;

        if (strict) {
            // TODO(ikarienator): Should we update the test cases instead?
            skipComment();
            throwErrorTolerant({}, Messages.StrictModeWith);
        }

        expectKeyword('with');

        expect('(');

        object = parseExpression();

        expect(')');

        body = parseStatement();

        return delegate.createWithStatement(object, body);
    }

    // 12.10 The swith statement

    function parseSwitchCase() {
        var test, consequent = [], statement, startToken;

        startToken = lookahead;
        if (matchKeyword('default')) {
            lex();
            test = null;
        } else {
            expectKeyword('case');
            test = parseExpression();
        }
        expect(':');

        while (index < length) {
            if (match('}') || matchKeyword('default') || matchKeyword('case')) {
                break;
            }
            statement = parseStatement();
            consequent.push(statement);
        }

        return delegate.markEnd(delegate.createSwitchCase(test, consequent), startToken);
    }

    function parseSwitchStatement() {
        var discriminant, cases, clause, oldInSwitch, defaultFound;

        expectKeyword('switch');

        expect('(');

        discriminant = parseExpression();

        expect(')');

        expect('{');

        cases = [];

        if (match('}')) {
            lex();
            return delegate.createSwitchStatement(discriminant, cases);
        }

        oldInSwitch = state.inSwitch;
        state.inSwitch = true;
        defaultFound = false;

        while (index < length) {
            if (match('}')) {
                break;
            }
            clause = parseSwitchCase();
            if (clause.test === null) {
                if (defaultFound) {
                    throwError({}, Messages.MultipleDefaultsInSwitch);
                }
                defaultFound = true;
            }
            cases.push(clause);
        }

        state.inSwitch = oldInSwitch;

        expect('}');

        return delegate.createSwitchStatement(discriminant, cases);
    }

    // 12.13 The throw statement

    function parseThrowStatement() {
        var argument;

        expectKeyword('throw');

        if (peekLineTerminator()) {
            throwError({}, Messages.NewlineAfterThrow);
        }

        argument = parseExpression();

        consumeSemicolon();

        return delegate.createThrowStatement(argument);
    }

    // 12.14 The try statement

    function parseCatchClause() {
        var param, body, startToken;

        startToken = lookahead;
        expectKeyword('catch');

        expect('(');
        if (match(')')) {
            throwUnexpected(lookahead);
        }

        param = parseVariableIdentifier();
        // 12.14.1
        if (strict && isRestrictedWord(param.name)) {
            throwErrorTolerant({}, Messages.StrictCatchVariable);
        }

        expect(')');
        body = parseBlock();
        return delegate.markEnd(delegate.createCatchClause(param, body), startToken);
    }

    function parseTryStatement() {
        var block, handlers = [], finalizer = null;

        expectKeyword('try');

        block = parseBlock();

        if (matchKeyword('catch')) {
            handlers.push(parseCatchClause());
        }

        if (matchKeyword('finally')) {
            lex();
            finalizer = parseBlock();
        }

        if (handlers.length === 0 && !finalizer) {
            throwError({}, Messages.NoCatchOrFinally);
        }

        return delegate.createTryStatement(block, [], handlers, finalizer);
    }

    // 12.15 The debugger statement

    function parseDebuggerStatement() {
        expectKeyword('debugger');

        consumeSemicolon();

        return delegate.createDebuggerStatement();
    }

    // 12 Statements

    function parseStatement() {
        var type = lookahead.type,
            expr,
            labeledBody,
            key,
            startToken;

        if (type === Token.EOF) {
            throwUnexpected(lookahead);
        }

        if (type === Token.Punctuator && lookahead.value === '{') {
            return parseBlock();
        }

        startToken = lookahead;

        if (type === Token.Punctuator) {
            switch (lookahead.value) {
            case ';':
                return delegate.markEnd(parseEmptyStatement(), startToken);
            case '(':
                return delegate.markEnd(parseExpressionStatement(), startToken);
            default:
                break;
            }
        }

        if (type === Token.Keyword) {
            switch (lookahead.value) {
            case 'break':
                return delegate.markEnd(parseBreakStatement(), startToken);
            case 'continue':
                return delegate.markEnd(parseContinueStatement(), startToken);
            case 'debugger':
                return delegate.markEnd(parseDebuggerStatement(), startToken);
            case 'do':
                return delegate.markEnd(parseDoWhileStatement(), startToken);
            case 'for':
                return delegate.markEnd(parseForStatement(), startToken);
            case 'function':
                return delegate.markEnd(parseFunctionDeclaration(), startToken);
            case 'if':
                return delegate.markEnd(parseIfStatement(), startToken);
            case 'return':
                return delegate.markEnd(parseReturnStatement(), startToken);
            case 'switch':
                return delegate.markEnd(parseSwitchStatement(), startToken);
            case 'throw':
                return delegate.markEnd(parseThrowStatement(), startToken);
            case 'try':
                return delegate.markEnd(parseTryStatement(), startToken);
            case 'var':
                return delegate.markEnd(parseVariableStatement(), startToken);
            case 'while':
                return delegate.markEnd(parseWhileStatement(), startToken);
            case 'with':
                return delegate.markEnd(parseWithStatement(), startToken);
            default:
                break;
            }
        }

        expr = parseExpression();

        // 12.12 Labelled Statements
        if ((expr.type === Syntax.Identifier) && match(':')) {
            lex();

            key = '$' + expr.name;
            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError({}, Messages.Redeclaration, 'Label', expr.name);
            }

            state.labelSet[key] = true;
            labeledBody = parseStatement();
            delete state.labelSet[key];
            return delegate.markEnd(delegate.createLabeledStatement(expr, labeledBody), startToken);
        }

        consumeSemicolon();

        return delegate.markEnd(delegate.createExpressionStatement(expr), startToken);
    }

    // 13 Function Definition

    function parseFunctionSourceElements() {
        var sourceElement, sourceElements = [], token, directive, firstRestricted,
            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, startToken;

        startToken = lookahead;
        expect('{');

        while (index < length) {
            if (lookahead.type !== Token.StringLiteral) {
                break;
            }
            token = lookahead;

            sourceElement = parseSourceElement();
            sourceElements.push(sourceElement);
            if (sourceElement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        oldLabelSet = state.labelSet;
        oldInIteration = state.inIteration;
        oldInSwitch = state.inSwitch;
        oldInFunctionBody = state.inFunctionBody;

        state.labelSet = {};
        state.inIteration = false;
        state.inSwitch = false;
        state.inFunctionBody = true;

        while (index < length) {
            if (match('}')) {
                break;
            }
            sourceElement = parseSourceElement();
            if (typeof sourceElement === 'undefined') {
                break;
            }
            sourceElements.push(sourceElement);
        }

        expect('}');

        state.labelSet = oldLabelSet;
        state.inIteration = oldInIteration;
        state.inSwitch = oldInSwitch;
        state.inFunctionBody = oldInFunctionBody;

        return delegate.markEnd(delegate.createBlockStatement(sourceElements), startToken);
    }

    function parseParams(firstRestricted) {
        var param, params = [], token, stricted, paramSet, key, message;
        expect('(');

        if (!match(')')) {
            paramSet = {};
            while (index < length) {
                token = lookahead;
                param = parseVariableIdentifier();
                key = '$' + token.value;
                if (strict) {
                    if (isRestrictedWord(token.value)) {
                        stricted = token;
                        message = Messages.StrictParamName;
                    }
                    if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
                        stricted = token;
                        message = Messages.StrictParamDupe;
                    }
                } else if (!firstRestricted) {
                    if (isRestrictedWord(token.value)) {
                        firstRestricted = token;
                        message = Messages.StrictParamName;
                    } else if (isStrictModeReservedWord(token.value)) {
                        firstRestricted = token;
                        message = Messages.StrictReservedWord;
                    } else if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
                        firstRestricted = token;
                        message = Messages.StrictParamDupe;
                    }
                }
                params.push(param);
                paramSet[key] = true;
                if (match(')')) {
                    break;
                }
                expect(',');
            }
        }

        expect(')');

        return {
            params: params,
            stricted: stricted,
            firstRestricted: firstRestricted,
            message: message
        };
    }

    function parseFunctionDeclaration() {
        var id, params = [], body, token, stricted, tmp, firstRestricted, message, previousStrict, startToken;

        startToken = lookahead;

        expectKeyword('function');
        token = lookahead;
        id = parseVariableIdentifier();
        if (strict) {
            if (isRestrictedWord(token.value)) {
                throwErrorTolerant(token, Messages.StrictFunctionName);
            }
        } else {
            if (isRestrictedWord(token.value)) {
                firstRestricted = token;
                message = Messages.StrictFunctionName;
            } else if (isStrictModeReservedWord(token.value)) {
                firstRestricted = token;
                message = Messages.StrictReservedWord;
            }
        }

        tmp = parseParams(firstRestricted);
        params = tmp.params;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }

        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwError(firstRestricted, message);
        }
        if (strict && stricted) {
            throwErrorTolerant(stricted, message);
        }
        strict = previousStrict;

        return delegate.markEnd(delegate.createFunctionDeclaration(id, params, [], body), startToken);
    }

    function parseFunctionExpression() {
        var token, id = null, stricted, firstRestricted, message, tmp, params = [], body, previousStrict, startToken;

        startToken = lookahead;
        expectKeyword('function');

        if (!match('(')) {
            token = lookahead;
            id = parseVariableIdentifier();
            if (strict) {
                if (isRestrictedWord(token.value)) {
                    throwErrorTolerant(token, Messages.StrictFunctionName);
                }
            } else {
                if (isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictFunctionName;
                } else if (isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictReservedWord;
                }
            }
        }

        tmp = parseParams(firstRestricted);
        params = tmp.params;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }

        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwError(firstRestricted, message);
        }
        if (strict && stricted) {
            throwErrorTolerant(stricted, message);
        }
        strict = previousStrict;

        return delegate.markEnd(delegate.createFunctionExpression(id, params, [], body), startToken);
    }

    // 14 Program

    function parseSourceElement() {
        if (lookahead.type === Token.Keyword) {
            switch (lookahead.value) {
            case 'const':
            case 'let':
                return parseConstLetDeclaration(lookahead.value);
            case 'function':
                return parseFunctionDeclaration();
            default:
                return parseStatement();
            }
        }

        if (lookahead.type !== Token.EOF) {
            return parseStatement();
        }
    }

    function parseSourceElements() {
        var sourceElement, sourceElements = [], token, directive, firstRestricted;

        while (index < length) {
            token = lookahead;
            if (token.type !== Token.StringLiteral) {
                break;
            }

            sourceElement = parseSourceElement();
            sourceElements.push(sourceElement);
            if (sourceElement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        while (index < length) {
            sourceElement = parseSourceElement();
            /* istanbul ignore if */
            if (typeof sourceElement === 'undefined') {
                break;
            }
            sourceElements.push(sourceElement);
        }
        return sourceElements;
    }

    function parseProgram() {
        var body, startToken;

        skipComment();
        peek();
        startToken = lookahead;
        strict = false;

        body = parseSourceElements();
        return delegate.markEnd(delegate.createProgram(body), startToken);
    }

    function filterTokenLocation() {
        var i, entry, token, tokens = [];

        for (i = 0; i < extra.tokens.length; ++i) {
            entry = extra.tokens[i];
            token = {
                type: entry.type,
                value: entry.value
            };
            if (extra.range) {
                token.range = entry.range;
            }
            if (extra.loc) {
                token.loc = entry.loc;
            }
            tokens.push(token);
        }

        extra.tokens = tokens;
    }

    function tokenize(code, options) {
        var toString,
            token,
            tokens;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        delegate = SyntaxTreeDelegate;
        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1
        };

        extra = {};

        // Options matching.
        options = options || {};

        // Of course we collect tokens here.
        options.tokens = true;
        extra.tokens = [];
        extra.tokenize = true;
        // The following two fields are necessary to compute the Regex tokens.
        extra.openParenToken = -1;
        extra.openCurlyToken = -1;

        extra.range = (typeof options.range === 'boolean') && options.range;
        extra.loc = (typeof options.loc === 'boolean') && options.loc;

        if (typeof options.comment === 'boolean' && options.comment) {
            extra.comments = [];
        }
        if (typeof options.tolerant === 'boolean' && options.tolerant) {
            extra.errors = [];
        }

        try {
            peek();
            if (lookahead.type === Token.EOF) {
                return extra.tokens;
            }

            token = lex();
            while (lookahead.type !== Token.EOF) {
                try {
                    token = lex();
                } catch (lexError) {
                    token = lookahead;
                    if (extra.errors) {
                        extra.errors.push(lexError);
                        // We have to break on the first error
                        // to avoid infinite loops.
                        break;
                    } else {
                        throw lexError;
                    }
                }
            }

            filterTokenLocation();
            tokens = extra.tokens;
            if (typeof extra.comments !== 'undefined') {
                tokens.comments = extra.comments;
            }
            if (typeof extra.errors !== 'undefined') {
                tokens.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            extra = {};
        }
        return tokens;
    }

    function parse(code, options) {
        var program, toString;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        delegate = SyntaxTreeDelegate;
        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1
        };

        extra = {};
        if (typeof options !== 'undefined') {
            extra.range = (typeof options.range === 'boolean') && options.range;
            extra.loc = (typeof options.loc === 'boolean') && options.loc;
            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;

            if (extra.loc && options.source !== null && options.source !== undefined) {
                extra.source = toString(options.source);
            }

            if (typeof options.tokens === 'boolean' && options.tokens) {
                extra.tokens = [];
            }
            if (typeof options.comment === 'boolean' && options.comment) {
                extra.comments = [];
            }
            if (typeof options.tolerant === 'boolean' && options.tolerant) {
                extra.errors = [];
            }
            if (extra.attachComment) {
                extra.range = true;
                extra.comments = [];
                extra.bottomRightStack = [];
                extra.trailingComments = [];
                extra.leadingComments = [];
            }
        }

        try {
            program = parseProgram();
            if (typeof extra.comments !== 'undefined') {
                program.comments = extra.comments;
            }
            if (typeof extra.tokens !== 'undefined') {
                filterTokenLocation();
                program.tokens = extra.tokens;
            }
            if (typeof extra.errors !== 'undefined') {
                program.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            extra = {};
        }

        return program;
    }

    // Sync with *.json manifests.
    exports.version = '1.2.2';

    exports.tokenize = tokenize;

    exports.parse = parse;

    // Deep copy.
   /* istanbul ignore next */
    exports.Syntax = (function () {
        var name, types = {};

        if (typeof Object.create === 'function') {
            types = Object.create(null);
        }

        for (name in Syntax) {
            if (Syntax.hasOwnProperty(name)) {
                types[name] = Syntax[name];
            }
        }

        if (typeof Object.freeze === 'function') {
            Object.freeze(types);
        }

        return types;
    }());

}));
/* vim: set sw=4 ts=4 et tw=80 : */

!function(){var q=null;window.PR_SHOULD_USE_CONTINUATION=!0;
(function(){function S(a){function d(e){var b=e.charCodeAt(0);if(b!==92)return b;var a=e.charAt(1);return(b=r[a])?b:"0"<=a&&a<="7"?parseInt(e.substring(1),8):a==="u"||a==="x"?parseInt(e.substring(2),16):e.charCodeAt(1)}function g(e){if(e<32)return(e<16?"\\x0":"\\x")+e.toString(16);e=String.fromCharCode(e);return e==="\\"||e==="-"||e==="]"||e==="^"?"\\"+e:e}function b(e){var b=e.substring(1,e.length-1).match(/\\u[\dA-Fa-f]{4}|\\x[\dA-Fa-f]{2}|\\[0-3][0-7]{0,2}|\\[0-7]{1,2}|\\[\S\s]|[^\\]/g),e=[],a=
b[0]==="^",c=["["];a&&c.push("^");for(var a=a?1:0,f=b.length;a<f;++a){var h=b[a];if(/\\[bdsw]/i.test(h))c.push(h);else{var h=d(h),l;a+2<f&&"-"===b[a+1]?(l=d(b[a+2]),a+=2):l=h;e.push([h,l]);l<65||h>122||(l<65||h>90||e.push([Math.max(65,h)|32,Math.min(l,90)|32]),l<97||h>122||e.push([Math.max(97,h)&-33,Math.min(l,122)&-33]))}}e.sort(function(e,a){return e[0]-a[0]||a[1]-e[1]});b=[];f=[];for(a=0;a<e.length;++a)h=e[a],h[0]<=f[1]+1?f[1]=Math.max(f[1],h[1]):b.push(f=h);for(a=0;a<b.length;++a)h=b[a],c.push(g(h[0])),
h[1]>h[0]&&(h[1]+1>h[0]&&c.push("-"),c.push(g(h[1])));c.push("]");return c.join("")}function s(e){for(var a=e.source.match(/\[(?:[^\\\]]|\\[\S\s])*]|\\u[\dA-Fa-f]{4}|\\x[\dA-Fa-f]{2}|\\\d+|\\[^\dux]|\(\?[!:=]|[()^]|[^()[\\^]+/g),c=a.length,d=[],f=0,h=0;f<c;++f){var l=a[f];l==="("?++h:"\\"===l.charAt(0)&&(l=+l.substring(1))&&(l<=h?d[l]=-1:a[f]=g(l))}for(f=1;f<d.length;++f)-1===d[f]&&(d[f]=++x);for(h=f=0;f<c;++f)l=a[f],l==="("?(++h,d[h]||(a[f]="(?:")):"\\"===l.charAt(0)&&(l=+l.substring(1))&&l<=h&&
(a[f]="\\"+d[l]);for(f=0;f<c;++f)"^"===a[f]&&"^"!==a[f+1]&&(a[f]="");if(e.ignoreCase&&m)for(f=0;f<c;++f)l=a[f],e=l.charAt(0),l.length>=2&&e==="["?a[f]=b(l):e!=="\\"&&(a[f]=l.replace(/[A-Za-z]/g,function(a){a=a.charCodeAt(0);return"["+String.fromCharCode(a&-33,a|32)+"]"}));return a.join("")}for(var x=0,m=!1,j=!1,k=0,c=a.length;k<c;++k){var i=a[k];if(i.ignoreCase)j=!0;else if(/[a-z]/i.test(i.source.replace(/\\u[\da-f]{4}|\\x[\da-f]{2}|\\[^UXux]/gi,""))){m=!0;j=!1;break}}for(var r={b:8,t:9,n:10,v:11,
f:12,r:13},n=[],k=0,c=a.length;k<c;++k){i=a[k];if(i.global||i.multiline)throw Error(""+i);n.push("(?:"+s(i)+")")}return RegExp(n.join("|"),j?"gi":"g")}function T(a,d){function g(a){var c=a.nodeType;if(c==1){if(!b.test(a.className)){for(c=a.firstChild;c;c=c.nextSibling)g(c);c=a.nodeName.toLowerCase();if("br"===c||"li"===c)s[j]="\n",m[j<<1]=x++,m[j++<<1|1]=a}}else if(c==3||c==4)c=a.nodeValue,c.length&&(c=d?c.replace(/\r\n?/g,"\n"):c.replace(/[\t\n\r ]+/g," "),s[j]=c,m[j<<1]=x,x+=c.length,m[j++<<1|1]=
a)}var b=/(?:^|\s)nocode(?:\s|$)/,s=[],x=0,m=[],j=0;g(a);return{a:s.join("").replace(/\n$/,""),d:m}}function H(a,d,g,b){d&&(a={a:d,e:a},g(a),b.push.apply(b,a.g))}function U(a){for(var d=void 0,g=a.firstChild;g;g=g.nextSibling)var b=g.nodeType,d=b===1?d?a:g:b===3?V.test(g.nodeValue)?a:d:d;return d===a?void 0:d}function C(a,d){function g(a){for(var j=a.e,k=[j,"pln"],c=0,i=a.a.match(s)||[],r={},n=0,e=i.length;n<e;++n){var z=i[n],w=r[z],t=void 0,f;if(typeof w==="string")f=!1;else{var h=b[z.charAt(0)];
if(h)t=z.match(h[1]),w=h[0];else{for(f=0;f<x;++f)if(h=d[f],t=z.match(h[1])){w=h[0];break}t||(w="pln")}if((f=w.length>=5&&"lang-"===w.substring(0,5))&&!(t&&typeof t[1]==="string"))f=!1,w="src";f||(r[z]=w)}h=c;c+=z.length;if(f){f=t[1];var l=z.indexOf(f),B=l+f.length;t[2]&&(B=z.length-t[2].length,l=B-f.length);w=w.substring(5);H(j+h,z.substring(0,l),g,k);H(j+h+l,f,I(w,f),k);H(j+h+B,z.substring(B),g,k)}else k.push(j+h,w)}a.g=k}var b={},s;(function(){for(var g=a.concat(d),j=[],k={},c=0,i=g.length;c<i;++c){var r=
g[c],n=r[3];if(n)for(var e=n.length;--e>=0;)b[n.charAt(e)]=r;r=r[1];n=""+r;k.hasOwnProperty(n)||(j.push(r),k[n]=q)}j.push(/[\S\s]/);s=S(j)})();var x=d.length;return g}function v(a){var d=[],g=[];a.tripleQuotedStrings?d.push(["str",/^(?:'''(?:[^'\\]|\\[\S\s]|''?(?=[^']))*(?:'''|$)|"""(?:[^"\\]|\\[\S\s]|""?(?=[^"]))*(?:"""|$)|'(?:[^'\\]|\\[\S\s])*(?:'|$)|"(?:[^"\\]|\\[\S\s])*(?:"|$))/,q,"'\""]):a.multiLineStrings?d.push(["str",/^(?:'(?:[^'\\]|\\[\S\s])*(?:'|$)|"(?:[^"\\]|\\[\S\s])*(?:"|$)|`(?:[^\\`]|\\[\S\s])*(?:`|$))/,
q,"'\"`"]):d.push(["str",/^(?:'(?:[^\n\r'\\]|\\.)*(?:'|$)|"(?:[^\n\r"\\]|\\.)*(?:"|$))/,q,"\"'"]);a.verbatimStrings&&g.push(["str",/^@"(?:[^"]|"")*(?:"|$)/,q]);var b=a.hashComments;b&&(a.cStyleComments?(b>1?d.push(["com",/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,q,"#"]):d.push(["com",/^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\b|[^\n\r]*)/,q,"#"]),g.push(["str",/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h(?:h|pp|\+\+)?|[a-z]\w*)>/,q])):d.push(["com",
/^#[^\n\r]*/,q,"#"]));a.cStyleComments&&(g.push(["com",/^\/\/[^\n\r]*/,q]),g.push(["com",/^\/\*[\S\s]*?(?:\*\/|$)/,q]));if(b=a.regexLiterals){var s=(b=b>1?"":"\n\r")?".":"[\\S\\s]";g.push(["lang-regex",RegExp("^(?:^^\\.?|[+-]|[!=]=?=?|\\#|%=?|&&?=?|\\(|\\*=?|[+\\-]=|->|\\/=?|::?|<<?=?|>>?>?=?|,|;|\\?|@|\\[|~|{|\\^\\^?=?|\\|\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*("+("/(?=[^/*"+b+"])(?:[^/\\x5B\\x5C"+b+"]|\\x5C"+s+"|\\x5B(?:[^\\x5C\\x5D"+b+"]|\\x5C"+
s+")*(?:\\x5D|$))+/")+")")])}(b=a.types)&&g.push(["typ",b]);b=(""+a.keywords).replace(/^ | $/g,"");b.length&&g.push(["kwd",RegExp("^(?:"+b.replace(/[\s,]+/g,"|")+")\\b"),q]);d.push(["pln",/^\s+/,q," \r\n\t\u00a0"]);b="^.[^\\s\\w.$@'\"`/\\\\]*";a.regexLiterals&&(b+="(?!s*/)");g.push(["lit",/^@[$_a-z][\w$@]*/i,q],["typ",/^(?:[@_]?[A-Z]+[a-z][\w$@]*|\w+_t\b)/,q],["pln",/^[$_a-z][\w$@]*/i,q],["lit",/^(?:0x[\da-f]+|(?:\d(?:_\d+)*\d*(?:\.\d*)?|\.\d\+)(?:e[+-]?\d+)?)[a-z]*/i,q,"0123456789"],["pln",/^\\[\S\s]?/,
q],["pun",RegExp(b),q]);return C(d,g)}function J(a,d,g){function b(a){var c=a.nodeType;if(c==1&&!x.test(a.className))if("br"===a.nodeName)s(a),a.parentNode&&a.parentNode.removeChild(a);else for(a=a.firstChild;a;a=a.nextSibling)b(a);else if((c==3||c==4)&&g){var d=a.nodeValue,i=d.match(m);if(i)c=d.substring(0,i.index),a.nodeValue=c,(d=d.substring(i.index+i[0].length))&&a.parentNode.insertBefore(j.createTextNode(d),a.nextSibling),s(a),c||a.parentNode.removeChild(a)}}function s(a){function b(a,c){var d=
c?a.cloneNode(!1):a,e=a.parentNode;if(e){var e=b(e,1),g=a.nextSibling;e.appendChild(d);for(var i=g;i;i=g)g=i.nextSibling,e.appendChild(i)}return d}for(;!a.nextSibling;)if(a=a.parentNode,!a)return;for(var a=b(a.nextSibling,0),d;(d=a.parentNode)&&d.nodeType===1;)a=d;c.push(a)}for(var x=/(?:^|\s)nocode(?:\s|$)/,m=/\r\n?|\n/,j=a.ownerDocument,k=j.createElement("li");a.firstChild;)k.appendChild(a.firstChild);for(var c=[k],i=0;i<c.length;++i)b(c[i]);d===(d|0)&&c[0].setAttribute("value",d);var r=j.createElement("ol");
r.className="linenums";for(var d=Math.max(0,d-1|0)||0,i=0,n=c.length;i<n;++i)k=c[i],k.className="L"+(i+d)%10,k.firstChild||k.appendChild(j.createTextNode("\u00a0")),r.appendChild(k);a.appendChild(r)}function p(a,d){for(var g=d.length;--g>=0;){var b=d[g];F.hasOwnProperty(b)?D.console&&console.warn("cannot override language handler %s",b):F[b]=a}}function I(a,d){if(!a||!F.hasOwnProperty(a))a=/^\s*</.test(d)?"default-markup":"default-code";return F[a]}function K(a){var d=a.h;try{var g=T(a.c,a.i),b=g.a;
a.a=b;a.d=g.d;a.e=0;I(d,b)(a);var s=/\bMSIE\s(\d+)/.exec(navigator.userAgent),s=s&&+s[1]<=8,d=/\n/g,x=a.a,m=x.length,g=0,j=a.d,k=j.length,b=0,c=a.g,i=c.length,r=0;c[i]=m;var n,e;for(e=n=0;e<i;)c[e]!==c[e+2]?(c[n++]=c[e++],c[n++]=c[e++]):e+=2;i=n;for(e=n=0;e<i;){for(var p=c[e],w=c[e+1],t=e+2;t+2<=i&&c[t+1]===w;)t+=2;c[n++]=p;c[n++]=w;e=t}c.length=n;var f=a.c,h;if(f)h=f.style.display,f.style.display="none";try{for(;b<k;){var l=j[b+2]||m,B=c[r+2]||m,t=Math.min(l,B),A=j[b+1],G;if(A.nodeType!==1&&(G=x.substring(g,
t))){s&&(G=G.replace(d,"\r"));A.nodeValue=G;var L=A.ownerDocument,o=L.createElement("span");o.className=c[r+1];var v=A.parentNode;v.replaceChild(o,A);o.appendChild(A);g<l&&(j[b+1]=A=L.createTextNode(x.substring(t,l)),v.insertBefore(A,o.nextSibling))}g=t;g>=l&&(b+=2);g>=B&&(r+=2)}}finally{if(f)f.style.display=h}}catch(u){D.console&&console.log(u&&u.stack||u)}}var D=window,y=["break,continue,do,else,for,if,return,while"],E=[[y,"auto,case,char,const,default,double,enum,extern,float,goto,inline,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],
"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],M=[E,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,delegate,dynamic_cast,explicit,export,friend,generic,late_check,mutable,namespace,nullptr,property,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],N=[E,"abstract,assert,boolean,byte,extends,final,finally,implements,import,instanceof,interface,null,native,package,strictfp,super,synchronized,throws,transient"],
O=[N,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,internal,into,is,let,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var,virtual,where"],E=[E,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],P=[y,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],
Q=[y,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],W=[y,"as,assert,const,copy,drop,enum,extern,fail,false,fn,impl,let,log,loop,match,mod,move,mut,priv,pub,pure,ref,self,static,struct,true,trait,type,unsafe,use"],y=[y,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],R=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)\b/,
V=/\S/,X=v({keywords:[M,O,E,"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",P,Q,y],hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),F={};p(X,["default-code"]);p(C([],[["pln",/^[^<?]+/],["dec",/^<!\w[^>]*(?:>|$)/],["com",/^<\!--[\S\s]*?(?:--\>|$)/],["lang-",/^<\?([\S\s]+?)(?:\?>|$)/],["lang-",/^<%([\S\s]+?)(?:%>|$)/],["pun",/^(?:<[%?]|[%?]>)/],["lang-",
/^<xmp\b[^>]*>([\S\s]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\S\s]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\S\s]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]);p(C([["pln",/^\s+/,q," \t\r\n"],["atv",/^(?:"[^"]*"?|'[^']*'?)/,q,"\"'"]],[["tag",/^^<\/?[a-z](?:[\w-.:]*\w)?|\/?>$/i],["atn",/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^\s"'>]*(?:[^\s"'/>]|\/(?=\s)))/],["pun",/^[/<->]+/],
["lang-js",/^on\w+\s*=\s*"([^"]+)"/i],["lang-js",/^on\w+\s*=\s*'([^']+)'/i],["lang-js",/^on\w+\s*=\s*([^\s"'>]+)/i],["lang-css",/^style\s*=\s*"([^"]+)"/i],["lang-css",/^style\s*=\s*'([^']+)'/i],["lang-css",/^style\s*=\s*([^\s"'>]+)/i]]),["in.tag"]);p(C([],[["atv",/^[\S\s]+/]]),["uq.val"]);p(v({keywords:M,hashComments:!0,cStyleComments:!0,types:R}),["c","cc","cpp","cxx","cyc","m"]);p(v({keywords:"null,true,false"}),["json"]);p(v({keywords:O,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:R}),
["cs"]);p(v({keywords:N,cStyleComments:!0}),["java"]);p(v({keywords:y,hashComments:!0,multiLineStrings:!0}),["bash","bsh","csh","sh"]);p(v({keywords:P,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),["cv","py","python"]);p(v({keywords:"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",hashComments:!0,multiLineStrings:!0,regexLiterals:2}),["perl","pl","pm"]);p(v({keywords:Q,
hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb","ruby"]);p(v({keywords:E,cStyleComments:!0,regexLiterals:!0}),["javascript","js"]);p(v({keywords:"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,throw,true,try,unless,until,when,while,yes",hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]);p(v({keywords:W,cStyleComments:!0,multilineStrings:!0}),["rc","rs","rust"]);
p(C([],[["str",/^[\S\s]+/]]),["regex"]);var Y=D.PR={createSimpleLexer:C,registerLangHandler:p,sourceDecorator:v,PR_ATTRIB_NAME:"atn",PR_ATTRIB_VALUE:"atv",PR_COMMENT:"com",PR_DECLARATION:"dec",PR_KEYWORD:"kwd",PR_LITERAL:"lit",PR_NOCODE:"nocode",PR_PLAIN:"pln",PR_PUNCTUATION:"pun",PR_SOURCE:"src",PR_STRING:"str",PR_TAG:"tag",PR_TYPE:"typ",prettyPrintOne:D.prettyPrintOne=function(a,d,g){var b=document.createElement("div");b.innerHTML="<pre>"+a+"</pre>";b=b.firstChild;g&&J(b,g,!0);K({h:d,j:g,c:b,i:1});
return b.innerHTML},prettyPrint:D.prettyPrint=function(a,d){function g(){for(var b=D.PR_SHOULD_USE_CONTINUATION?c.now()+250:Infinity;i<p.length&&c.now()<b;i++){for(var d=p[i],j=h,k=d;k=k.previousSibling;){var m=k.nodeType,o=(m===7||m===8)&&k.nodeValue;if(o?!/^\??prettify\b/.test(o):m!==3||/\S/.test(k.nodeValue))break;if(o){j={};o.replace(/\b(\w+)=([\w%+\-.:]+)/g,function(a,b,c){j[b]=c});break}}k=d.className;if((j!==h||e.test(k))&&!v.test(k)){m=!1;for(o=d.parentNode;o;o=o.parentNode)if(f.test(o.tagName)&&
o.className&&e.test(o.className)){m=!0;break}if(!m){d.className+=" prettyprinted";m=j.lang;if(!m){var m=k.match(n),y;if(!m&&(y=U(d))&&t.test(y.tagName))m=y.className.match(n);m&&(m=m[1])}if(w.test(d.tagName))o=1;else var o=d.currentStyle,u=s.defaultView,o=(o=o?o.whiteSpace:u&&u.getComputedStyle?u.getComputedStyle(d,q).getPropertyValue("white-space"):0)&&"pre"===o.substring(0,3);u=j.linenums;if(!(u=u==="true"||+u))u=(u=k.match(/\blinenums\b(?::(\d+))?/))?u[1]&&u[1].length?+u[1]:!0:!1;u&&J(d,u,o);r=
{h:m,c:d,j:u,i:o};K(r)}}}i<p.length?setTimeout(g,250):"function"===typeof a&&a()}for(var b=d||document.body,s=b.ownerDocument||document,b=[b.getElementsByTagName("pre"),b.getElementsByTagName("code"),b.getElementsByTagName("xmp")],p=[],m=0;m<b.length;++m)for(var j=0,k=b[m].length;j<k;++j)p.push(b[m][j]);var b=q,c=Date;c.now||(c={now:function(){return+new Date}});var i=0,r,n=/\blang(?:uage)?-([\w.]+)(?!\S)/,e=/\bprettyprint\b/,v=/\bprettyprinted\b/,w=/pre|xmp/i,t=/^code$/i,f=/^(?:pre|code|xmp)$/i,
h={};g()}};typeof define==="function"&&define.amd&&define("google-code-prettify",[],function(){return Y})})();}()

jQuery(function() {

	// var t0 = new Date().getTime();
	var	rquery = /\?([^#]*&)?q=([^&#]*)(&|#|$)/,
		rquote = /[-.?*|(){}\[\]\\]/g,
		rtags = /object|embed|script|select|textarea/,
		m = rquery.exec(document.URL) || rquery.exec(document.referrer),
		qterms = m && decodeURIComponent(m[2].replace(/\+/g, " ")).split(/\s+/g),
		styles,i,t;

	if ( qterms ) {
		// create a styles map and regexp from the non-empty query terms
		styles = {};
		for (i = 0; i < qterms.length; ) {
			t = qterms[i].toLowerCase();
			if ( t && !styles.hasOwnProperty(t) ) { // avoid duplicates 
				styles[t] = 'queryterm' + (1 + i % 3);
				qterms[i] = t.replace(rquote, "\\$&"); // quote special regex chars;
				i++;
			} else {
				// remove empty search terms
				qterms.splice(i, 1);
			}
		}
		
		// and highlight all occurrences in the body
		if ( qterms.length > 0 ) {
			markText(document.body, new RegExp(qterms.join("|"), 'gi'), function(match) {
				this.className = styles[match.toLowerCase()];
			});
		}
		
		//var t1 = new Date().getTime();
		//jQuery("body").append("<span style='display:none;'>query terms marked in " + (t1-t0) + " ms</span>");

	}

	function markText(node, expr, callback) {

		function replace(node) {
			var text = node.nodeValue,
				p = node.parentNode,
				start = 0,
				match,span;

			while ( (match = expr.exec(text)) != null ) {

				// add a text node with the string before the match
				if ( start < match.index ) {
					p.insertBefore(document.createTextNode(text.slice(start, match.index)), node);
				}

				// add a span for the match
				span = document.createElement("span");
				span.appendChild(document.createTextNode(match[0]));
				span = callback.call(span, match[0]) || span;
				p.insertBefore(span, node);

				// robustness: should a non-empty search term result in an empty match, then exit the loop
				if ( start <= expr.lastindex ) {
					break;
				}
				
				// continue search after current match
				start = expr.lastIndex;
			}

			// reduce text of node to substring after match (might be empty)
			if ( start > 0 ) {
				node.nodeValue = text.slice(start);
			}
		}

		function visit(node) {
			if (node.nodeType == 3) { // Node.TEXT_NODE
				replace(node);
			} else if ( !rtags.test(node.nodeName) ) { // exclude 'critical' nodes
				for (node = node.firstChild; node; node = node.nextSibling) {
					visit(node);
				}
			}
		}

		visit(node);
	}

});

PR.registerLangHandler(PR.createSimpleLexer([["pln",/^[\t\n\f\r ]+/,null," \t\r\n\u000c"]],[["str",/^"(?:[^\n\f\r"\\]|\\(?:\r\n?|\n|\f)|\\[\S\s])*"/,null],["str",/^'(?:[^\n\f\r'\\]|\\(?:\r\n?|\n|\f)|\\[\S\s])*'/,null],["lang-css-str",/^url\(([^"')]+)\)/i],["kwd",/^(?:url|rgb|!important|@import|@page|@media|@charset|inherit)(?=[^\w-]|$)/i,null],["lang-css-kw",/^(-?(?:[_a-z]|\\[\da-f]+ ?)(?:[\w-]|\\\\[\da-f]+ ?)*)\s*:/i],["com",/^\/\*[^*]*\*+(?:[^*/][^*]*\*+)*\//],
["com",/^(?:<\!--|--\>)/],["lit",/^(?:\d+|\d*\.\d+)(?:%|[a-z]+)?/i],["lit",/^#[\da-f]{3,6}\b/i],["pln",/^-?(?:[_a-z]|\\[\da-f]+ ?)(?:[\w-]|\\\\[\da-f]+ ?)*/i],["pun",/^[^\s\w"']+/]]),["css"]);PR.registerLangHandler(PR.createSimpleLexer([],[["kwd",/^-?(?:[_a-z]|\\[\da-f]+ ?)(?:[\w-]|\\\\[\da-f]+ ?)*/i]]),["css-kw"]);PR.registerLangHandler(PR.createSimpleLexer([],[["str",/^[^"')]+/]]),["css-str"]);

jQuery.sap.declare('sap.ui.demokit.library-all');
jQuery.sap.declare('sap.ui.demokit.explored.view.app.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.demokit.explored.view.app.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.demokit.explored.view.code.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.demokit.explored.view.notFound.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.demokit.explored.view.sample.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.demokit.js.esprima'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.demokit.js.google-code-prettify.prettify'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.demokit.js.highlight-query-terms'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.demokit.js.google-code-prettify.lang-css'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.ui.demokit.CodeSampleContainerRenderer') ) {
/*!
 * @copyright@
 */

// Provides default renderer for control sap.ui.demokit.CodeSampleContainer
jQuery.sap.declare('sap.ui.demokit.CodeSampleContainerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/CodeSampleContainerRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class CodeSampleContainer renderer. 
	 * @static
	 */
	var CodeSampleContainerRenderer = function() {
	};
	
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	CodeSampleContainerRenderer.render = function(oRenderManager, oControl){
		// convenience variable
		var rm = oRenderManager;
		
		rm.write("<div");
		rm.writeControlData(oControl);
		rm.write(" class='sapUiDKitCSample sapUiShd'");
		var sWidth = oControl.getWidth();
		if (sWidth) {
			rm.addStyle("width", sWidth);
		}
		rm.writeStyles();
		rm.write(">");
	
		rm.write("<div id='", jQuery.sap.escapeHTML(oControl.getUiAreaId()), "'");
		rm.write(" class='sapUiBody'");
		rm.write(">");
		var aContent = oControl._oUIArea.getContent();
		for (var i = 0; i < aContent.length; i++) {
			rm.renderControl(aContent[i]);
		}
		rm.write("</div>");
		
		rm.write("<div class='sapUiDKitCSampleBorder'>");
		rm.renderControl(oControl._oShowCodeLink);
		rm.write(" ");
		rm.renderControl(oControl._oApplyCodeLink);
		rm.write(" ");
		rm.renderControl(oControl._oCodeViewer);
		rm.write("</div>");
		
		rm.write("</div>");
		
	};
	

	return CodeSampleContainerRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/CodeSampleContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.CodeViewerRenderer') ) {
/*!
 * @copyright@
 */

// Provides default renderer for control sap.ui.demokit.CodeViewer
jQuery.sap.declare('sap.ui.demokit.CodeViewerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/CodeViewerRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class CodeViewer renderer. 
	 * @static
	 */
	var CodeViewerRenderer = function() {
	};
	
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	CodeViewerRenderer.render = function(oRM, oControl){
		
		if ( !oControl.getVisible() ) {
			return;
		}
		
		// write the HTML into the render manager  
		oRM.write("<pre");
		oRM.writeControlData(oControl);
		if ( oControl.getEditable() ) {
			oRM.addClass("sapUiCodeViewer");
			oRM.addClass("editable");
			oRM.writeAttribute("contentEditable", "true");
		} else {
			oRM.addClass("prettyprint"); // this class acts as a 'TODO' for the pretty printer!
		}
			
		var sHeight = oControl.getHeight();
		if (sHeight) {
			oRM.addStyle("height", sHeight);
		}
		var sWidth = oControl.getWidth();
		if (sWidth) {
			oRM.addStyle("width", sWidth);
		}
		oRM.writeClasses();
		oRM.writeStyles();
		oRM.write(">");
		if ( oControl.getSource() ) {
			oRM.write(oControl.getSource().replace(/</g,'&lt;')); // this is fake escaping?
		}
		oRM.write("</pre>");
	};
	

	return CodeViewerRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/CodeViewerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.FileUploadIntrospectorRenderer') ) {
/*!
 * @copyright@
 */

// Provides default renderer for control sap.ui.demokit.FileUploadIntrospector
jQuery.sap.declare('sap.ui.demokit.FileUploadIntrospectorRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/FileUploadIntrospectorRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class FileUploadIntrospector renderer. 
	 * @static
	 */
	var FileUploadIntrospectorRenderer = function() {
	};
	
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	FileUploadIntrospectorRenderer.render = function(oRenderManager, oControl) {
	
		// convenience variable
		var rm = oRenderManager;
	
		function format(iDate) {
		  var oDate = new Date(iDate),
			sMonth = (oDate.getMonth() + 1) < 10 ? "0" + (oDate.getMonth() + 1) : "" + (oDate.getMonth() + 1),
			sYear = oDate.getFullYear() < 10 ? "0" + oDate.getFullYear() : "" + oDate.getFullYear(),
			sDate = oDate.getDate() < 10 ? "0" + oDate.getDate() : "" + oDate.getDate(),
			sHours = oDate.getHours() < 10 ? "0" + oDate.getHours() : "" + oDate.getHours(),
			sMinutes = oDate.getMinutes() < 10 ? "0" + oDate.getMinutes() : "" + oDate.getMinutes(),
			sSeconds = oDate.getSeconds() < 10 ? "0" + oDate.getSeconds() : "" + oDate.getSeconds();
			return sYear + "-" + sMonth + "-" + sDate + " " + sHours + ":" + sMinutes + ":" + sSeconds;
		}
	
		// write the HTML into the render manager  
		rm.write("<div");
		rm.writeControlData(oControl);
		rm.write(" class='sapUiDkitFileList'");
		if ( oControl.getWidth() ) {
			rm.addStyle("width", oControl.getWidth());
		}
		rm.writeStyles();
		rm.write(">");
		var aFiles = oControl._aFiles || [];
		rm.write("<div");
		if ( oControl.getHeight() ) {
			rm.addStyle("height", oControl.getHeight());
			rm.addStyle("overflow-y", "auto");
		}
		rm.writeStyles();
		rm.write(">");
		rm.write("<table border='0'>");
		rm.write("<tr class='sapUiDkitFileItem'>");
		rm.write("<th>Filename</th>");
		rm.write("<th>Date</th>");
		rm.write("<th>Size</th>");
		rm.write("</tr>");
		for (var i = 0; i < aFiles.length; i++) {
			rm.write("<tr class='sapUiDkitFileItem'>");
			rm.write("<td style='padding:1px 3px;'><span style='white-space:nowrap'>" + aFiles[i].name + "</span></td>");
			rm.write("<td style='border-left:1px solid #ccc;padding:1px 3px;width:12ex'><span style='white-space:nowrap'>" + format(aFiles[i].time) + "</span></td>");
			rm.write("<td style='border-left:1px solid #ccc;padding:1px 3px;width:8ex;text-align:right'><span style='white-space:nowrap'>" + aFiles[i].size + "</span></td>");
			rm.write("</tr>");
		}
		rm.write("</table>");
		rm.write("</div>");
		rm.write("<div class='sapUiDkitBottomLine'>");
		rm.write("Last Refresh: " + (format(new Date().getTime())));
		rm.write("</div>");
		
		rm.write("</div>");
	
	};
	

	return FileUploadIntrospectorRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/FileUploadIntrospectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.HexagonButtonGroupRenderer') ) {
/*!
 * @copyright@
 */

// Provides default renderer for control sap.ui.demokit.HexagonButtonGroup
jQuery.sap.declare('sap.ui.demokit.HexagonButtonGroupRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/HexagonButtonGroupRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class HexagonButtonGroup renderer. 
	 * @static
	 */
	var HexagonButtonGroupRenderer = function() {
	};
	
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	HexagonButtonGroupRenderer.render = function(oRenderManager, oControl){
		// convenience variable
		var rm = oRenderManager;
		
		// write the HTML into the render manager  
		rm.write("<div");
		rm.writeControlData(oControl);
		rm.writeAttribute("class","sapUiHexGroup");
		rm.write(">");
		var iColspan = oControl.getColspan();
		var aButtons = oControl.getButtons();
		for (var i = 0; i < aButtons.length; i++) {
			// TODO fix layouting, needs relative positioning
			var ix = i % iColspan;
			var iy = Math.floor(i / iColspan);
			if ( ix < Math.floor(iColspan / 2) ) {
				ix = 1 + 2 * ix;
			} else {
				ix = 2 * (ix - Math.floor(iColspan / 2));
			}
			var x = 100 +  90 * ix;
			var y = 100 + 100 * iy + 100 - 50 * (ix % 2);
			var oButton = aButtons[i];
			oButton.setPosition("position:absolute;left:" + x + "px;top:" + y + "px;");
			oRenderManager.renderControl(oButton);
		}
		rm.write("</div>");
	};
	

	return HexagonButtonGroupRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/HexagonButtonGroupRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.HexagonButtonRenderer') ) {
/*!
 * @copyright@
 */

// Provides default renderer for control sap.ui.demokit.HexagonButton
jQuery.sap.declare('sap.ui.demokit.HexagonButtonRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/HexagonButtonRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class HexagonButton renderer. 
	 * @static
	 */
	var HexagonButtonRenderer = function() {
	};
	
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	HexagonButtonRenderer.render = function(oRenderManager, oControl){
		// convenience variable
		var rm = oRenderManager;
		
		// write the HTML into the render manager  
		rm.write("<div ");
		rm.writeControlData(oControl);
		rm.addClass("sapUiHexBtn");
		rm.addClass("sapUiHexBtn" + jQuery.sap.escapeHTML(oControl.getEnabled() ? oControl.getColor() : "Gray"));
		if ( oControl.getEnabled() && oControl.hasListeners('press') ) {
			rm.addClass("sapUiHexBtnActive");
		}
		rm.writeClasses();
		rm.write(" style='" + jQuery.sap.escapeHTML(oControl.getPosition()) + "'");
		if (oControl.getTooltip_AsString()) {
			rm.writeAttributeEscaped("title", oControl.getTooltip_AsString());
		}
		rm.write(">");
		if ( oControl.getIcon() ) {
			rm.write("<IMG ");
			rm.writeAttributeEscaped("src", oControl.getIcon());
			var sImagePosition = oControl.getImagePosition();
			if (sImagePosition) {
				rm.write(" style='" + jQuery.sap.escapeHTML(sImagePosition) + "'");
			} else {
				rm.write(" style='position:relative;left:40px;top:45px;'");
			}
			rm.write(" border='0'");
			rm.write("/>");
		}
		rm.write("</div>");
	};
	

	return HexagonButtonRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/HexagonButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.IndexLayoutRenderer') ) {
/*!
 * @copyright@
 */

// Provides default renderer for control sap.ui.demokit.IndexLayout
jQuery.sap.declare('sap.ui.demokit.IndexLayoutRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/IndexLayoutRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class IndexLayout renderer.
	 * @static
	 */
	var IndexLayoutRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oLyt an object representation of the control that should be rendered
	 */
	IndexLayoutRenderer.render = function(rm, oLyt){
		var id = oLyt.getId();
	
		rm.write("<div");
		rm.writeControlData(oLyt);
		rm.addClass("sapDkIdxLayout");
		rm.addClass("sapDkIdxLayoutHidden");
		if (oLyt.getEnableScaling()) {
			rm.addClass("sapDkIdxLayoutScale");
		}
		rm.writeClasses();
		rm.write("><div id=\"", id, "-cntnt\">");
		
		var aContent = oLyt.getContent();
		for (var i = 0; i < aContent.length; i++) {
			rm.write("<div class=\"sapDkIdxLayoutItem\" style=\"width:", oLyt._scale(oLyt._itemWidth), "px;height:", oLyt._scale(oLyt._itemHeight), "px;\"><div>");
			rm.renderControl(aContent[i]);
			rm.write("</div></div>");
		}
		
		rm.write("</div></div>");
	};

	return IndexLayoutRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/IndexLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.TagCloudRenderer') ) {
/*!
 * @copyright@
 */

// Provides default renderer for control sap.ui.demokit.TagCloud
jQuery.sap.declare('sap.ui.demokit.TagCloudRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/TagCloudRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class TagCloud renderer.
	 * @static
	 */
	var TagCloudRenderer = function() {
	};
	
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	TagCloudRenderer.render = function(oRenderManager, oControl){
		var rm = oRenderManager;
		rm.write("<div");
		rm.writeControlData(oControl);
		rm.addClass("sapUiTagCloud");
		rm.writeClasses();
		rm.write(">"); // div element
		
		var tags = oControl.getTags();
		if ( !tags || !tags.length ) {
			return;
		}
		
		//Compute min / max weight
		var fsMin = oControl.getMinFontSize(),
			fsScale = oControl.getMaxFontSize() - fsMin,
			wMinMax = this.computeWeightRange(tags),
			wMin = wMinMax.min,
			wScale = wMinMax.max - wMin;
	
		var fontsize = wScale === 0 ? function(w) { return fsMin; } : function(w) {
			return fsMin + (w - wMin) / wScale * fsScale;
		};
		
		// render each tag.
		for (var i = 0;i < tags.length;i++) {
		  var tag = tags[i];
		  rm.write("<span");
		  rm.writeElementData(tag);
		  rm.writeAttribute("class","sapUiTagCloudTextNormal");
		  if (tag.getTooltip_AsString()) {
			  rm.writeAttributeEscaped("title",tag.getTooltip_AsString());
		  }
		  //Compute font size relative to weight
		  rm.writeAttribute("style","font-size:" + fontsize(tag.getWeight()) + "px;");
		  rm.write(">"); // span element
		  rm.writeEscaped(tag.getText());
		  rm.write("</span>"); // span element
		}
		
		rm.write("</div>"); // div element
	};
	
	TagCloudRenderer.computeWeightRange = function(tags){
		var min = tags[0].getWeight(), max = min;
		for (var i = 1; i < tags.length; i++) {
			var w = tags[i].getWeight();
			if (w > max) {max = w;}
			if (w < min) {min = w;}
		}
		return {min:min, max:max};
	};
	
	

	return TagCloudRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/TagCloudRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.UI5EntityCueCardRenderer') ) {
/*!
 * @copyright@
 */

// Provides default renderer for control sap.ui.demokit.UI5EntityCueCard
jQuery.sap.declare('sap.ui.demokit.UI5EntityCueCardRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/UI5EntityCueCardRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class UI5EntityCueCard renderer. 
	 * @static
	 */
	var UI5EntityCueCardRenderer = {
	};
	
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	UI5EntityCueCardRenderer.render = function(rm, oControl){
	
		var bNavigable = oControl.getNavigable();
		var bDemokit = oControl.getStyle() == sap.ui.demokit.UI5EntityCueCardStyle.Demokit;
	
		function isPrimitive(sType) {
			while ( sType.slice(-2) == "[]" ) {
				sType = sType.slice(0, -2);
			}
			if ( sType.indexOf("sap.ui.core.") == 0 ) {
				sType = sType.slice("sap.ui.core.".length);
			}
			return /^(any|boolean|float|int|object|string|void)$/.test(sType);
		}
		
		rm.write("<div");
		rm.writeControlData(oControl);
		rm.writeAttribute("class","sapDkCueCd");
		rm.write(">");
	
		var child = 0;
		
		function names(o) {
			var r = [];
			for (var s in o) {
				r.push(s);
			}
			r.sort(function(a,b) {
				var a_depr = o[a].deprecation ? 1 : 0;
				var b_depr = o[b].deprecation ? 1 : 0;
				var c = a_depr - b_depr;
				if ( c === 0 && a !== b ) {
					c = a < b ? -1 : 1;
				} // if c === 0 && a === b, c remains 0
				return c;
			});
			return r;
		}
		
		function alternate(i) {
			return " class='" + ((i % 2) ? "sapDkCueCdOdd" : "sapDkCueCdEven") + "'";
		}
		
		function kind(k) {
			if ( k === 0 ) {
				return "Property of type ";
			} else if ( k === 1 || k === 2 ) {
				return "Aggregation of type ";
			} else if ( k === 3 || k === 4 ) {
				return "Association of type ";
			} else if ( k === 6 ) {
				return "Event parameter of type ";
			} else if ( k === 7 ) {
				return "Return value of type ";
			} else if ( k === 6 ) {
				return "Method parameter of type ";
			} else {
				return "";
			}
		}
		
		function crossref(p, t, card) {
			if ( t ) {
				if ( card === "0..n" ) {
					return crossref(p, t) + "[]";
				}
				var bPrimitive = isPrimitive(t);
				var sShort = jQuery.sap.encodeHTML(t.split(".").slice(-1)[0]);
				var tfull = jQuery.sap.encodeHTML(kind(p.kind) + t);
				if ( bNavigable && (!bDemokit || !bPrimitive ) ) {
					return "<a class='sapDkLnk' id='" + oControl.getId() + "-l-" + (child++) + "' data-sap-ui-entity='" + t + "' title='" + tfull + "'>" + sShort + "</a>";
				} else {
					return "<span title='" + t + "'>" + sShort + "</span>";
				}
			}
			return '';
		}

		function deprClass(o) {
			return o.deprecation ? " sapDkCueCdDeprct" : "";
		}
		
		function deprDoc(o) {
			return o.deprecation ? "<br><i><b>Deprecated</b>: " + o.deprecation + "</i>" : "";
		}
		
		function defaultAggrClass(bIsDefault) {
			return bIsDefault ? " sapDkCueCdDfltAggr" : "";
		}
		
		function defaultAggrDoc(bIsDefault) {
			return bIsDefault ? "<br><b>Note</b>: This is the default aggregation." : "";
		}
		
		if ( !oControl.getCollapsible() || oControl.getExpanded() ) {
			
			var oDoc = oControl._getDoc();
			
			if ( oDoc ) {
				rm.write("<table>");
				if ( !bDemokit ) {
					rm.write("<tr><td colspan='3' class='sapDkCueCdHd0", deprClass(oDoc), "'>", oControl.getEntityName(), "</td></tr>");
					rm.write("<tr><td colspan='3' class='sapDkCueCdDoc'>", oDoc.doc || '', deprDoc(oDoc), "</td></tr>");
				}
				if ( oDoc.metatype === ".control" ) {
	
					var settings = jQuery.extend({}, oDoc.properties, oDoc.aggregations, oDoc.associations);
					var n = names(settings);
					if ( n.length > 0 ) {
						rm.write("<tr><td colspan='3' class='sapDkCueCdHd'>", "Properties, Aggregations, Associations", "</td></tr>");
						for (var i = 0; i < n.length; i++) {
							var oProp = settings[n[i]];
							rm.write("<tr", alternate(i), "><td class='sapDkCueCdName", deprClass(oProp), defaultAggrClass(n[i] === oDoc.defaultAggregation), "'>", n[i], "</td>", "<td class='sapDkCueCdType'>", crossref(oProp, oProp.type, oProp.cardinality), "</td>", "<td class='sapDkCueCdDoc'>", oProp.doc, deprDoc(oProp), defaultAggrDoc(n[i] === oDoc.defaultAggregation), "</td></tr>");
						}
					}
					
					var n = names(oDoc.events);
					if ( n.length > 0 ) {
						rm.write("<tr><td colspan='3' class='sapDkCueCdHd'>", "Events", "</td></tr>");
						for (var i = 0; i < n.length; i++) {
							var oEvent = oDoc.events[n[i]];
							rm.write("<tr", alternate(i), "><td class='sapDkCueCdName", deprClass(oEvent), "'>", n[i], "</td>", "<td class='sapDkCueCdType'>", "&nbsp", "</td>", "<td class='sapDkCueCdDoc'>", oEvent.doc, deprDoc(oEvent), "</td></tr>");
							var pnames = names(oEvent.parameters);
							for (var j = 0; j < pnames.length; j++) {
								var pn = pnames[j];
								var oParam = oEvent.parameters[pn];
								rm.write("<tr", alternate(i), "><td class='sapDkCueCdSubName", deprClass(oParam), "'>", pn, "</td>", "<td class='sapDkCueCdType'>", crossref(oParam, oParam.type), "</td>", "<td class='sapDkCueCdDoc'>", oParam.doc, deprDoc(oParam), "</td></tr>");
							}
						}
					}
					
					var n = names(oDoc.methods);
					if ( n.length > 0 ) {
						rm.write("<tr><td colspan='3' class='sapDkCueCdHd'>", "Methods", "</td></tr>");
						for (var i = 0; i < n.length; i++) {
							var oMethod = oDoc.methods[n[i]];
							var signature = n[i] + "(";
							for (var j = 0; j < oMethod.parameters.length; j++) {
								if ( j > 0 ) {
									signature += ",";
								}
								signature += oMethod.parameters[j].name;
							}
							signature += ")";
							rm.write("<tr", alternate(i), "><td class='sapDkCueCdName", deprClass(oMethod), "' colspan='2'>", signature, "</td>", "<td class='sapDkCueCdDoc'>", oMethod.doc, deprDoc(oMethod), "</td></tr>");
							for (var j = 0; j < oMethod.parameters.length; j++) {
								var oParam = oMethod.parameters[j];
								rm.write("<tr", alternate(i), "><td class='sapDkCueCdSubName", deprClass(oParam), "'>", oParam.name, "</td>", "<td class='sapDkCueCdType'>", crossref(oParam, oParam.type), "</td>", "<td class='sapDkCueCdDoc'>", oParam.doc, deprDoc(oParam), "</td></tr>");
							}
							if ( oMethod.type !== "sap.ui.core/void" ) {
								rm.write("<tr", alternate(i), "><td class='sapDkCueCdSubName'>", "<i>returns</i>", "</td>", "<td class='sapDkCueCdType'>", crossref(oMethod, oMethod.type), "</td>", "<td class='sapDkCueCdDoc'>", "&nbsp;", "</td></tr>");
							}
						}
					}
				}
				if ( oDoc.metatype === ".type" ) {
					var n = names(oDoc.values);
					if ( n.length > 0 ) {
						rm.write("<tr><td colspan='3' class='sapDkCueCdHd", deprClass(oDoc), "'>", "Values", "</td></tr>");
						for (var i = 0; i < n.length; i++) {
							var oValue = oDoc.values[n[i]];
							rm.write("<tr", alternate(i), "><td class='sapDkCueCdName", deprClass(oValue), "'>", n[i], "</td>", "<td class='sapDkCueCdType'>", "&nbsp;", "</td>", "<td class='sapDkCueCdDoc'>", oValue.doc, deprDoc(oValue), "</td></tr>");
						}
					}
					if ( oDoc.pattern ) {
						rm.write("<tr><td colspan='3' class='sapDkCueCdHd'>", "Constraints", "</td></tr>");
						rm.write("<tr", alternate(i), "><td class='sapDkCueCdName'>", "pattern", "</td>", "<td>", "&nbsp;", "</td>", "<td class='sapDkCueCdDoc'>", oDoc.pattern, "</td></tr>");
					}
				}
				rm.write("</table>");
			}

		}
		if ( oControl.getCollapsible() ) {
			rm.renderControl(oControl._oShowCueCardLink);
		}
		rm.write("</div>");
	};
	
	

	return UI5EntityCueCardRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/UI5EntityCueCardRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.explored.Bootstrap') ) {
/*!
 * @copyright@
 */

// Bootstrap for the 'explored' app.
jQuery.sap.declare('sap.ui.demokit.explored.Bootstrap'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/explored/Bootstrap",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	var Bootstrap = {
	
		run : function () {
			sap.ui.demokit._loadAllLibInfo(
				"", "_getDocuIndex",
				function (aLibs, oDocIndicies) {
					Bootstrap._processAndStoreIndices(oDocIndicies);
					Bootstrap._loadUi();
				});
		},
	
		_processAndStoreIndices : function (oDocIndicies) {
	
			var aCategoryWhiteList = [ "Action", "Container", "Display", "Chart", "Mini Chart", "Layout", "List", "Popup", "Tile", "User Input", "Testing" ,"Theming"];
			var afilterProps = [ "namespace", "since", "category", "appComponent"]; // form factors are set manually
			var oFilterSets = {
				namespace : {},
				since : {},
				category : {},
				appComponent : {},
				formFactors : { // form factors are set manually
					"Independent" : true,
					"Condensed" : true,
					"Compact" : true,
					"Cozy" : true
				}
			};
			var mFormFactorsMap = {
				"-" : "Independent",
				"S" : "Condensed",
				"SM" : "Condensed, Compact",
				"SL" : "Condensed, Cozy",
				"SML" : "Condensed, Compact, Cozy",
				"M" : "Compact",
				"ML" : "Compact, Cozy",
				"L" : "Cozy"
			};
	
			// init data structures
			sap.ui.demokit.explored.data = {};
			sap.ui.demokit.explored.data.entityCount = 0;
			sap.ui.demokit.explored.data.entities = [];
			sap.ui.demokit.explored.data.filter = {};
			sap.ui.demokit.explored.data.samples = {};
	
			// iterate docu indices
			jQuery.each(oDocIndicies, function (i, oDoc) {
	
				// check data
				if (!oDoc.explored) {
					return;
				} else if (!oDoc.explored.samplesRef) {
					jQuery.sap.log.error("explored: cannot register lib '" + oDoc.library + "'. missing 'explored.samplesRef'");
					return;
				} else if (!oDoc.explored.samplesRef.namespace) {
					jQuery.sap.log.error("explored: cannot register lib '" + oDoc.library + "'. missing 'explored.samplesRef.namespace'");
					return;
				} else if (!oDoc.explored.samplesRef.ref) {
					jQuery.sap.log.error("explored: cannot register lib '" + oDoc.library + "'. missing 'explored.samplesRef.ref'");
					return;
				} else if (!oDoc.explored.entities) {
					jQuery.sap.log.error("explored: cannot register lib '" + oDoc.library + "'. missing 'explored.entities'");
					return;
				} else {
					jQuery.sap.log.info("explored: now reading lib '" + oDoc.library + "'");
				}
	
				// _register sample resources
				var sResourceRoot = "";
				var sPath = sResourceRoot + oDoc.explored.samplesRef.ref;
				jQuery.sap.registerModulePath(oDoc.explored.samplesRef.namespace, sPath);
	
				// build sample map
				jQuery.each(oDoc.explored.samples, function (i, oSample) {
					if (!oSample.id)  {
						jQuery.sap.log.error("explored: cannot register sample '?'. missing 'id'");
					} else if (!oSample.name)  {
						jQuery.sap.log.error("explored: cannot register sample '" + oSample.id + "'. missing 'name'");
					} else {
						sap.ui.demokit.explored.data.samples[oSample.id] = oSample;
					}
				});
	
				// iterate entities
				jQuery.each(oDoc.explored.entities, function (j, oEnt) {
	
					// check id property
					if (!oEnt.id)  {
						jQuery.sap.log.error("explored: cannot register entity '?'. missing 'id'");
						return;
					}
	
					// apply default properties
					if (oDoc.explored.entitiesDefaults) {
						jQuery.each(oDoc.explored.entitiesDefaults, function (key, value) {
							if (!oEnt.hasOwnProperty(key)) {
								oEnt[key] = value;
							}
						});
					}
	
					// apply namespace property
					var iIndex = oEnt.id.lastIndexOf(".");
					var sNamespace = (iIndex !== -1) ? oEnt.id.substring(0, iIndex) : oEnt.id;
					oEnt.namespace = sNamespace;
	
					// check name property
					if (!oEnt.name)  {
						jQuery.sap.log.error("explored: cannot register entity '" + oEnt.id + "'. missing 'name'");
						return;
					}
	
					// check category white list
					if (aCategoryWhiteList.indexOf(oEnt.category) === -1)  {
						jQuery.sap.log.error("explored: cannot register entity '" + oEnt.id + "'. category '" + oEnt.category + "' is not allowed");
						return;
					}
	
					// convert form factors
					if (!oEnt.formFactors)  {
						jQuery.sap.log.error("explored: cannot register entity '" + oEnt.id + "'. missing 'formFactors'");
						return;
					}
					if (!mFormFactorsMap[oEnt.formFactors]) {
						jQuery.sap.log.error("explored: cannot register entity '" + oEnt.id + "'. formFactors '" + oEnt.formFactors + "' is not allowed");
						return;
					}
					oEnt.formFactors = mFormFactorsMap[oEnt.formFactors];
					
					// check filter properties
					var bAbortEntity = false;
					jQuery.each(afilterProps, function (i, sProp) {
						if (!oEnt[sProp])  {
							jQuery.sap.log.error("explored: cannot register entity '" + oEnt.id + "'. missing '" + sProp + "'");
							bAbortEntity = true;
							return false;
						}
					});
					if (bAbortEntity) {
						return;
					}
	
					// add filter properties to sets
					jQuery.each(afilterProps, function (i, sProp) {
						oFilterSets[sProp][oEnt[sProp]] = true;
					});
	
					// add entity
					sap.ui.demokit.explored.data.entities.push(oEnt);
				});
			});
	
			// iterate entities one more time and add the sample data
			// (this must be done in a separate loop in order to map samples across libraries/docIndizes)
			jQuery.each(sap.ui.demokit.explored.data.entities, function (i, oEnt) {
	
				// check samples property
				if (oEnt.samples && !(oEnt.samples instanceof Array)) {
					oEnt.samples = [];
					jQuery.sap.log.error("explored: cannot register samples for entity '" + oEnt.id + "'. 'samples' is not an array");
				}
				if (!oEnt.samples) {
					oEnt.samples = [];
				}
	
				// lookup samples and build search tags
				var aSamples = [];
				oEnt.searchTags = oEnt.name + " " + oEnt.name.replace(" ", "") + " " + oEnt.category;
				jQuery.each(oEnt.samples, function (j, sId) {
					var oSample = sap.ui.demokit.explored.data.samples[sId];
					if (!oSample) {
						jQuery.sap.log.error("explored: cannot register sample '" + sId + "' for '" + oEnt.id + "'. not found in the available docu indizes");
					} else {
						aSamples.push(oSample);
						oEnt.searchTags += " " + oSample.name;
					}
				});
				oEnt.samples = aSamples;
	
				// set count
				oEnt.sampleCount = oEnt.samples.length;
			});
	
			// set count
			sap.ui.demokit.explored.data.entityCount = sap.ui.demokit.explored.data.entities.length;
	
			// convert filter sets to arrays
			jQuery.each(oFilterSets, function (setKey, setValue) {
				sap.ui.demokit.explored.data.filter[setKey] = [];
				jQuery.each(setValue, function (key, value) {
					sap.ui.demokit.explored.data.filter[setKey].push({ id: key });
				});
			});
		},
	
		_loadUi : function () {
			var sPath = jQuery.sap.getModulePath("sap.ui.demokit.explored");
			new sap.m.Shell("Shell", {
				title : "SAPUI5 Explored",
				showLogout : false,
				app : new sap.ui.core.ComponentContainer({
					name : 'sap.ui.demokit.explored'
				}),
				homeIcon : {
					'phone' : sPath + '/img/57_iPhone_Desktop_Launch.png',
					'phone@2' : sPath + '/img/114_iPhone-Retina_Web_Clip.png',
					'tablet' : sPath + '/img/72_iPad_Desktop_Launch.png',
					'tablet@2' : sPath + '/img/144_iPad_Retina_Web_Clip.png',
					'favicon' : sPath + '/img/favicon.ico',
					'precomposed': false
				}
			}).placeAt('content');
		}
	};
	

	return Bootstrap;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/explored/Bootstrap.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.explored.util.MyRouter') ) {
/*!
 * @copyright@
 */

// Provides acustomized router class for the 'explored' app.
jQuery.sap.declare('sap.ui.demokit.explored.util.MyRouter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.Router'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/explored/util/MyRouter",['jquery.sap.global', 'sap/ui/core/routing/Router'],
	function(jQuery, Router) {
	"use strict";


	
	var MyRouter = Router.extend("sap.ui.demokit.explored.util.MyRouter", {
	
		/**
		 * mobile nav back handling
		 */
		myNavBack : function (sRoute, oData) {
			var oHistory = sap.ui.core.routing.History.getInstance();
			var oPrevHash = oHistory.getPreviousHash();
			if (oPrevHash !== undefined) {
				window.history.go(-1);
			} else {
				var bReplace = true; // otherwise we go backwards with a forward history
				this.navTo(sRoute, oData, bReplace);
			}
		},
	
		/**
		 * a nav to method that does not write hashes but load the views properly
		 */
		myNavToWithoutHash : function (viewName, viewType, master, data) {
			var app = sap.ui.getCore().byId("splitApp");
			var view = this.getView(viewName, viewType);
			app.addPage(view, master);
			app.toDetail(view.getId(), "show", data);
		}
	});

	return MyRouter;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/explored/util/MyRouter.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.explored.util.ObjectSearch') ) {
/*!
 * @copyright@
 */

// Provides a simple search feature
jQuery.sap.declare('sap.ui.demokit.explored.util.ObjectSearch'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/explored/util/ObjectSearch",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	var ObjectSearch = {
	
		getEntityPath : function (oData, sId) {
			if (!oData.entities) {
				return null;
			}
			var oResult = null;
			jQuery.each(oData.entities, function (i, oEnt) {
				if (oEnt.id === sId) {
					oResult = "/entities/" + i + "/";
					return false;
				}
			});
			return oResult;
		}
	};

	return ObjectSearch;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/explored/util/ObjectSearch.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.explored.view.master.controller') ) {
  jQuery.sap.declare('sap.ui.demokit.explored.view.master.controller');
/*!
 * @copyright@
 */

jQuery.sap.require('jquery.sap.storage'); // unlisted dependency retained


sap.ui.controller("sap.ui.demokit.explored.view.master", {

	//========= members =======================================================================

	_bIsViewUpdatedAtLeastOnce : false,

	_oVSDialog : null, // set on demand

	_oViewSettings : null, // set on init

	_oStorage : jQuery.sap.storage(jQuery.sap.storage.Type.local),

	_sStorageKey : "UI5_EXPLORED_VIEW_SETTINGS",

	_mGroupFunctions : {
		"name" : function (oContext) {
			var sKey = oContext.getProperty("name").charAt(0);
			return {
				key: sKey,
				text: sKey
			};
		},
		"namespace" : true,
		"category" : true,
		"appComponent" : true,
		"since" : true,
		"formFactors" : true
	},

	// ====== init ====================================================================

	onInit : function () {

		// subscribe to routing
		this.router = sap.ui.core.UIComponent.getRouterFor(this);
		this.router.attachRoutePatternMatched(this.onRouteMatched, this);

		// subscribe to app events
		this._component = sap.ui.core.Component.getOwnerComponentFor(this.getView());
		this._component.getEventBus().subscribe("app", "selectEntity", this.onSelectEntity, this);

		// subscribe to nav container events
		this.getView().addEventDelegate({
			onBeforeFirstShow : jQuery.proxy(this.onBeforeFirstShow, this)
		});
	},

	// ====== event handling ====================================================================

	onBeforeFirstShow : function () {
		if (!this._bIsViewUpdatedAtLeastOnce) {
			this._updateView();
		}
	},

	onRouteMatched : function (oEvt) {

		var sRouteName = oEvt.getParameter("name");
		if (sRouteName !== "home" && sRouteName != "notFound") {
			return;
		}

		// update view
		this._updateView();
	},

	onOpenAppSettings : function(oEvent) {

		if (!this._oSettingsDialog){
			this._oSettingsDialog = new sap.ui.xmlfragment("sap.ui.demokit.explored.view.appSettingsDialog", this);
			this.getView().addDependent(this._oSettingsDialog);
		}
		
		var oCaller = oEvent.getSource();
		jQuery.sap.delayedCall(0, this, function(){
			
			// variable for convenience 
			var oAppSettings = sap.ui.getCore().getConfiguration();
			var sCompactMode = (this._oViewSettings.compactOn) ? "compactOn" : "compactOff";
			
			// setting the button for Theme
			sap.ui.getCore().byId("ThemeButtons").setSelectedButton(oAppSettings.getTheme());
			
			// setting the button for Compact Mode
			sap.ui.getCore().byId("CompactModeButtons").setSelectedButton(sCompactMode);
			
			//TODO: this for RTL
			
			this._oSettingsDialog.open();
		}, oCaller);
		
	},

	onSaveAppSettings : function(oEvent){

		this._oSettingsDialog.close();
		
		if (!this._oBusyDialog){
			jQuery.sap.require("sap.m.BusyDialog");
			this._oBusyDialog = new sap.m.BusyDialog();
			this.getView().addDependent(this._oBusyDialog);
		}
		var bCompact =  (sap.ui.getCore().byId('CompactModeButtons').getSelectedButton() === "compactOn") ? true : false;
		var sTheme = sap.ui.getCore().byId('ThemeButtons').getSelectedButton();		
		
		// busy dialog
		this._oBusyDialog.open();	
		jQuery.sap.delayedCall(1000, this, function(){
			this._oBusyDialog.close();
		});

		// write new settings into local storage
		this._oViewSettings.compactOn = bCompact;
		this._oViewSettings.themeActive = sTheme;
		var s = JSON.stringify(this._oViewSettings);
		this._oStorage.put(this._sStorageKey, s);		
		
		// handle settings change
		this._component.getEventBus().publish("app", "applyAppConfiguration", {
			themeActive : sTheme,
			compactOn : bCompact
		});
	},
	
	onDialogCloseButton : function(){

		this._oSettingsDialog.close();
	},

	onSelectEntity : function (sChannel, sEvent, oData) {

		var oView = this.getView(),
			oList = oView.byId("list"),
			oModel = oView.getModel("entity");

		// find item to select
		var oSelectItem = null;
		var aItems = oList.getItems();
		jQuery.each(aItems, function (i, oItem) {
			var oContext = oItem.getBindingContext("entity");
			if (oContext) {
				var sPath = oContext.getPath();
				var oEntity = oModel.getProperty(sPath);
				if (oEntity.id === oData.id) {
					oSelectItem = oItem;
					return false;
				}
			}
		});

		// select
		if (oSelectItem) {
			oList.setSelectedItem(oSelectItem);
		} else {
			oList.removeSelections();
		}
		
		// TODO scroll to list item
	},

	onOpenViewSettings : function () {

		// create dialog on demand
		if (!this._oVSDialog) {
			this._oVSDialog = sap.ui.xmlfragment("sap.ui.demokit.explored.view.viewSettingsDialog", this);
			this.getView().addDependent(this._oVSDialog);
		}

		// delay because addDependent is async
		jQuery.sap.delayedCall(0, this, function () {

			// apply user selection
			var aFilterKeys = {};
			jQuery.each(this._oViewSettings.filter, function (sPropery, aValues) {
				jQuery.each(aValues, function (i, aValue) {
					aFilterKeys[aValue] = true;
				});
			});
			this._oVSDialog.setSelectedFilterKeys(aFilterKeys);
			this._oVSDialog.setSelectedGroupItem(this._oViewSettings.groupProperty);
			this._oVSDialog.setGroupDescending(this._oViewSettings.groupDescending);
			this._oVSDialog.toggleStyleClass("sapUiSizeCompact", this._oViewSettings.compactOn);

			// open
			this._oVSDialog.open();
		});
	},

	onConfirmViewSettings : function (oEvt) {

		// store filter settings
		var that = this;
		this._oViewSettings.filter = {};
		var aFilterItems = oEvt.getParameter("filterItems");
		jQuery.each(aFilterItems, function (i, oItem) {
			var sKey = oItem.getKey();
			var sParentKey = oItem.getParent().getKey();
			if (!that._oViewSettings.filter.hasOwnProperty(sParentKey)) {
				that._oViewSettings.filter[sParentKey] = [];
			}
			that._oViewSettings.filter[sParentKey].push(sKey);
		});

		// store group settings
		var oGroupItem = oEvt.getParameter("groupItem");
		var sNewGroup = (oGroupItem) ? oGroupItem.getKey() : null;
		this._oViewSettings.groupProperty = sNewGroup;
		this._oViewSettings.groupDescending = oEvt.getParameter("groupDescending");

		// update local storage
		var s = JSON.stringify(this._oViewSettings);
		this._oStorage.put(this._sStorageKey, s);

		// update view
		this._updateView();
	},
	
	onSearch : function () {
		this._updateView(); // yes this function does a bit too much for search but it makes my life easier and I see no delay
	},

	onNavToEntity : function (oEvt) {
		var oItemParam = oEvt.getParameter("listItem");
		var oItem = (oItemParam) ? oItemParam : oEvt.getSource();
		var sPath = oItem.getBindingContext("entity").getPath();
		var oEnt = this.getView().getModel("entity").getProperty(sPath);
		var bReplace = !sap.ui.Device.system.phone;
		this.router.navTo("entity", {
			id : oEnt.id,
			part : "samples"
		}, bReplace);
	},

	// ========= internal ===========================================================================

	/**
	 * Makes sure the view settings are initialized and updates the filter bar dispay and list binding
	 */
	_updateView : function () {

		if (!this._oViewSettings) {
	
			// init the view settings
			this._initViewSettings();

			// apply app settings
			this._component.getEventBus().publish("app", "applyAppConfiguration", {
				themeActive : this._oViewSettings.themeActive,
				compactOn : this._oViewSettings.compactOn
			});
		
		}
		

		// update the filter bar
		this._updateFilterBarDisplay();

		// update the master list binding
		this._updateListBinding();
	},

	/**
	 * Updates the filter bar in the view
	 */
	_updateFilterBarDisplay : function () {

		// calculate text
		var sFilterText = "";
		jQuery.each(this._oViewSettings.filter, function (sProperty, aValues) {
			jQuery.each(aValues, function (i, aValue) {
				sFilterText += aValue + ", ";
			});
		});
		if (sFilterText.length > 0) {
			var iIndex = sFilterText.lastIndexOf(", ");
			sFilterText = sFilterText.substring(0, iIndex);
		}

		// update view
		var oView = this.getView();
		oView.byId("vsFilterBar").setVisible(sFilterText.length > 0);
		oView.byId("vsFilterLabel").setText(sFilterText);
	},
	
	/**
	 * Updates the binding of the master list and applies filters and groups
	 */
	_updateListBinding : function () {

		var aFilters = [],
			aSorters = [],
			oSearchField = this.getView().byId("searchField"),
			oList = this.getView().byId("list"),
			oBinding = oList.getBinding("items");

		// add filter for search
		var sQuery = oSearchField.getValue();
		if (sQuery) {
			aFilters.push(new sap.ui.model.Filter("searchTags", "Contains", sQuery));
		}

		// add filters for view settings
		jQuery.each(this._oViewSettings.filter, function (sProperty, aValues) {
			var aPropertyFilters = [];
			jQuery.each(aValues, function (i, aValue) {
				var sOperator = (sProperty === "formFactors") ? "Contains" : "EQ";
				aPropertyFilters.push(new sap.ui.model.Filter(sProperty, sOperator, aValue));
			});
			var oFilter = new sap.ui.model.Filter(aPropertyFilters, false); // second parameter stands for "or"
			aFilters.push(oFilter);
		});

		// filter
		if (aFilters.length === 0) {
			oBinding.filter(aFilters, "Application");
		} else {
			var oFilter = new sap.ui.model.Filter(aFilters, true); // second parameter stands for "and"
			oBinding.filter(oFilter, "Application");
		}

		// group
		if (this._oViewSettings.groupProperty) {
			var oSorter = new sap.ui.model.Sorter(
				this._oViewSettings.groupProperty,
				this._oViewSettings.groupDescending,
				this._mGroupFunctions[this._oViewSettings.groupProperty]);
			aSorters.push(oSorter);
		}
		aSorters.push(new sap.ui.model.Sorter("name", false));
		oBinding.sort(aSorters);

		// memorize that this function was executed at least once
		this._bIsViewUpdatedAtLeastOnce = true;
	},

	/**
	 * Inits the view settings. At first local storage is checked. If this is empty defaults are applied.
	 */
	_initViewSettings : function () {

		var sJson = this._oStorage.get(this._sStorageKey);
		if (!sJson) {

			// local storage is empty, apply defaults
			this._oViewSettings = {
				filter : {},
				groupProperty : "category",
				groupDescending : false,
				compactOn : false,
				themeActive : "sap_bluecrystal"
			};

		} else {

			// parse
			this._oViewSettings = JSON.parse(sJson);

			// clean filter and remove values that do not exist any longer in the data model
			// (the cleaned filter are not written back to local storage, this only happens on changing the view settings)
			var oFilterData = this.getView().getModel("filter").getData();
			var oCleanFilter = {};
			jQuery.each(this._oViewSettings.filter, function (sProperty, aValues) {
				var aNewValues = [];
				jQuery.each(aValues, function (i, aValue) {
					var bValueIsClean = false;
					jQuery.each(oFilterData[sProperty], function (i, oValue) {
						if (oValue.id === aValue) {
							bValueIsClean = true;
							return false;
						}
					});
					if (bValueIsClean) {
						aNewValues.push(aValue);
					}
				});
				if (aNewValues.length > 0) {
					oCleanFilter[sProperty] = aNewValues;
				}
			});
			this._oViewSettings.filter = oCleanFilter;

			// handling data stored with an older explored versions
			if (!this._oViewSettings.hasOwnProperty("compactOn")) { // compactOn was introduced later
				this._oViewSettings.compactOn = false;
			}
			
			if (!this._oViewSettings.hasOwnProperty("themeActive")) { // themeActive was introduced later
				this._oViewSettings.themeActive = "sap_bluecrystal";
			}
		}
	},
	
	getGroupHeader: function (oGroup){
		return new sap.m.GroupHeaderListItem( {
			title: oGroup.key,
			upperCase: false
		} );
	}
});
}; // end of sap/ui/demokit/explored/view/master.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * Initialization Code and shared classes of library sap.ui.demokit.
 */
jQuery.sap.declare('sap.ui.demokit.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.library'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/library",['jquery.sap.global', './js/highlight-query-terms',
	'sap/ui/core/library',  // library dependency
	'sap/ui/commons/library'], // library dependency
	function(jQuery) {

	"use strict";

	/**
	 * SAPUI5 library with non-public controls, used in the UI5 demokit (SDK)
	 *
	 * @namespace
	 * @name sap.ui.demokit
	 * @author SAP SE
	 * @version 1.26.7
	 * @public
	 */
	
	
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.ui.demokit",
		version: "1.26.7",
		dependencies : ["sap.ui.core","sap.ui.commons"],
		types: [
			"sap.ui.demokit.UI5EntityCueCardStyle"
		],
		interfaces: [],
		controls: [
			"sap.ui.demokit.CodeSampleContainer",
			"sap.ui.demokit.CodeViewer",
			"sap.ui.demokit.FileUploadIntrospector",
			"sap.ui.demokit.HexagonButton",
			"sap.ui.demokit.HexagonButtonGroup",
			"sap.ui.demokit.IndexLayout",
			"sap.ui.demokit.TagCloud",
			"sap.ui.demokit.UI5EntityCueCard"
		],
		elements: [
			"sap.ui.demokit.Tag",
			"sap.ui.demokit.UIAreaSubstitute"
		]
	});
	
	/**
	 * different styles for an entity cue card.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.demokit.UI5EntityCueCardStyle = {
	
		/**
		 * default style (no special styling).
		 * @public
		 */
		Standard : "Standard",
	
		/**
		 * Demokit style
		 * @public
		 */
		Demokit : "Demokit"
	
	};
	
	sap.ui.lazyRequire("sap.ui.demokit.UI5EntityCueCard", "attachToContextMenu detachFromContextMenu");
	sap.ui.lazyRequire("sap.ui.demokit.DemokitApp", "new getInstance");
	sap.ui.lazyRequire("sap.ui.demokit.IndexPage");
	
	sap.ui.getCore().attachInitEvent( function () {
	
		if ( jQuery("body").hasClass("sapUiDemokitBody") ) {
		
			// replace h1 headers with our title
			jQuery("h1").each(function() {
				var $ = jQuery(this),
				sTitle = $.text(),
				sColor = "Gray",//$.attr('color'),
				sIcon  = $.attr('icon'),
				sIconPos = $.attr('iconPos') || 'left:40px;top:20px;',
				$title = jQuery("<div class='sapUiDemokitTitle'><span>" + sTitle + "</span></div>");
		
				// first attach new content to DOM
				$.replaceWith($title);
				// only then enrich it with a HexButton (otherwise placeAt() will not find the UIArea)
				if ( sColor || sIcon) {
					$title.prepend("<div id='sap-demokit-icon'></div>");
					new sap.ui.demokit.HexagonButton({color:sColor, imagePosition:'position: relative;' + sIconPos, icon:sIcon}).placeAt("sap-demokit-icon");
				}
		
			});
		
			var $h2 = jQuery("h2");
			var $settings = jQuery('h2[id="settings"]');
			var sControls = jQuery("html").attr('data-sap-ui-dk-controls');
			if ( $settings.size() === 0 && $h2.size() >= 2 && sControls) {
				jQuery($h2[1]).before(jQuery("<h2 id='settings'>Settings (Overview)</h2><div cue-card='" + sControls.split(',')[0] + "'></div>"));
				$h2 = jQuery("h2");
			}
			var $tln = jQuery("ul.sapDkTLN");
			if ( $h2.size() > 0 && $tln.size() == 0 ) {
				$h2.first().before($tln = jQuery("<ul class='sapDkTLN'></ul>"));
			}
			
			$h2.each(function(idx) {
				var $ = jQuery(this);
				// Skip hidden sections. Can be used to suppress sections (e.g. settings) in a page
				if ( $.css('display') === 'none' ) {
					return;
				}
				if ( !$.attr('id') ) {
					$.attr('id', '__' + idx);
				}
				var a = jQuery("<a></a>").attr("href", "#" + $.attr('id')).text($.text()).addClass('sapDkLnk');
				var li = jQuery("<li></li>").append(a);
				$tln.append(li);
			});
			
			// create CodeSampleContainers
			jQuery("[code-sample]").each(function() {
				var $ = jQuery(this),
				sUiAreaId = $.attr('code-sample'),
				sScriptId = $.attr('script') || $.children('script').attr('id') || sUiAreaId + "-script";
				$.addClass("sapUiDemokitSampleCont");
				new sap.ui.demokit.CodeSampleContainer("code-sample-" + sUiAreaId, { scriptElementId : sScriptId, uiAreaId : sUiAreaId}).placeAt(this);
			});
		
			// create CueCards
			jQuery("[cue-card]").each(function() {
				var $ = jQuery(this),
					sEntityName = $.attr('cue-card');
				
				new sap.ui.demokit.UI5EntityCueCard({
					entityName : sEntityName,
					collapsible : false,
					expanded : true,
					style: 'Demokit',
					navigable: true,
					navigate: function(oEvent) {
						top.sap.ui.demokit.DemokitApp.getInstance().navigateToType(oEvent.getParameter("entityName"));
						oEvent.preventDefault();
					},
					title: 'Settings (Overview)'
				}).placeAt(this);
			});
		
		}
		
	});
	
	sap.ui.demokit._getAppInfo = function(fnCallback) {
		var sUrl = sap.ui.resource("", "sap-ui-version.json");
		
		jQuery.ajax({
			url: sUrl,
			dataType: "json",
			error: function(xhr, status, e) {
				jQuery.sap.log.error("failed to load library list from '" + sUrl + "': " + status + ", " + e);
				fnCallback(null);
			},
			success : function(oAppInfo, sStatus, oXHR) {
				if (!oAppInfo) {
					jQuery.sap.log.error("failed to load library list from '" + sUrl + "': " + sStatus + ", Data: " + oAppInfo);
					fnCallback(null);
					return;
				}
				
				fnCallback(oAppInfo);
			}
		});
	};
	
	sap.ui.demokit._loadAllLibInfo = function(sAppRoot, sInfoType /*"_getDocuIndex", "_getThirdPartyInfo", "_getLibraryInfo"*/, fnCallback) {
		jQuery.sap.require("sap.ui.core.util.LibraryInfo");
		var libInfo = new sap.ui.core.util.LibraryInfo();
		
		sap.ui.demokit._getAppInfo(function(oAppInfo) {
			if (!(oAppInfo && oAppInfo.libraries)) {
				fnCallback(null, null);
			}
			
			var count = 0,
				aLibraries = oAppInfo.libraries,
				len = aLibraries.length,
				oLibInfos = {},
				oLibVersions = {},
				aLibs = [],
				libName,
				libVersion;
			for (var i = 0; i < len; i++) {
				libName = aLibraries[i].name;
				libVersion = aLibraries[i].version;
				aLibs.push(libName);
				oLibVersions[libName] = libVersion;
				/*eslint-disable no-loop-func */
				libInfo[sInfoType](libName, function(oExtensionData){
					oLibInfos[oExtensionData.library] = oExtensionData;
					// fallback to version coming from version info file
					// (in case of ABAP we always should refer to the libVersion if available!)
					//if (!oLibInfos[oExtensionData.library].version) {
					var sVersion = oLibVersions[oExtensionData.library];
					if (sVersion) {
						oLibInfos[oExtensionData.library].version = sVersion;
					}
					count++;
					if (count == len) {
						fnCallback(aLibs, oLibInfos, oAppInfo);
					}
				});
				/*eslint-enable no-loop-func */
			}
		});
	};
	
	return sap.ui.demokit;
	
}, /* bExport= */ false);

}; // end of sap/ui/demokit/library.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.util.jsanalyzer.ASTUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides implementation of sap.ui.demokit.util.jsanalyzer.ASTUtils
jQuery.sap.declare('sap.ui.demokit.util.jsanalyzer.ASTUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/util/jsanalyzer/ASTUtils",['jquery.sap.global', 'sap/ui/demokit/js/esprima'],
	function(jQuery, esprima_) {
	
	/*global esprima */

	var Syntax = esprima.Syntax;

	function unlend(node) {
		if ( node.type == Syntax.AssignmentExpression && node.left.type == Syntax.Identifier && node.right.type == Syntax.ObjectExpression ) {
			//console.log("lends found, skipped to " + node.type);
			return node.right;
		}
		return node;
	}
	
	/**
	 * Creates a map of property values from an AST 'object literal' node.
	 *
	 * The values in the map are again AST 'property' nodes (representing key/value pairs).
	 * It would be more convenient to just return the values, but the property node is needed
	 * to find the corresponding (preceding) documentation comment.
	 *
	 * If a defaultKey is given, then a simple literal value instead of an object literal is also accepted. 
	 * It will be interpreted as the value of a property with the name specified as defaultKey.
	 * <pre>
	 *    "value" 
	 * </pre>
	 * is a shorthand notation of 
	 * <pre>
	 *   {
	 *     'defaultKey': "value"
	 *   }
	 * </pre>
	 * @param {object} node Esprima compatible node of a syntax tree
	 * @param {string} defaultKey When no object is given but only a literla, then the literal is assumed to be the value of the defaultKey 
	 * @returns {Map<string,Property>} Map of "Property" objects keyed by the property key
	 */
	function createPropertyMap(node, defaultKey) {

		var result;

		if ( node != null ) {

			//if ( node.type === Syntax.Property ) {
			//	node = node.value;
			//	//console.log("property found, skipped to " + node.type);
			//}

			// special handling of the synthetic ___ = {} assignments that JSDoc3 creates for @lends statements -> reduce them to the object literal (right hand side of assignment)
			node = unlend(node);

			// if, instead of an object literal only a literal is given and there is a defaultKey, then wrap the literal in a map
			if ( node.type === Syntax.Literal && defaultKey != null ) {
				result = {};
				result[defaultKey] = { type: Syntax.Property, value: node };
				return result;
			}

			if ( node.type != Syntax.ObjectExpression ) {
				// something went wrong, it's not an object literal
				jQuery.sap.log.error("not an object literal:" + node.type + ":" + node.value);
				// console.log(node.toSource());
				return;
			}

			// invariant: node.type == Syntax.ObjectExpression
			result = {};
			for (var i = 0; i < node.properties.length; i++) {
				var prop = node.properties[i];
				var name;
				//console.log("objectproperty " + prop.type);
				if ( prop.key.type === Syntax.Identifier ) {
					name = prop.key.name;
				} else if ( prop.key.type === Syntax.Literal ) {
					name = String(prop.key.value);
				} else {
					name = prop.key.toSource();
				}
				//console.log("objectproperty " + prop.type + ":" + name);
				result[name] = prop;
			}
		}
		return result;
	}

	var astNodeInfos = {
		AssignmentExpression: [ 'left', 'right' ],
		ArrayExpression: [ 'elements' ],
		BlockStatement: [ 'body' ],
		BinaryExpression: [ 'left', 'right' ],
		BreakStatement: [],
		CallExpression: [ 'callee', 'arguments' ],
		CatchClause: [],
		ConditionalExpression: [ 'test', 'consequent', 'alternate' ],
		ContinueStatement: [],
		DoWhileStatement: [ 'body', 'test' ],
		DebuggerStatement: [],
		EmptyStatement: [],
		ExpressionStatement: [ 'expression' ],
		ForStatement: [ 'init', 'test', 'update', 'body' ],
		ForInStatement: [ 'left', 'right', 'body' ],
		FunctionDeclaration: [ 'id', 'params', 'body' ],
		FunctionExpression: [ 'id', 'params', 'body' ],
		Identifier: [],
		IfStatement: [ 'test', 'consequent', 'alternate' ],
		Literal: [],
		LabeledStatement: [ 'body' ],
		LogicalExpression: [ 'left', 'right' ],
		MemberExpression: [ 'object', 'property' ],
		NewExpression: [ 'callee', 'arguments' ],
		ObjectExpression: [ 'properties' ],
		Program: [ 'body' ],
		Property: [ 'key', 'value' ],
		ReturnStatement: [ 'argument' ],
		SequenceExpression: [ 'expressions' ],
		SwitchStatement: [ 'discriminant', 'cases' ],
		SwitchCase: [ 'test', 'consequent' ],
		ThisExpression: [],
		ThrowStatement: [ 'argument' ],
		TryStatement: [ '' ], // TODO
		UnaryExpression: [ 'argument' ],
		UpdateExpression: [ 'argument' ],
		VariableDeclaration: [ 'declarations' ],
		VariableDeclarator: [ 'id', 'init' ],
		WhileStatement: [ 'test', 'body' ],
		WithStatement: [ 'object', 'body' ]
	};

	function visit(root, delegate, args) {
	
		function _visit(node) {
	
			// call the delegate before the children
			if ( delegate["*"] ) {
				delegate["*"].call(delegate, node, args);
			}
			if ( delegate[node.type] ) {
				delegate[node.type].call(delegate, node, args);
			}
			
			// visit children
			var aChildNames = astNodeInfos[node.type];
			if ( aChildNames ) {
				for (var i = 0; i < aChildNames.length; i++) {
					var aChildNodes = node[aChildNames[i]];
					if ( jQuery.isArray(aChildNodes) ) {
						for ( var j = 0; j < aChildNodes.length; j++) {
							if ( aChildNodes[j] ) {
								_visit(aChildNodes[j]);
							}
						}
					} else if ( aChildNodes ) {
						_visit(aChildNodes);
					}
				}
			} else {
				jQuery.sap.log.warning("don't know how to handle " + node.type);
			}
	
			// call the delegate
			if ( delegate["after:" + node.type] ) {
				delegate["after:" + node.type].call(delegate, node, args);
			}
			if ( delegate["after:*"] ) {
				delegate["after:*"].call(delegate, node, args);
			}
			
		}
		
		_visit(root);
	}

	return {
		createPropertyMap: createPropertyMap,
		unlend: unlend,
		visit : visit
	};
	
}, /* export= */ true);


}; // end of sap/ui/demokit/util/jsanalyzer/ASTUtils.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.util.jsanalyzer.Doclet') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides implementation of sap.ui.demokit.util.jsanalyzer.Doclet 
jQuery.sap.declare('sap.ui.demokit.util.jsanalyzer.Doclet'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/util/jsanalyzer/Doclet",['jquery.sap.global'],
	function(jQuery, esprima_) {

	"use strict";

	/* ---- private functions ---- */

	/**
	 * Removes the mandatory comment markers and the optional but common asterisks at the beginning of each line.
	 *
	 * The result is easier to parse/analyze.
	 *
	 * @param {string} comment Comment to unwrap
	 * @return {string} Unwrapped comment
	 * @private 
	 */
	function unwrap(comment) {

		if (!comment) {
			return '';
		}

		return comment.replace(/^\/\*\*+/, '')                // remove opening slash+stars
			.replace(/\*+\/$/, '')                            // remove closing star+slash
			.replace(/(^|\r\n|\r|\n)([ \t*]*[ \t]*)/g, '$1'); // remove left margin

	}

	var rtag = /((?:^|\r\n|\r|\n)[ \t]*@)([a-zA-Z][-_a-zA-Z0-9]*)/g;

	/**
	 * Creates a Doclet from the given comment string
	 * @param {string} comment Comment string.
	 * @constructor
	 * @private
	 */
	function Doclet(comment) {

		this.comment = comment = unwrap(comment);
		this.tags = [];

		var m;
		var lastContent = 0;
		var lastTag = "description";
		while ( (m = rtag.exec(comment)) != null ) {
			this._addTag(lastTag, comment.slice(lastContent, m.index));
			lastTag = m[2];
			lastContent = rtag.lastIndex;
		}
		this._addTag(lastTag, comment.slice(lastContent));
	}

	Doclet.prototype._addTag = function(tag, content) {
		if ( /^(public|private|protected)$/.test(tag) ) {
			this.visibility = tag;
		} else if ( /^(classdesc|description|deprecation|experimental|since|name|alias)$/.test(tag) ) {
			this[tag] = jQuery.trim(content);
		} else if ( tag === "class" ) {
			content = jQuery.trim(content);
			if ( content.split(/\s+/).length > 1 ) {
				this.classdesc = content;
			}
		} else {
			this.tags.push({ tag: tag, content: jQuery.trim(content)});
		}
	};

	Doclet.prototype.isPublic = function() {
		return this.visibility === 'public';
	};
	
	Doclet.get = function(node) {
		var comment = null;
		var leadingComments = node.leadingComments;

		if (jQuery.isArray(leadingComments) ) {
			for (var i = 0; i < leadingComments.length; i++) {
				if ( leadingComments[i].value && /^\*/.test(leadingComments[i].value) ) {
					comment = leadingComments[i].value;
				}
			}
		}

		return comment ? new Doclet(comment) : null;
	};
	
	return Doclet;
	
}, true);

}; // end of sap/ui/demokit/util/jsanalyzer/Doclet.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.util.jsanalyzer.ModuleAnalyzer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides implementation of sap.ui.demokit.util.jsanalyzer.EntityParser
jQuery.sap.declare('sap.ui.demokit.util.jsanalyzer.ModuleAnalyzer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObjectMetadata'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/util/jsanalyzer/ModuleAnalyzer",['jquery.sap.global', 'sap/ui/base/ManagedObjectMetadata', './ASTUtils', './Doclet', 'sap/ui/demokit/js/esprima'],
	function(jQuery, MOMetadata, ASTUtils, Doclet, esprima_) {

	"use strict";

	/*global esprima */

	var Syntax = esprima.Syntax;

	/* ---- private functions ---- */

	/**
	 * Name of the package in which the currently analyzed entity resides.
	 * 
	 * Used to resolve relative dependencies in sap.ui.define calls.
	 * 
	 * @type {string}
	 * @private
	 */
	var currentPackage;
	
	/**
	 * List of collected info objects. A JS file might contain multiple class and/or type definitions.
	 * 
	 * @type {object[]}
	 * @private
	 */
	var aInfos;
	
	/**
	 * Cumulated scope information for the currently analyzed module.
	 * 
	 * This is not the same as the Javascript scope of any of the functions in the module but it is a projection
	 * of all scopes. It is only maintained to properly recognize sa.ui.base.DataType and some other core classes
	 * with a specific meaning for the class / type analysis (e.g. jQuery).
	 *
	 * Keys in the map are names of local variables, values are their corresponding global name (if known).
	 *  
	 * For a full fledged scope analysis, either the StaticAnalyzer needs to be migrated or an opensource
	 * component like 'escope' could be integrated.
	 * 
	 * @type {Map<string,string>}
	 * @private
	 */
	var scope; // TODO implement scope properly using escope
	
	function getObjectName(node) {
		if ( node.type === Syntax.MemberExpression ) {
			var prefix = getObjectName(node.object);
			return prefix ? prefix + "." + node.property.name : null;
		} else if ( node.type === Syntax.Identifier ) {
			return scope[node.name] ? scope[node.name] : node.name;
		} else {
			return null;
		}
	}

	function isSapUiDefineCall(node) {
		return ( 
			node.type == Syntax.CallExpression
			 && node.callee.type == Syntax.MemberExpression
			 && /* TODO currentScope.getContext(). */ getObjectName(node.callee) == "sap.ui.define"
		);
	}
	
	function isExtendCall(node) {
		return ( 
			node.type == Syntax.CallExpression
			 && node.callee.type == Syntax.MemberExpression
			 && node.callee.property.type == Syntax.Identifier
			 && node.callee.property.name == 'extend'
			 && node.arguments.length >= 2
			 && node.arguments[0].type == Syntax.Literal
			 && typeof node.arguments[0].value == "string"
			 && ASTUtils.unlend(node.arguments[1]).type == Syntax.ObjectExpression
		);
	}
	
	function resolveRelativeDependency(dep) {
		return /^\.\//.test(dep) ? currentPackage + dep.slice(1) : dep;
	}

	// some shortcuts
	var createPropertyMap = ASTUtils.createPropertyMap;
	var unlend = ASTUtils.unlend;
	var guessSingularName = MOMetadata._guessSingularName;
	var getLeadingDoclet = Doclet.get;
	var error = jQuery.sap.log.error;
	var warning = jQuery.sap.log.warning;
	var verbose = jQuery.sap.log.debug;
	
	function collectClassInfo(extendCall, classDoclet) {

		var baseType = getObjectName(extendCall.callee.object);
		
		var oClassInfo = {
			metatype : 'control',
			name : extendCall.arguments[0].value,
			baseType : baseType,
			doc : classDoclet && (classDoclet.classdesc || classDoclet.description),
			deprecation : classDoclet && classDoclet.deprecated,
			since : classDoclet && classDoclet.since,
			experimental : classDoclet && classDoclet.experimental,
			properties : {},
			aggregations : {},
			associations : {},
			events : {},
			methods : {}
		};		
		
		function each(node, defaultKey, callback) {
			var map,n,settings,doclet;
			
			map = node && createPropertyMap(node.value);
			if ( map ) {
				for (n in map ) {
					if ( map.hasOwnProperty(n) ) {
						doclet = getLeadingDoclet(map[n]);
						settings = createPropertyMap(map[n].value, defaultKey);
						if ( settings == null ) {
							error("no valid metadata for " + n + " (AST type '" + map[n].value.type + "')");
							continue;
						}
						
						callback(n, settings, doclet, map[n]);
					}
				}
			}
		}

		var classInfoNode = unlend(extendCall.arguments[1]);
		var classInfoMap = createPropertyMap(classInfoNode);
		if ( classInfoMap && classInfoMap.metadata && classInfoMap.metadata.value.type !== Syntax.ObjectExpression ) {
			warning("class metadata exists but can't be analyzed. It is not of type 'ObjectExpression', but a '" + classInfoMap.metadata.value.type + "'.");
			return null;
		}
		
		var metadata = classInfoMap && classInfoMap.metadata && createPropertyMap(classInfoMap.metadata.value);
		if ( metadata ) {

			verbose("  analyzing metadata for '" + oClassInfo.name + "'");

			oClassInfo["abstract"] = !!(metadata["abstract"] && metadata["abstract"].value.value);
			oClassInfo["final"] = !!(metadata["final"] && metadata["final"].value.value);

			each(metadata.properties, "type", function(n, settings, doclet) {
				oClassInfo.properties[n] = {
					name : n,
					doc : doclet && doclet.description,
					since : doclet && doclet.since,
					deprecation : doclet && doclet.deprecated,
					experimental : doclet && doclet.experimental,
					visibility : (settings.visibility && settings.visibility.value.value) || "public",
					type : settings.type ? settings.type.value.value : "string",
					defaultValue : (settings.defaultValue && settings.defaultValue.value.value !== null) ? settings.defaultValue.value.value : undefined,
					bindable : settings.bindable ? settings.bindable.value.value === "bindable" : false
				};
			});

			oClassInfo.defaultAggregation = (metadata.defaultAggregation && metadata.defaultAggregation.value.value) || undefined;

			each(metadata.aggregations, "type", function(n, settings, doclet) {
				oClassInfo.aggregations[n] = {
					name: n,
					doc : doclet && doclet.description,
					deprecation : doclet && doclet.deprecated,
					since : doclet && doclet.since,
					experimental : doclet && doclet.experimental,
					visibility : (settings.visibility && settings.visibility.value.value) || "public",
					type : settings.type ? settings.type.value.value : "sap.ui.core.Control",
					singularName : settings.singularName ? settings.singularName.value.value : guessSingularName(n),
					cardinality : (settings.multiple && !settings.multiple.value.value) ? "0..1" : "0..n",
					bindable : settings.bindable ? settings.bindable.value.value === "bindable" : false
				};
			});

			each(metadata.associations, "type", function(n, settings, doclet) {
				oClassInfo.associations[n] = {
					name: n,
					doc : doclet && doclet.description,
					deprecation : doclet && doclet.deprecated,
					since : doclet && doclet.since,
					experimental : doclet && doclet.experimental,
					visibility : (settings.visibility && settings.visibility.value.value) || "public",
					type : settings.type ? settings.type.value.value : "sap.ui.core.Control",
					singularName : settings.singularName ? settings.singularName.value.value : guessSingularName(n),
					cardinality : (settings.multiple && settings.multiple.value.value) ? "0..n" : "0..1"
				};
			});

			each(metadata.events, null, function(n, settings, doclet) {
				var info = oClassInfo.events[n] = {
					name: n,
					doc : doclet && doclet.description,
					deprecation : doclet && doclet.deprecated,
					since : doclet && doclet.since,
					experimental : doclet && doclet.experimental,
					allowPreventDefault : !!(settings.allowPreventDefault && settings.allowPreventDefault.value.value),
					parameters : {}
				};
				each(settings.parameters, null, function(pName, pSettings, pDoclet) {
					info.parameters[pName] = {
						name : pName,
						doc : pDoclet && pDoclet.description,
						deprecation : pDoclet && pDoclet.deprecated,
						since : pDoclet && pDoclet.since,
						experimental : pDoclet && pDoclet.experimental,
						type : pSettings && pSettings.type ? pSettings.type.value.value : ""
					};
				});
			});

		}
		
		return oClassInfo;
	}

	function collectEnumInfo(node) {
		
		var doclet = Doclet.get(node);
		var name = /* TODO currentScope.getContext(). */ getObjectName(node.expression.left);

		if ( name && doclet && doclet.isPublic() ) {

			var oTypeDoc = {
				metatype : "type",
				doc : undefined,
				deprecation : false,
				visibility : 'public'
			};
			
			oTypeDoc.name = name;
			if ( doclet ) {
				oTypeDoc.doc = doclet.description;
				oTypeDoc.deprecation = doclet.deprecation;
				oTypeDoc.since = doclet.since;
				oTypeDoc.experimental = doclet.experimental;
				// TODO oTypeDoc["final"] = doclet.hasTatypeDocumentation.hasTag("final") ? new SimpleType.Final() : null);
				// TODO simpleType.setDefaultValue(typeDocumentation.getTagContent("defaultvalue"));
			}
			
			var properties = node.expression.right.properties || [];
			oTypeDoc.values = {};
			for (var i = 0; i < properties.length; i++) {

				// documentation must preceed the name/value pair
				var propDoclet = Doclet.get(properties[i]);
				var key = properties[i].key;
				var value = properties[i].value;

				var valueInfo = {};
				// the name of the enum value equals the name in the name/value pair
				if ( key.type == Syntax.Identifier ) {
					valueInfo.name = key.name;
				} else if ( key.type == Syntax.Literal ) {
					valueInfo.name = key.value;
				} else {
					throw new Error();
				}

				// the value equals the value in the name/value pair
				if ( value.type == Syntax.Literal ) {
					valueInfo.value = value.value;
				} else {
					throw new Error();
				}

				if ( propDoclet != null ) {
					valueInfo.doc = propDoclet.description;
					valueInfo.deprecation = propDoclet.deprecation;
					valueInfo.since = propDoclet.since;
					valueInfo.experimental = propDoclet.experimental;
				}

				oTypeDoc.values[valueInfo.name] = valueInfo;
				
			}
			
			aInfos.push(oTypeDoc);

		}
		
	}

	function collectRegExTypeInfo(node) {
		
		var doclet = Doclet.get(node);
		var name = node.expression.right.arguments[0].value;
		var settings = ASTUtils.createPropertyMap(node.expression.right.arguments[1]);
		var baseType = null;
		if ( node.expression.right.arguments.length > 2
			 && node.expression.right.arguments[2].type == Syntax.CallExpression
			 && node.expression.right.arguments[2].callee.type == Syntax.MemberExpression
			 && /* TODO currentScope.getContext().*/ getObjectName(node.expression.right.arguments[2].callee) == "sap.ui.base.DataType.getType"
			 && node.expression.right.arguments[2].arguments.length > 0 
			 && node.expression.right.arguments[2].arguments[0].type == Syntax.Literal ) {
			baseType = node.expression.right.arguments[2].arguments[0].value;
		}

		if ( name && doclet && doclet.isPublic() ) {

			var oTypeDoc = {
				metatype : "type",
				doc : undefined,
				deprecation : false,
				visibility : 'public'
			};

			oTypeDoc.name = name;

			if ( doclet ) {
				oTypeDoc.doc = doclet.description;
				oTypeDoc.deprecation = doclet.deprecation;
				oTypeDoc.since = doclet.since;
				oTypeDoc.experimental = doclet.experimental;
				// TODO oTypeDoc["final"] = doclet.hasTatypeDocumentation.hasTag("final") ? new SimpleType.Final() : null);
			}

			var defaultValue = settings.defaultValue;
			if ( defaultValue ) {
			  oTypeDoc.defaultValue = defaultValue.value.value; /* TODO (convertValue(defaultValue, null, currentScope)); */
			}
			
			var isValid = settings.isValid;
			if ( isValid 
				 && isValid.value.type == Syntax.FunctionExpression 
				 && isValid.value.body 
				 && isValid.value.body.body.length > 0 
				 && isValid.value.body.body[0].type == Syntax.ReturnStatement
				 && isValid.value.body.body[0].argument.type == Syntax.CallExpression
				 && isValid.value.body.body[0].argument.callee.type == Syntax.MemberExpression
				 && isValid.value.body.body[0].argument.callee.object.type == Syntax.Literal 
				 && isValid.value.body.body[0].argument.callee.object.value instanceof RegExp ) {
			
				var pattern = isValid.value.body.body[0].argument.callee.object.value.source;
				if ( /^\^\(.*\)\$$/.test(pattern) ) {
					pattern = pattern.slice(2, -2);
				}
				oTypeDoc.pattern = pattern;
			}

			oTypeDoc.baseType = baseType;

			aInfos.push(oTypeDoc);
		}
		
	}

	var delegate = {

		"ExpressionStatement": function(node) {
			
			if ( isSapUiDefineCall(node.expression) ) {
	
				var i = 0;
				var dependencies,factory;
				if ( i < node.expression.arguments.length && node.expression.arguments[i].type === Syntax.Literal ) {
					/* name = */ node.expression.arguments[i++].value;
				}
				if ( i < node.expression.arguments.length && node.expression.arguments[i].type === Syntax.ArrayExpression ) {
					dependencies = node.expression.arguments[i++].elements;
				}
				if ( i < node.expression.arguments.length && node.expression.arguments[i].type === Syntax.FunctionExpression ) {
					factory = node.expression.arguments[i++];
				}
	//			// unused
	//			if ( i < node.expression.arguments.length && node.expression.arguments[i].type === Syntax.FunctionExpression ) {
	//				export_ = node.expression.arguments[i++];
	//			}
	
				if ( dependencies && factory && factory.params ) {
					for (var j = 0; j < dependencies.length; j++) {
						var dep = dependencies[j].type === Syntax.Literal ? resolveRelativeDependency(dependencies[j].value) : null;
						var paramName = j < factory.params.length ? factory.params[j].name : null;
						if ( dep && paramName ) {
							// TODO this is only a hack. For a proper scope and constant value handling
							// much more needs to be done (e.g. migration of StaticAnalyzer.java)
							scope[paramName] = dep.replace(/\//g, '.');
						}
					}
				}
			}
			
			// ---- Something = { ... } ----
			if ( node.expression.type == Syntax.AssignmentExpression
				 && node.expression.right.type == Syntax.ObjectExpression
				 && node.expression.left.type == Syntax.MemberExpression ) {
	
				collectEnumInfo(node);
				
			}
	
			// ---- sap.ui.base.DataType.createType ----
	
			if ( node.expression.type === Syntax.AssignmentExpression
				 && node.expression.right.type === Syntax.CallExpression
				 && node.expression.right.callee.type === Syntax.MemberExpression
				 && node.expression.right.callee.property.type === Syntax.Identifier
				 && node.expression.right.callee.property.name === 'createType'
				 && /* TODO currentScope.getContext().*/ getObjectName(node.expression.right.callee.object) == 'sap.ui.base.DataType'
				 && node.expression.right.arguments.length >= 2
				 && node.expression.right.arguments[0].type === Syntax.Literal
				 && node.expression.right.arguments[1].type === Syntax.ObjectExpression ) {

				collectRegExTypeInfo(node);
			}
	
			// ---- Something.extend() ----
	
			if ( isExtendCall(node.expression) ) {
	
				var doclet = Doclet.get(node) || Doclet.get(node.expression);
				var oClassInfo = collectClassInfo(node.expression, doclet);
				if ( oClassInfo ) {
					aInfos.push(oClassInfo);
				}
				
			}

		},
		
		"VariableDeclaration" : function(node) {

			if ( node.declarations.length == 1
				 && node.declarations[0].init
				 && isExtendCall(node.declarations[0].init) ) {

				var doclet = Doclet.get(node) || Doclet.get(node.declarations[0]);
				var oClassInfo = collectClassInfo(node.declarations[0].init, doclet);
				if ( oClassInfo ) {
					aInfos.push(oClassInfo);
				}

			}
			
		}

	};
	
	function analyze(oData, sEntityName, sModuleName) {

		currentPackage = sModuleName.split('/').slice(0,-1).join('/');
		aInfos = [];
		scope = {};

		var ast = esprima.parse(oData, {comment:true, attachComment: true});
		ASTUtils.visit(ast, delegate);
		
		for (var i = 0; i < aInfos.length; i++) {
			if ( aInfos[i].name === sEntityName ) {
				return aInfos[i];
			}
		}

		return;
	}

	return {
		analyze: analyze
	};

}, false);

}; // end of sap/ui/demokit/util/jsanalyzer/ModuleAnalyzer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.CodeSampleContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.demokit.CodeSampleContainer.
jQuery.sap.declare('sap.ui.demokit.CodeSampleContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/CodeSampleContainer",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/core/ResizeHandler', './library'],
	function(jQuery, Control, ResizeHandler, library) {
	"use strict";


	
	/**
	 * Constructor for a new CodeSampleContainer.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A container for both the source and the runtime results of a CodeSample. By default, only the runtime results are shown. There are additional controls that allow the user to display the source, modify and run it.
	 * 
	 * The container provides a sub container that can be used in calls to sap.ui.setRoot() as if it would be a normal UIArea. So the sample code doesn't have to know that it runs in a CodeSample container.
	 * @extends sap.ui.core.Control
	 * @version 1.26.7
	 *
	 * @constructor
	 * @public
	 * @name sap.ui.demokit.CodeSampleContainer
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var CodeSampleContainer = Control.extend("sap.ui.demokit.CodeSampleContainer", /** @lends sap.ui.demokit.CodeSampleContainer.prototype */ { metadata : {
	
		library : "sap.ui.demokit",
		properties : {
	
			/**
			 * Id of the script element that contains the initial sample code for this code sample.
			 */
			scriptElementId : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Id of the container for the running code. This Id can be used in calls to sap.ui.setRoot as if it would be a normal UIArea. Internally, a container UIElement is created with that Id.
			 */
			uiAreaId : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * A title to be displayed above the code.
			 */
			title : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Whether the source code is visible or not.
			 */
			sourceVisible : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Width of the CodeSample container.
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '90%'}
		},
		aggregations : {
	
			/**
			 * The UIAreaSubstitute used by this code sample container
			 */
			_uiarea : {type : "sap.ui.demokit.UIAreaSubstitute", multiple : false, visibility : "hidden"}
		},
		events : {
	
			/**
			 * Fired when the user decides to apply his/her changes to the sample code
			 */
			apply : {
				parameters : {
	
					/**
					 * the current code that will be applied
					 */
					code : {type : "string"}
				}
			}
		}
	}});
	
	
	CodeSampleContainer.prototype.init = function(){
	
		this._oUIArea = new sap.ui.demokit.UIAreaSubstitute(this.getUiAreaId());
		this.setAggregation("_uiarea", this._oUIArea);
		this._oCodeViewer = new sap.ui.demokit.CodeViewer({
			visible : false,
			source : "",
			press : [this._setCodeEditable, this],
			save : [this._saveAndApplyCode, this]
		});
		this._oCodeViewer.setParent(this); //TODO provide sAggregationName?
		this._oShowCodeLink = new sap.ui.commons.Link({	text : "Show Source", press : [this._toggleCodeDisplay, this]});
		this._oShowCodeLink.setParent(this); //TODO provide sAggregationName?
		this._oApplyCodeLink = new sap.ui.commons.Link({ visible: false, text : 'Apply', press : [this._saveAndApplyCode, this]});
		this._oApplyCodeLink.setParent(this); //TODO provide sAggregationName?
	
	};
	
	CodeSampleContainer.prototype.setSourceVisible = function(bSourceVisible) {
		this.setProperty("sourceVisible", bSourceVisible);
		this._oCodeViewer && this._oCodeViewer.setVisible(this.getSourceVisible());
		this._oShowCodeLink && this._oShowCodeLink.setText(this.getSourceVisible() ? "Hide Source" : "Show Source");
		this._oApplyCodeLink && this._oApplyCodeLink.setVisible(this.getSourceVisible());
	};
	
	CodeSampleContainer.prototype.setUiAreaId = function(sId) {
		this.setProperty("uiAreaId", sId);
		var aContent;
		if ( this._oUIArea ) {
			aContent = this._oUIArea.removeAllContent();
			this._oUIArea.destroy();
		}
		this._oUIArea = new sap.ui.demokit.UIAreaSubstitute(this.getUiAreaId());
		this.setAggregation("_uiarea", this._oUIArea);
		if ( aContent ) {
			for (var i = 0; i < aContent.length; i++) {
				this._oUIArea.addContent(aContent[i]);
			}
		}
	};
	
	CodeSampleContainer.prototype.setScriptElementId = function(sId) {
		this.setProperty("scriptElementId", sId);
		this._oCodeViewer.setSource(this._getSource());
		if ( sId && !this._oScriptRef ) {
			var that = this;
			sap.ui.getCore().attachInitEvent(function() { that._oCodeViewer.setSource(that._getSource()); });
		}
	};
	
	CodeSampleContainer.prototype._getSource = function() {
		var sSource = "!source not found! (" + this.getScriptElementId() + ")";
		if ( this.getScriptElementId() ) {
			this._oScriptRef = jQuery.sap.domById(this.getScriptElementId());
			if ( this._oScriptRef ) {
				sSource = this._oScriptRef.innerHTML;
			}
		}
		return sSource;
	};
	
	CodeSampleContainer.prototype._setCodeEditable = function() {
		this._oCodeViewer.setEditable(true);
		var that = this;
		setTimeout(function() { that._oCodeViewer.focus(); }, 50);
	};
	
	CodeSampleContainer.prototype._toggleCodeDisplay = function() {
		this.setSourceVisible(!this.getSourceVisible());
	};
	
	CodeSampleContainer.prototype._saveAndApplyCode = function() {
		var sCode = this._oCodeViewer.getSource();
		if ( this._oCodeViewer.getEditable() ) {
			sCode = this._oCodeViewer.getCurrentSource();
			this._oCodeViewer.setSource(sCode);
			this._oCodeViewer.setEditable(false);
		}
	
		// before executing the new code, we discard the old UIArea content 
		// Otherwise, invalidation might fail (due to the bPrerendered logic in Control)
		this._oUIArea.destroyContent();
		
		// now execute the code
		if ( !this.hasListeners("apply") ) {
			jQuery.sap.globalEval(sCode);
		} else {
			this.fireApply({ code : sCode });
		}
		
	};
	

	return CodeSampleContainer;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/CodeSampleContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.CodeViewer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.demokit.CodeViewer.
jQuery.sap.declare('sap.ui.demokit.CodeViewer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/CodeViewer",['jquery.sap.global', 'sap/ui/commons/Button', 'sap/ui/commons/Dialog', 'sap/ui/core/Control', './library'],
	function(jQuery, Button, Dialog, Control, library) {
	"use strict";


	
	/**
	 * Constructor for a new CodeViewer.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Shows a piece of (Javascript) code and allows to edit it
	 * @extends sap.ui.core.Control
	 * @version 1.26.7
	 *
	 * @constructor
	 * @public
	 * @name sap.ui.demokit.CodeViewer
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var CodeViewer = Control.extend("sap.ui.demokit.CodeViewer", /** @lends sap.ui.demokit.CodeViewer.prototype */ { metadata : {
	
		library : "sap.ui.demokit",
		properties : {
	
			/**
			 * The source code to display.
			 */
			source : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * The CSS width property
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
	
			/**
			 * The CSS height property
			 */
			height : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
	
			/**
			 * Whether the code can be edited or not
			 */
			editable : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Whether the code viewer should be visible
			 */
			visible : {type : "boolean", group : "Misc", defaultValue : true}
		},
		events : {
	
			/**
			 * Called when the mouse button is clicked over the non-editable(!) control
			 */
			press : {},
	
			/**
			 * Called when the editor is active and should be saved
			 */
			save : {}
		}
	}});
	
	/*global prettyPrint *///declare unusual global vars for JSLint/SAPUI5 validation
	
	CodeViewer.load = function() {
		if ( !window.prettyPrint ) {
			jQuery.sap.require("sap.ui.demokit.js.google-code-prettify.prettify");
		}
	};
	
	CodeViewer.load();
	
	/**  
	 * Adapts size settings of the rendered HTML in special situations
	 */
	CodeViewer.prototype.onAfterRendering = function () {
		var oDomRef = this.getDomRef();
		if ( !this.getEditable() && oDomRef && oDomRef.className.indexOf("prettyprint") === 0 && window.prettyPrint ) {
			// TODO a call to prettyPrint() will also pretty print other CodeViewer controls -> avoid double pretty printing
			prettyPrint();
			oDomRef.className = "sapUiCodeViewer";
		}
	};
	
	/**
	 * Function is called when code viewer is clicked.
	 * 
	 * @param oBrowserEvent the forwarded sap.ui.core.BrowserEvent
	 * @private
	 */
	CodeViewer.prototype.onclick = function(e) {
		if (!this.getEditable()) {
			this.firePress({id:this.getId()});
			e.preventDefault();
			e.stopPropagation();
		}
	};
	
	/**
	 * Handles the sapescape event... triggers return to non-editable mode (revert)
	 * @param {sap.ui.core.BroserEvent} oBrowserEvent the forwarded browser event
	 * @private
	 */
	CodeViewer.prototype.onsapescape = function(oBrowserEvent) {
		if ( this.getEditable() ) {
			// we do not update the source from the PRE tag, so this acts as a 'revert'
			this.setEditable(false);
		}
	};
	
	CodeViewer.prototype.onkeydown = function(e) {
		if ( this.getEditable() &&
			 ((e.keyCode == jQuery.sap.KeyCodes.S && e.ctrlKey && !e.shiftKey && !e.altKey) ||
			  (e.keyCode == jQuery.sap.KeyCodes.F2)) ) {
			e.preventDefault();
			e.stopPropagation();
			this.fireSave();
		}
	};
	
	CodeViewer.prototype.getCurrentSource = (function() {
	
		var SIMPLE_HTML_REGEXP = /<(\/?[^ >]+)[^>]*>|(&[^;]+;)/g,
			TAG_REPLACEMENTS = {
				"/p" : "\n",
				"br" : "\n",
				"div" : "\n"
			},
			ENTITY_REPLACEMENTS = {
				"&nbsp;" : " ",
				"&lt;" : "<",
				"&gt;" : ">",
				"&amp;" : "&"
			};
		
		return function() {
			var code = '',
				oDomRef = this.getDomRef();
			
			if ( oDomRef ) {
				// retrieve the edited source via innerHTML as this seems to be the only way to detect line breaks 
				code = oDomRef.innerHTML;
				//var code = oDomRef.textContent;
				//if (!code) {
				//	// IE version
				//	code = oDomRef.innerText;
				//}
	
				// convert some well known tags and entities, remove all others
				code = code.replace(SIMPLE_HTML_REGEXP, function(m,m1,m2) {
					if ( m1 ) {
						m1 = m1.toLowerCase();
						if ( TAG_REPLACEMENTS[m1] ) {
							return TAG_REPLACEMENTS[m1];
						}
					} else if ( m2 ) {
						m2 = m2.toLowerCase();
						if ( ENTITY_REPLACEMENTS[m2] ) {
							return ENTITY_REPLACEMENTS[m2];
						}
					}
					return "";
				});
			}
			return code;
		};
	})();
	
	
	
	CodeViewer.showScript = function(sId) {
		var oDomRef = document.getElementById(sId);
		var sSource = oDomRef.innerHTML;
	
		if ( !oDomRef || !sSource ) {
			return;
		}
		
		var oClose = new Button({text:"Close", press: function() { oDialog.close();}});
		var oDialog = new Dialog({
			applyContentPadding : false,
			title : "Source Code for '" + sId + "'",
			resizable: true,
			minWidth:"400px", minHeight:"200px",
			buttons : [oClose],
			content : new CodeViewer({
				source:sSource,
				press: function() { jQuery.sap.log.info('clicked into code viewer');}}),
			defaultButton: oClose});
		oDialog.center();
		oDialog.open();
	};
	

	return CodeViewer;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/CodeViewer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.EntityInfo') ) {
/*!
 * @copyright@
 */

// Provides reuse functionality for reading documentation from metamodel entities
jQuery.sap.declare('sap.ui.demokit.EntityInfo'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/EntityInfo",['jquery.sap.global', './util/jsanalyzer/ModuleAnalyzer'],
	function(jQuery, analyzer) {
	"use strict";

	var oRootPackageInfo = {};
	
	function getPackageInfo(sName) {
		var aParts = sName.split('.');
		var oPackageInfo = oRootPackageInfo;
		var l = aParts.length - 1;
		for (var i = 0; i < l && !oPackageInfo.__noMetamodel && !oPackageInfo.__noSource; i++ ) {
			oPackageInfo = oPackageInfo[aParts[i]] || (oPackageInfo[aParts[i]] = {});
		}
		return oPackageInfo;
	}

	// just a hack, needs proper type resolution
	var CORE_TYPES = "boolean int float number function object string void any Element Control Component";
		
	function resolve(sType, sContextName) {
		if ( sType.indexOf("/") >= 0 ) {
			return sType.replace(/\//g, ".");
		} else if ( sType && sType.indexOf(".") < 0 && CORE_TYPES.indexOf(sType) >= 0 ) {
			return "sap.ui.core." + sType;
		} else {
			return sContextName.split(".").slice(0, -1).concat([sType.replace(/\//g, ".")]).join(".");
		}
	}

	function parseControlMetamodel(oData, sEntityName) {
		
		var $control = jQuery(oData.documentElement);
		var oEntityDoc = {
			metatype : 'control',
			baseType : undefined,
			doc : undefined,
			deprecation : undefined,
			properties : {},
			aggregations : {},
			associations : {},
			events : {},
			methods : {}
		};

		var sBaseType = $control.children("baseType").text();
		oEntityDoc.baseType = (sBaseType) ? resolve(sBaseType, sEntityName) : null;
		
		oEntityDoc.doc = doc($control);
		oEntityDoc.deprecation = depr($control);
		
		each($control, "properties/property", function($prop) {
			oEntityDoc.properties[$prop.attr("name")] = {
				kind : 0,
				type : resolve($prop.attr("type") || "string", sEntityName),
				defaultValue : $prop.attr("defaultValue") || "empty/undefined",
				doc : doc($prop),
				deprecation : depr($prop),
				since : $prop.attr("since") || null
			};
		});
		
		oEntityDoc.defaultAggregation = oEntityDoc.defaultAggregation || $control.children("aggregations").attr("default");
		each($control, "aggregations/aggregation", function($aggr) {
			oEntityDoc.aggregations[$aggr.attr("name")] = {
				kind : $aggr.attr("cardinality") === "0..1" ? 1 : 2,
				type : resolve($aggr.attr("type") || "sap.ui.core/Control", sEntityName),
				cardinality : $aggr.attr("cardinality") || "0..n",
				visibility : $aggr.attr("visibility") || null,
				doc : doc($aggr),
				deprecation : depr($aggr),
				since : $aggr.attr("since") || null
			};
		});
		
		each($control, "associations/association", function($assoc) {
			oEntityDoc.associations[$assoc.attr("name")] = {
				kind : $assoc.attr("cardinality") === "0..n" ? 4 : 3,
				type : resolve($assoc.attr("type") || "sap.ui.core/Control", sEntityName),
				cardinality : $assoc.attr("cardinality") || "0..1",
				doc : doc($assoc),
				deprecation : depr($assoc),
				since : $assoc.attr("since") || null
			};
		});
		
		each($control, "events/event", function($event) {
			var sName = $event.attr("name");
			oEntityDoc.events[sName] = {
				kind : 5,
				doc : doc($event),
				deprecation : depr($event),
				since : $event.attr("since") || null,
				parameters : []
			};
			each($event, "parameters/parameter", function($param) {
				oEntityDoc.events[sName].parameters[$param.attr("name")] = {
					kind : 6,
					type : resolve($param.attr("type") || "string", sEntityName),
					doc : doc($param),
					since : $param.attr("since") || null,
					deprecation : depr($param)
				};
			});
		});
		
		each($control, "methods/method", function($method) {
			var sName = $method.attr("name");
			oEntityDoc.methods[sName] = {
				kind : 7,
				type : resolve($method.attr("type") || "sap.ui.core/void", sEntityName),
				doc : doc($method),
				deprecation : depr($method),
				since : $method.attr("since") || null,
				parameters : []
			};
			each($method, "parameters/parameter", function($param) {
				oEntityDoc.methods[sName].parameters.push({
					kind: 8,
					name : $param.attr("name"),
					type : resolve($param.attr("type") || "sap.ui.core/Control", sEntityName),
					doc : doc($param),
					since : $param.attr("since") || null,
					deprecation : depr($param)
				});
			});
		});

		return oEntityDoc;
	}
		
	function parseTypeMetamodel(oData, sEntityName) {

		var $type = jQuery(oData.documentElement);
		var oEntityDoc = {
			metatype : 'type',
			doc : undefined,
			deprecation : false,
			values : {}
		};
		
		oEntityDoc.doc = doc($type);
		oEntityDoc.deprecation = depr($type);
		
		each($type, "enumeration/value", function($value) {
			var sName = $value.attr("name");
			oEntityDoc.values[sName] = {
				value : $value.attr("value") || sName,
				doc : doc($value),
				deprecation : depr($value)
			};
		});
		
		oEntityDoc.pattern = $type.children("pattern").text();
		oEntityDoc.baseType = resolve($type.children("baseType").text(), sEntityName);
		
		return oEntityDoc;
	}
	
	function parseJavascript(oData, sEntityName, sModuleName) {
		
		// delegate Javascript parsing to ModuleAnalyzer
		return analyzer.analyze(oData, sEntityName, sModuleName);

	}
				
	function each($,sNames,fnCallback) {
		jQuery.each(sNames.split("/"), function(i,n) {
			$ = $.children(n);
		});
		$.each(function(i,e) {
			fnCallback(jQuery(e));
		});
	}
	
	function doc($) {
		return $.children("documentation").text();
	}

	function depr($) {
		return $.children("deprecation").text();
	}
	
	function load(sName, sType, sDataType, fnParser, sEntityName) {

		var oEntityDoc;
		
		jQuery.ajax({
			async: false,
			url : jQuery.sap.getModulePath(sName, sType),
			dataType : sDataType,
			success : function(vResponse) {
				oEntityDoc = fnParser(vResponse, sEntityName, sName.replace(/\./g,'/'));
			},
			error : function (err) {
				jQuery.sap.log.debug("tried to load entity docu for: " + sName + sType);
			}
		});
		
		return oEntityDoc;

	}

	function get(sEntityName, sType) {
		
		var bControl = !sType || sType === "control";
		var bType = !sType || sType === "type";
		var oPackageInfo = getPackageInfo(sEntityName);
		var oEntityDoc;
		
		if ( !oEntityDoc && !oPackageInfo.__noMetamodel ) {
			if ( !oEntityDoc && bControl ) {
				oEntityDoc = load(sEntityName, ".control", "xml", parseControlMetamodel, sEntityName);
			}
			if ( !oEntityDoc && bType ) {
				oEntityDoc = load(sEntityName, ".type", "xml", parseTypeMetamodel, sEntityName);
			}
			if ( oEntityDoc ) {
				oPackageInfo.__noSource = true;
			}
		} else if ( oPackageInfo.__noMetamodel ) {
			jQuery.sap.log.debug("ancestor package for " + sEntityName + " is marked with 'noMetamodel'");
		}
		if ( !oEntityDoc && !oPackageInfo.noSource ) {
			if ( !oEntityDoc && bType ) {
				var sLibraryName = sEntityName.replace(/\.[^.]+$/, ".library");
				oEntityDoc = load(sLibraryName, ".js", "text", parseJavascript, sEntityName);
			}
			if ( !oEntityDoc ) {
				oEntityDoc = load(sEntityName, ".js", "text", parseJavascript, sEntityName);
			}
			if ( oEntityDoc ) {
				oPackageInfo.__noMetamodel = true;
			}
		} else if ( oPackageInfo.__noSource ) {
			jQuery.sap.log.debug("ancestor package for " + sEntityName + " is marked with 'noSource'");
		}
		
		return oEntityDoc;
	
	}

	var EntityInfo = {
	
		getEntityDocu : function (sEntityName, sType, bResolveInheritance) {
		
			function merge(a,b) {
				for (var n in b) {
					if ( b.hasOwnProperty(n) && !a.hasOwnProperty(n) ) { // do not overwrite existing entries
						a[n] = b[n];
					}
				}
			}
			
			// read info from first document
			var oEntityDoc = get(sEntityName, sType);

			// collect entries from base types 
			if ( bResolveInheritance ) {
				var oDoc = oEntityDoc;
				while ( oDoc && oDoc.baseType ) {
					oDoc = get(oDoc.baseType, oDoc.metatype);
					if ( oDoc ) {
						merge(oEntityDoc.properties, oDoc.properties);
						merge(oEntityDoc.aggregations, oDoc.aggregations);
						merge(oEntityDoc.associations, oDoc.assocations);
						merge(oEntityDoc.events, oDoc.events);
						merge(oEntityDoc.methods, oDoc.methods);
					}
				}
			}
			
			return oEntityDoc;
			
		}
		
	};
	
	return EntityInfo;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/EntityInfo.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.FileUploadIntrospector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.demokit.FileUploadIntrospector.
jQuery.sap.declare('sap.ui.demokit.FileUploadIntrospector'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/FileUploadIntrospector",['jquery.sap.global', 'sap/ui/core/Control', './library'],
	function(jQuery, Control, library) {
	"use strict";


	
	/**
	 * Constructor for a new FileUploadIntrospector.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Control that allows to monitor uploaded files in a demo scenario. This is not a general purpose monitor but only works with the demo fileupload service.
	 * @extends sap.ui.core.Control
	 * @version 1.26.7
	 *
	 * @constructor
	 * @public
	 * @name sap.ui.demokit.FileUploadIntrospector
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FileUploadIntrospector = Control.extend("sap.ui.demokit.FileUploadIntrospector", /** @lends sap.ui.demokit.FileUploadIntrospector.prototype */ { metadata : {
	
		library : "sap.ui.demokit",
		properties : {
	
			/**
			 * The URL to check the upload content with....
			 */
			uploadUrl : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Interval in milliseconds after which the content is checked again. values lower or equal to 0 mean 'no automatic refresh'.
			 */
			autoRefreshInterval : {type : "string", group : "Misc", defaultValue : '0'},
	
			/**
			 * (CSS) Height of the control
			 */
			height : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
	
			/**
			 * Width of the file list
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null}
		}
	}});
	
	
	FileUploadIntrospector.prototype.init = function() {
		this._aFiles = [];
		this._iHash = 0;
	};
	
	FileUploadIntrospector.prototype.setAutoRefreshInterval = function(iInterval) {
		this.setProperty("autoRefreshInterval", iInterval);
		if ( this.oTimer ) {
			jQuery.sap.clearDelayedCall(this.oTimer);
			this.oTimer = undefined;
		}
		if ( iInterval > 0 ) {
			this.oTimer = jQuery.sap.delayedCall(iInterval, this, "_autoRefresh");
		}
	};
	
	/**
	 * Trigger an explicit refresh of the displayed information
	 *
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FileUploadIntrospector.prototype.refresh = function() {
		var that = this;
		jQuery.getJSON(this.getUploadUrl(), function(data) { that._receiveFileList(data); });
	};
	
	FileUploadIntrospector.prototype._autoRefresh = function() {
		if ( this.oTimer ) {
			jQuery.sap.clearDelayedCall(this.oTimer);
			this.oTimer = undefined;
		}
		this.refresh();
		// TODO reinitialize timer only after response has been received (requires separate receive methods)  
		var iInterval = this.getAutoRefreshInterval();
		if ( iInterval > 0 ) {
			this.oTimer = jQuery.sap.delayedCall(iInterval, this, "_autoRefresh");
		}
	};
	
	FileUploadIntrospector.prototype._receiveFileList = function(oResult) {
		if ( !this._aFiles || this._iHash !== oResult.hash ) {
			this._aFiles = oResult.files;
			this._iHash = oResult.hash;
			this.invalidate();
		}
	};

	return FileUploadIntrospector;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/FileUploadIntrospector.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.HexagonButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.demokit.HexagonButton.
jQuery.sap.declare('sap.ui.demokit.HexagonButton'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/HexagonButton",['jquery.sap.global', 'sap/ui/core/Control', './library'],
	function(jQuery, Control, library) {
	"use strict";


	
	/**
	 * Constructor for a new HexagonButton.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A custom button with a 'hexagon' shape
	 * @extends sap.ui.core.Control
	 * @version 1.26.7
	 *
	 * @constructor
	 * @public
	 * @name sap.ui.demokit.HexagonButton
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var HexagonButton = Control.extend("sap.ui.demokit.HexagonButton", /** @lends sap.ui.demokit.HexagonButton.prototype */ { metadata : {
	
		library : "sap.ui.demokit",
		properties : {
	
			/**
			 * Icon to display
			 */
			icon : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * The color of the hexagon
			 */
			color : {type : "string", group : "Misc", defaultValue : 'blue'},
	
			/**
			 * The position. If set, the button is rendered with an absolute position.
			 */
			position : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Whether the button is enabled or not.
			 */
			enabled : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * The position of the contained image. If not set the image is rendered with a fixed relative position.
			 */
			imagePosition : {type : "string", group : "Misc", defaultValue : null}
		},
		events : {
	
			/**
			 * Fired when the user clicks the hex button
			 */
			press : {}
		}
	}});
	
	/**
	 * Function is called when hexagon is clicked.
	 * 
	 * @param oBrowserEvent the forwarded sap.ui.core.BrowserEvent
	 * @private
	 */
	HexagonButton.prototype.onclick = function(oBrowserEvent) {
		// TODO check for the hexagon
		if ( this.getEnabled() ) {
			this.firePress({id:this.getId()});
		}
		oBrowserEvent.preventDefault();
		oBrowserEvent.stopPropagation();
	};
	
	// intercept attach/detachPress to be able to rerender (renderer behaves differently for purely "decorative" buttons)
	HexagonButton.prototype._attachPress = HexagonButton.prototype.attachPress;
	HexagonButton.prototype.attachPress = function() {
		this._attachPress.apply(this, arguments);
		this.invalidate();
	};
	
	HexagonButton.prototype._detachPress = HexagonButton.prototype.detachPress;
	HexagonButton.prototype.detachPress = function() {
		this._detachPress.apply(this, arguments);
		this.invalidate();
	};

	return HexagonButton;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/HexagonButton.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.HexagonButtonGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.demokit.HexagonButtonGroup.
jQuery.sap.declare('sap.ui.demokit.HexagonButtonGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/HexagonButtonGroup",['jquery.sap.global', 'sap/ui/core/Control', './library'],
	function(jQuery, Control, library) {
	"use strict";

	/**
	 * Constructor for a new HexagonButtonGroup.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A group of HexagonButtons, aligned in a packed grid
	 * @extends sap.ui.core.Control
	 * @version 1.26.7
	 *
	 * @constructor
	 * @public
	 * @name sap.ui.demokit.HexagonButtonGroup
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var HexagonButtonGroup = Control.extend("sap.ui.demokit.HexagonButtonGroup", /** @lends sap.ui.demokit.HexagonButtonGroup.prototype */ { metadata : {
	
		library : "sap.ui.demokit",
		properties : {
	
			/**
			 * How many buttons might be placed in the same row of the grid
			 */
			colspan : {type : "int", group : "Misc", defaultValue : 3}
		},
		aggregations : {
	
			/**
			 * The buttons to layout in a grid
			 */
			buttons : {type : "sap.ui.demokit.HexagonButton", multiple : true, singularName : "button"}
		}
	}});

	return HexagonButtonGroup;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/HexagonButtonGroup.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.IndexLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.demokit.IndexLayout.
jQuery.sap.declare('sap.ui.demokit.IndexLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IntervalTrigger'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/IndexLayout",['jquery.sap.global', 'sap/ui/Device', 'sap/ui/core/Control', 'sap/ui/core/IntervalTrigger', './library'],
	function(jQuery, Device, Control, IntervalTrigger, library) {
	"use strict";


	
	/**
	 * Constructor for a new IndexLayout.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Layout which renders content items with equal width and height. The items are arranged in rows.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.26.7
	 *
	 * @constructor
	 * @public
	 * @since 1.17.0
	 * @experimental Since version 1.17.0. 
	 * API is not yet finished and might change completely
	 * @name sap.ui.demokit.IndexLayout
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var IndexLayout = Control.extend("sap.ui.demokit.IndexLayout", /** @lends sap.ui.demokit.IndexLayout.prototype */ { metadata : {
	
		library : "sap.ui.demokit",
		properties : {
	
			/**
			 * The width of a content item. Only px values are allowed.
			 */
			itemWidth : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '200px'},
	
			/**
			 * The height of a content item. Only px values are allowed.
			 */
			itemHeight : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '200px'},
	
			/**
			 * Whether the given item width/height should be scaled according to the screen size.
			 */
			enableScaling : {type : "boolean", group : "Appearance", defaultValue : true}
		},
		defaultAggregation : "content",
		aggregations : {
	
			/**
			 * The content items
			 */
			content : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
		}
	}});
	
	
	IndexLayout._MINMARGIN = 18;
	IndexLayout._DEFAULT_ITEM_HEIGHT = 200;
	IndexLayout._DEFAULT_ITEM_WIDTH = 200;
	IndexLayout._pos = null;
	
	(function(){
		
	IndexLayout._IntervalTrigger = new IntervalTrigger(300);
	
	IndexLayout.prototype.init = function(){
		this._itemWidth = IndexLayout._DEFAULT_ITEM_WIDTH;
		this._itemHeight = IndexLayout._DEFAULT_ITEM_HEIGHT;
		this._tilesPerRow;
		this._width;
		this._registered = false;
		this._itemScaleFactor = 1;
		Device.media.attachHandler(setScaleFactor, this, Device.media.RANGESETS.SAP_STANDARD);
	};
	
	
	IndexLayout.prototype.exit = function(){
		this.onBeforeRendering();
		Device.media.detachHandler(setScaleFactor, this, Device.media.RANGESETS.SAP_STANDARD);
	};
	
	
	IndexLayout.prototype.setItemWidth = function(sItemWidth){
		this.setProperty("itemWidth", sItemWidth, true);
		if (!sItemWidth || sItemWidth.indexOf("px") < 0) {
			this._itemWidth = IndexLayout._DEFAULT_ITEM_WIDTH;
			this.setProperty("itemWidth", this._itemWidth, true);
		} else {
			this._itemWidth = parseInt(sItemWidth, 10);
		}
		_refresh(this);
		return this;
	};
	
	
	IndexLayout.prototype.setItemHeight = function(sItemHeight){
		this.setProperty("itemHeight", sItemHeight, true);
		if (!sItemHeight || sItemHeight.indexOf("px") < 0) {
			this._itemHeight = IndexLayout._DEFAULT_ITEM_HEIGHT;
			this.setProperty("itemHeight", this._itemHeight, true);
		} else {
			this._itemHeight = parseInt(sItemHeight, 10);
		}
		_refresh(this);
		return this;
	};
	
	
	IndexLayout.prototype.setEnableScaling = function(bEnableScaling){
		this.setProperty("enableScaling", bEnableScaling, true);
		_refresh(this);
		return this;
	};
	
	
	IndexLayout.prototype.onBeforeRendering = function(){
		if (this._registered) {
			IndexLayout._IntervalTrigger.removeListener(refresh, this);
			this._registered = false;
		}
		
		var mMediaParams = Device.media.getCurrentRange(Device.media.RANGESETS.SAP_STANDARD);
		setScaleFactor.apply(this, [mMediaParams, true]);
	};
	
	IndexLayout.prototype.onThemeChanged = function(){
		if (this.getDomRef()) {
			this.invalidate();
		}
	};
	
	IndexLayout.prototype.onAfterRendering = function(){
		if (!IndexLayout._pos) {
			var transform = null;
			var oStyle = this.getDomRef().style;
			if ("webkitTransform" in oStyle) {
				  transform = "-webkit-transform";
			} else if ("transform" in oStyle) {
				  transform = "transform";
			} else if ("msTransform" in oStyle) {
				  transform = "-ms-transform";
			} else if ("MozTransform" in oStyle) {
				  transform = "-moz-transform";
			}
			if (transform) {
				IndexLayout._pos = function($ref, x, y){
					$ref.css(transform, "translate(" + x + "px," + y + "px)");
				};
			} else {
				IndexLayout._pos = function($ref, x, y){
					$ref.css({top: y + "px", left: x + "px"});
				};
			}
		}
		
		if (!this._registered) {
			IndexLayout._IntervalTrigger.addListener(refresh, this);
			this._registered = true;
		}
		this.$().toggleClass("sapDkIdxLayoutHidden", false);
	};
	
	
	IndexLayout.prototype._scale = function(iVal){
		if (!this.getEnableScaling()) {
			return iVal;
		}
		return Math.floor(iVal * this._itemScaleFactor);
	};
	
	
	function _refresh(oLyt, bNoForce){
		refresh.apply(oLyt, [!bNoForce]);
	}
	
	
	function refresh(bInitial){
		if (!this.getDomRef()) {
			this.onBeforeRendering();
			return;
		}
		
		bInitial = bInitial || !this._registered;
		
		var $Layout = this.$(),
			w = $Layout.outerWidth(),
			h = $Layout.outerHeight(),
			heightChanged = this._height != h;
		
		if (this._width === w && !heightChanged && !bInitial) {
			return;
		}
		
		this._width = w;
		this._height = h;
	
		var itemCount = this.getContent().length,
			itemWidth = this._scale(this._itemWidth),
			itemHeight = this._scale(this._itemHeight),
			t = getOptimalTilesPerRow(this._width, itemCount, itemWidth),
			//leftpad = Math.max(sap.ui.demokit.IndexLayout._MINMARGIN, Math.floor((this._width - t*itemWidth)/2)),
			tilesPerRowChanged = this._tilesPerRow != t;
		
		this._tilesPerRow = t;
		
		if (!bInitial) {
			$Layout.toggleClass("sapDkIdxLayoutAnim", true);
		}
		
		//$Layout.css("padding-left", leftpad+"px");
		
		if (!tilesPerRowChanged && !bInitial && !heightChanged) {
			return;
		}
		
		var top = 0,
			left = 0;
			  
		jQuery.sap.byId(this.getId() + "-cntnt").css({
			"padding-left": IndexLayout._MINMARGIN + "px",
			"width": (t * itemWidth + IndexLayout._MINMARGIN * 2) + "px",
			"height": Math.ceil(itemCount / t) * itemHeight
		}).children().each(function(index){
			if (index > 0 && index % t === 0) {
				top = top + itemHeight;
				left = 0;
			}
			IndexLayout._pos(jQuery(this), left, top);
			left = left + itemWidth;
		});
		
		if (bInitial) {
			$Layout.css({
				"padding-top": IndexLayout._MINMARGIN + "px",
				"padding-bottom": IndexLayout._MINMARGIN + "px"
			});
		}
	}
	
	
	function getOptimalTilesPerRow(width, itemCount, itemWidth){
		var t = Math.min(Math.floor((width - 2 * IndexLayout._MINMARGIN) / itemWidth), itemCount);
		var mod = itemCount % t;
		if (mod == 0 || itemCount <= t) {
			return t;
		}
	  
		function weight(x){
			var n = itemCount % x;
			return (t - x) * Math.floor(itemCount / x) + (n != 0 ? (t - n) : 0);
		}
	  
		var best = weight(t);
		var canditates = [t];
	  
		for (var i = t - 1; i >= 1; i--) {
			var w = weight(i);
			if (w < best) {
				canditates = [i];
				best = w;
			} else if (w == best) {
				canditates.push(i);
			}
		}
	
		for (var i = 0; i < canditates.length; i++) {
			var m = itemCount % canditates[i];
			if (m == 0) {
				return canditates[i];
			} else if (i == 0 || m > best) {
				best = m;
				t = canditates[i];
			}
		}
	  
		return t;
	}
	
	function setScaleFactor(mMediaParams, bSkipUpdate){
		switch (mMediaParams.name) {
			case "Tablet":
				this._itemScaleFactor = 0.75;
				break;
			case "Phone":
				this._itemScaleFactor = 0.5;
				break;
			default:
				this._itemScaleFactor = 1;
		}
		
		if (!this.getDomRef() || bSkipUpdate) {
			return;
		}
		
		var width = this._scale(this._itemWidth);
		var height = this._scale(this._itemHeight);
		
		jQuery.sap.byId(this.getId() + "-cntnt").children().each(function(){
			jQuery(this).css({width: width, height: height});
		});
		
		_refresh(this);
	}
	
	
	//**********************************************
	
	Control.extend("sap.ui.demokit.IndexLayout._Tile", {
		
		metadata : {
			properties : {
				"title" : "string",
				"description" : "string",
				"target" : "string",
				"icon": "sap.ui.core.URI",
				"href": "sap.ui.core.URI"
			},
			events : {
				"press": {}
			}
		},
		
		onclick : function() {
			if (!this.getHref()) {
				this.firePress();
			}
		},
		
		renderer: function(oRm, oControl) {
			oRm.write("<a");
			oRm.addClass("sapDkIdxLayout_Tile");
			oRm.writeClasses();
			oRm.writeControlData(oControl);
			if (oControl.getHref()) {
				oRm.writeAttributeEscaped("href", oControl.getHref());
				if (oControl.getTarget()) {
					oRm.writeAttributeEscaped("target", oControl.getTarget());
				}
			}	else {
				/* eslint-disable no-script-url */
				oRm.writeAttribute("href", "javascript:void(0);");
				/* eslint-enable no-script-url */
			}
			oRm.writeAttributeEscaped("title", oControl.getDescription());
			oRm.write(">");
			
			oRm.write("<span class='sapDkIdxLayout_TileIcon'>");
			oRm.writeIcon(oControl.getIcon());
			oRm.write("</span>");
	
			oRm.write("<span class='sapDkIdxLayout_TileLabel'");
			oRm.writeAttributeEscaped("title", oControl.getTitle());
			oRm.write(">");
			oRm.writeEscaped(oControl.getTitle());
			oRm.write("</span>");
			
			oRm.write("<span class='sapDkIdxLayout_TileDesc'");
			oRm.writeAttributeEscaped("title", oControl.getDescription());
			oRm.write(">");
			oRm.writeEscaped(oControl.getDescription());
			oRm.write("</span>");
			
			oRm.write("</a>");
		}
	});
	
	})();
	

	return IndexLayout;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/IndexLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.IndexLayoutPage') ) {
/*!
 * @copyright@
 */
// Creates Index Page within the Demokit
jQuery.sap.declare('sap.ui.demokit.IndexLayoutPage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.encoder'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/IndexLayoutPage",['jquery.sap.global', 'sap/ui/core/IconPool', './IndexLayout', 'sap/ui/model/json/JSONModel', 'jquery.sap.encoder'],
	function(jQuery, IconPool, IndexLayout, JSONModel/* , jQuerySap */) {
	"use strict";


	
	var IndexLayoutPage = function IndexPage(oData, sTarget, sBaseUrl, bCustomFont) {
		
		var oModel = new JSONModel(oData);
		sap.ui.getCore().setModel(oModel);
		
		var oCatIndex = new IndexLayoutPage.Repeat({
			categories: {
				path: "/categories",
				template: new IndexLayoutPage.Cat({
					title: "{text}",
					layout: new IndexLayout({
						enableScaling: true,
						content: {
							path: "links",
							template: new IndexLayout._Tile({
								title: "{text}",
								description: "{desc}",
								target: sTarget,
								icon: {
									path: "icon",
									formatter: function(ico){
										if (!ico) {
											ico = "learning-assistant";
										}
										return "sap-icon://" + ico;
									}
								},
								href: "{ref}"
							})
						}
					})
				})
			}
		});
		
		if (bCustomFont) {
			IconPool.addIcon("explored", "custom", "brandico", "e001", true);
			IconPool.addIcon("cart", "custom", "brandico", "e002", true); //Obsolete?
			IconPool.addIcon("makit", "custom", "brandico", "e005", true); //Obsolete?
			IconPool.addIcon("helloworld", "custom", "brandico", "e003", true); //Obsolete?
			IconPool.addIcon("poa", "custom", "brandico", "e007", true); //Obsolete?
			IconPool.addIcon("flexbox", "custom", "brandico", "e00A", true); //Obsolete?
			IconPool.addIcon("crud", "custom", "brandico", "e009", true); //Obsolete?
			IconPool.addIcon("icon-explorer", "custom", "brandico", "e006", true); //Obsolete?
			IconPool.addIcon("splitapp", "custom", "brandico", "e00C", true);
			IconPool.addIcon("mvc", "custom", "brandico", "e00B", true); //Obsolete?
		}
		
		sap.ui.getCore().attachInit(function(){
			if (bCustomFont) {
				var sFontBaseUrl = jQuery.sap.getModulePath("", "/../test-resources/sap/m/demokit/demokit-home/");
				IndexLayoutPage._introduceCustomFont("brandico", sFontBaseUrl, "demoAppsIconFont");
			}
			
			jQuery("body").append("<div id='root'></div>");
			oCatIndex.placeAt("root");
		});
	};
	
	
	sap.ui.core.Element.extend("sap.ui.demokit.IndexLayoutPage.Cat", {
		metadata : {
			properties : {
				"title" : "string"
			},
			aggregations : {
				"layout": {type : "sap.ui.demokit.IndexLayout", multiple : false}
			}
		}
	});
	
	
	sap.ui.core.Control.extend("sap.ui.demokit.IndexLayoutPage.Repeat", {
		metadata : {
			aggregations : {
				"categories" : {type : "sap.ui.demokit.IndexLayoutPage.Cat", multiple : true}
			}
		},
		
		renderer: function(oRm, oControl) {
			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.write(">");
			
			var aCats = oControl.getCategories();
			for (var i = 0; i < aCats.length; i++) {
				oRm.write("<div");
				oRm.writeElementData(aCats[i]);
				oRm.write(">");
				if (aCats[i].getTitle()) {
					oRm.write("<h2>");
					oRm.writeEscaped(aCats[i].getTitle());
					oRm.write("</h2>");
				}
				oRm.renderControl(aCats[i].getLayout());
				oRm.write("</div>");
			}
			
			oRm.write("</div>");
		}
	});
	
	
	IndexLayoutPage._introduceCustomFont = function(sFamilyName, sFontPath, sFontFile){
		var sFontFace = "@font-face {" +
			"font-family: '" + sFamilyName + "';" +
			"src: url('" + sFontPath + sFontFile + ".eot');" +
			"src: url('" + sFontPath + sFontFile + ".eot?#iefix') format('embedded-opentype'), url('" + sFontPath + sFontFile + ".ttf') format('truetype');" +
			"font-weight: normal;" +
			"font-style: normal;" +
			"}";
		jQuery('head').append('<style type="text/css">' + sFontFace + '</style>');
	};

	return IndexLayoutPage;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/IndexLayoutPage.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.Tag') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.demokit.Tag.
jQuery.sap.declare('sap.ui.demokit.Tag'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/Tag",['jquery.sap.global', 'sap/ui/core/Element', './library'],
	function(jQuery, Element, library) {
	"use strict";


	
	/**
	 * Constructor for a new Tag.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A Tag in a TagCloud
	 * @extends sap.ui.core.Element
	 * @version 1.26.7
	 *
	 * @constructor
	 * @public
	 * @name sap.ui.demokit.Tag
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Tag = Element.extend("sap.ui.demokit.Tag", /** @lends sap.ui.demokit.Tag.prototype */ { metadata : {
	
		library : "sap.ui.demokit",
		properties : {
	
			/**
			 * The text to be disaplyed for this tag.
			 */
			text : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * The weight for this tag. Can be any integer value.
			 */
			weight : {type : "int", group : "Misc", defaultValue : 1}
		}
	}});
	
	Tag.prototype.onclick = function(oEvent){
		//Inform the parent about the onclick event
		this.oParent.firePressEvent(this);
	};
	

	return Tag;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/Tag.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.TagCloud') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.demokit.TagCloud.
jQuery.sap.declare('sap.ui.demokit.TagCloud'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/TagCloud",['jquery.sap.global', 'sap/ui/core/Control', './library'],
	function(jQuery, Control, library) {
	"use strict";


	
	/**
	 * Constructor for a new TagCloud.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A simple TagCloud representing a set of weighted tags
	 * @extends sap.ui.core.Control
	 * @version 1.26.7
	 *
	 * @constructor
	 * @public
	 * @name sap.ui.demokit.TagCloud
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var TagCloud = Control.extend("sap.ui.demokit.TagCloud", /** @lends sap.ui.demokit.TagCloud.prototype */ { metadata : {
	
		library : "sap.ui.demokit",
		properties : {
	
			/**
			 * Maximum font size that may be chosen for a tag in this cloud
			 */
			maxFontSize : {type : "int", group : "Misc", defaultValue : 30},
	
			/**
			 * Minimum font size that must be used for a tag in this cloud
			 */
			minFontSize : {type : "int", group : "Misc", defaultValue : 10}
		},
		defaultAggregation : "tags",
		aggregations : {
	
			/**
			 * The tags displayed in this tag cloud
			 */
			tags : {type : "sap.ui.demokit.Tag", multiple : true, singularName : "tag"}
		},
		events : {
	
			/**
			 * Fired when a Tag is clicked.
			 */
			press : {
				parameters : {
	
					/**
					 * Id of the selected Tag.
					 */
					tagId : {type : "string"}
				}
			}
		}
	}});
	
	//Called by a tag when a onclick event is triggered there.
	//The event is forwarded to the application coding.
	TagCloud.prototype.firePressEvent = function(tag){
	  this.firePress({tagId:tag.getId()});
	};
	

	return TagCloud;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/TagCloud.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.UI5EntityCueCard') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.demokit.UI5EntityCueCard.
jQuery.sap.declare('sap.ui.demokit.UI5EntityCueCard'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Link'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/UI5EntityCueCard",['jquery.sap.global', 'sap/ui/commons/Link', 'sap/ui/core/Control', './EntityInfo', './library'],
	function(jQuery, Link, Control, EntityInfo, library) {
	"use strict";


	
	/**
	 * Constructor for a new UI5EntityCueCard.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Displays documentation for a UI5 entity (control or type).
	 * 
	 * The documentation will be read from a UI5 metamodel file that by default is loaded from the same resource location
	 * where the control or type would be loaded from (using the UI5 resource loading). This control displays all properties,
	 * aggregations, associations, events and methods that are described in the metamodel. For each part, it lists the name,
	 * type (where applicable) and documentation. If the navigable property is set to true, all types are shown as links
	 * and when pressed, the navigate event is fired. This allows consumers to react on a user click on such a type
	 * (and to e.g. navigate to the underlying type of a property or aggregation)
	 * @extends sap.ui.core.Control
	 * @version 1.26.7
	 *
	 * @constructor
	 * @public
	 * @name sap.ui.demokit.UI5EntityCueCard
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var UI5EntityCueCard = Control.extend("sap.ui.demokit.UI5EntityCueCard", /** @lends sap.ui.demokit.UI5EntityCueCard.prototype */ { metadata : {
	
		library : "sap.ui.demokit",
		properties : {
	
			/**
			 * Whether the cue card can be collapsed at all. When set to true, the value of property expanded determines the current collapsed/expanded state. When false, the control is always expanded.
			 */
			collapsible : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * Whether the cue card is currently expanded.
			 */
			expanded : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Whether type information is navigable. Also see event 'navigate'.
			 */
			navigable : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Qualified name of the control or type to show the documentation for. The name can be specified in the metamodel notation ('sap.ui.core/Control' or in the UI5 resource notation (sap.ui.core.Control).
			 */
			entityName : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Style of the cue card.
			 */
			style : {type : "sap.ui.demokit.UI5EntityCueCardStyle", group : "Misc", defaultValue : null}
		},
		events : {
	
			/**
			 * Fired when a link for a type is activated (clicked) by the user.
			 * 
			 * When property "navigable" is set to true, type links are created for the types of properties, aggregations and associations, for the types of event or method parameters and for the return types of methods (if not void).
			 * 
			 * The default behavior for this event is to set the entityName property to the clicked entityName. Applications can prevent the default by calling the corresponding method on the event object.
			 */
			navigate : {allowPreventDefault : true,
				parameters : {
	
					/**
					 * Name of the entity (control or type) that has been clicked.
					 */
					entityName : {type : "string"}
				}
			}
		}
	}});
	
	
	UI5EntityCueCard.prototype.init = function() {
		this._oShowCueCardLink = new Link({	text : "Show All Settings", press : [this._toggleExpanded, this]});
		this._oShowCueCardLink.setParent(this); //TODO provide sAggregationName?
		this._aHistory = [];
		/**
		 * Active position in the history. Moved by back/forward and setEntityName 
		 */
		this._iHistory = -1;
	};
	
	UI5EntityCueCard.prototype.setEntityName = function(sEntityName) {
		if ( sEntityName !== this.getEntityName() ) {
			this.setProperty("entityName", sEntityName);
			this._aHistory[++this._iHistory] = sEntityName;
			this._aHistory.length = this._iHistory + 1; // cut off any dangling entries
		}
	};
	
	UI5EntityCueCard.prototype.back = function() {
		if ( this._iHistory > 0 ) {
			this.setProperty("entityName", this._aHistory[--this._iHistory]);
		}
	};
	
	UI5EntityCueCard.prototype.forward = function() {
		if ( this._iHistory + 1 < this._aHistory.length ) {
			this.setProperty("entityName", this._aHistory[++this._iHistory]);
		}
	};
	
	UI5EntityCueCard.prototype.setExpanded = function(bExpanded) {
		this.setProperty("expanded", bExpanded);
		this._oShowCueCardLink && this._oShowCueCardLink.setText(this.getExpanded() ? "Hide Settings" : "Show All Settings");
	};
	
	UI5EntityCueCard.prototype.onclick = function(oEvent) {
		/*if ( oEvent.target && oEvent.target.nodeName == "A" ) {
			oEvent.preventDefault();
		}*/
		if ( this.getNavigable() ) {
			var sEntity = jQuery(oEvent.target).attr("data-sap-ui-entity");
			if ( sEntity && this.fireNavigate({entityName : sEntity}) ) {
				this.setEntityName(sEntity);
			}
		}
	};
	
	UI5EntityCueCard.prototype._toggleExpanded = function() {
		this.setExpanded(!this.getExpanded());
	};
	
	UI5EntityCueCard.prototype._getDoc = function() {
		var sName = this.getEntityName();
		return EntityInfo.getEntityDocu(sName);
	};
	
	UI5EntityCueCard.createDialog = function() {
		jQuery.sap.require("sap.ui.commons.Button");
		jQuery.sap.require("sap.ui.commons.Dialog");
		jQuery.sap.require("sap.ui.commons.Toolbar");
	
		var oCueCard = new UI5EntityCueCard({
			collapsible : false,
			expanded : true,
			navigable: true
		});
		var oDialog = new sap.ui.commons.Dialog({
			title : "Cue Card",
			minWidth : "200px",
			minHeight : "200px",
			maxWidth : "75%",
			maxHeight : "75%",
			content : [
				new sap.ui.commons.Toolbar({
					standalone : false,
					items : [
						new sap.ui.commons.Button({
							text : "Back",
							press : function() {
								oCueCard.back();
							}
						}),
						new sap.ui.commons.Button({
							text : "Fwd",
							press : function() {
								oCueCard.forward();
							}
						})
					]
				}),
				oCueCard
			]
		});
		oDialog.openForClass = function(sClassName) {
			oCueCard.setEntityName(sClassName);
			this.rerender();
			this.open();
		};
		return oDialog;
	};
	
	UI5EntityCueCard.attachToContextMenu = function(oNode) {
		var oDialog;
		jQuery(oNode || window.document).bind("contextmenu.sapDkCueCd", function(e) {
			if ( e.shiftKey && e.ctrlKey )  {
				var oCtrl = jQuery(e.target).control(0);
				// if there is a control and if the control is not part of the cue card dialog
				if ( oCtrl && (!oDialog || !oDialog.getDomRef() || (oDialog.getDomRef() !== e.target && !jQuery.contains(oDialog.getDomRef(), e.target)) ) ) {
					oDialog = oDialog || UI5EntityCueCard.createDialog();
					oDialog.openForClass(oCtrl.getMetadata().getName());
					e.preventDefault();
					e.stopPropagation();
				}
			}
		});
	};
	
	UI5EntityCueCard.detachFromContextMenu = function(oNode) {
		jQuery(oNode || window.document).unbind("contextmenu.sapDkCueCd");
	};
	
	
	/* 
	 * TODOs
	 *
	 * - defaultValues
	 * - method & event parameters
	 * - styling
	 * - integrate into snippix itself
	 * - initial size
	 */

	return UI5EntityCueCard;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/UI5EntityCueCard.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.UIAreaSubstitute') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2015 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.demokit.UIAreaSubstitute.
jQuery.sap.declare('sap.ui.demokit.UIAreaSubstitute'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/UIAreaSubstitute",['jquery.sap.global', 'sap/ui/core/Element', './library'],
	function(jQuery, Element, library) {
	"use strict";

	/**
	 * Constructor for a new UIAreaSubstitute.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A substitute for an UIArea that can be embedded in the control tree.
	 * @extends sap.ui.core.Element
	 * @version 1.26.7
	 *
	 * @constructor
	 * @public
	 * @name sap.ui.demokit.UIAreaSubstitute
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var UIAreaSubstitute = Element.extend("sap.ui.demokit.UIAreaSubstitute", /** @lends sap.ui.demokit.UIAreaSubstitute.prototype */ { metadata : {
	
		library : "sap.ui.demokit",
		aggregatingType : "sap.ui.demokit/CodeSampleContainer",
		aggregations : {
	
			/**
			 * Content Area used for the running sample code
			 */
			content : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
		}
	}});

	return UIAreaSubstitute;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/UIAreaSubstitute.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.explored.Component') ) {
/*!
 * @copyright@
 */

// Root component for the 'explored' app.
jQuery.sap.declare('sap.ui.demokit.explored.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/explored/Component",['jquery.sap.global', './util/MyRouter'],
	function(jQuery, MyRouter) {
	"use strict";


	var Component = sap.ui.core.UIComponent.extend("sap.ui.demokit.explored.Component", {
	
		metadata : {
			includes : [
				"/css/style.css",
				"/css/titles.css"
			],
			routing : {
				config : {
					routerClass : MyRouter,
					viewType : "XML",
					viewPath : "sap.ui.demokit.explored.view",
					targetControl : "splitApp",
					clearTarget : false
				},
				routes : [
					{
						pattern : "entity/{id}/{part}",
						name : "entity",
						view : "entity",
						viewLevel : 3,
						targetAggregation : "detailPages"
					},
					{
						pattern : "sample/{id}/preview",
						name : "sample",
						view : "sample",
						viewLevel : 4,
						targetAggregation : "detailPages"
					},
					{
						pattern : "sample/{id}/code",
						name : "code",
						view : "code",
						viewLevel : 5,
						targetAggregation : "detailPages",
						transition: "flip"
					},
					{
						pattern : "",
						name : "home",
						view : "master",
						viewLevel : 1,
						targetAggregation : "masterPages",
						subroutes : [
							{
								pattern : "{all*}",
								name : "notFound",
								view : "notFound",
								viewLevel : 2,
								targetAggregation : "detailPages"
							}
						]
					}
				]
			}
		},
	
		/**
		 * !!! The steps in here are sequence dependent !!!
		 */
		init : function () {
	
			// 1. some very generic requires
			jQuery.sap.require("sap.ui.demokit.explored.util.ObjectSearch");
					jQuery.sap.require("sap.ui.core.routing.History");
			jQuery.sap.require("sap.m.InstanceManager");
			jQuery.sap.require("sap.m.routing.RouteMatchedHandler");
	
			// 2. call overridden init (calls createContent)
			sap.ui.core.UIComponent.prototype.init.apply(this, arguments);
	
			// 3. nav to initial pages
			var router = this.getRouter();
			if (!sap.ui.Device.system.phone) {
				router.myNavToWithoutHash("sap.ui.demokit.explored.view.master", "XML", true);
				router.myNavToWithoutHash("sap.ui.demokit.explored.view.welcome", "XML", false);
			}
	
			// 4. initialize the router
			this.routeHandler = new sap.m.routing.RouteMatchedHandler(router);
			router.initialize();
		},
	
		destroy : function () {
			
			if (this.routeHandler) {
				this.routeHandler.destroy();
			}
			
			// call overridden destroy
			sap.ui.core.UIComponent.prototype.destroy.apply(this, arguments);
		},
	
		/**
		 * 
		 */
		createContent : function () {
	
			// create root view
			var oView = sap.ui.view({
				id : "app",
				viewName : "sap.ui.demokit.explored.view.app",
				type : "JS",
				viewData : { component : this }
			});
	
			// set i18n model (must be done before data)
			var sPath = jQuery.sap.getModulePath("sap.ui.demokit.explored");
			var i18nModel = new sap.ui.model.resource.ResourceModel({
				bundleUrl : sPath + "/i18n/messageBundle.properties"
			});
			oView.setModel(i18nModel, "i18n");
	
			// set entity model
			var oEntData = {
				entityCount : sap.ui.demokit.explored.data.entityCount,
				entities : sap.ui.demokit.explored.data.entities
			};
			var oEntModel = new sap.ui.model.json.JSONModel(oEntData);
			oEntModel.setSizeLimit(100000);
			oView.setModel(oEntModel, "entity");
	
			// set filter model
			var oFilterData = sap.ui.demokit.explored.data.filter;
			var oFilterModel = new sap.ui.model.json.JSONModel(oFilterData);
			oFilterModel.setSizeLimit(100000);
			oView.setModel(oFilterModel, "filter");
	
			// set device model
			var deviceModel = new sap.ui.model.json.JSONModel({
				isTouch : sap.ui.Device.support.touch,
				isNoTouch : !sap.ui.Device.support.touch,
				isPhone : sap.ui.Device.system.phone,
				isNoPhone : !sap.ui.Device.system.phone,
				listMode : (sap.ui.Device.system.phone) ? "None" : "SingleSelectMaster",
				listItemType : (sap.ui.Device.system.phone) ? "Active" : "Inactive"
			});
			deviceModel.setDefaultBindingMode("OneWay");
			oView.setModel(deviceModel, "device");
	
			// done
			return oView;
		}
	});

	return Component;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/explored/Component.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.explored.view.entity.controller') ) {
  jQuery.sap.declare('sap.ui.demokit.explored.view.entity.controller');
/*!
 * @copyright@
 */



sap.ui.controller("sap.ui.demokit.explored.view.entity", {

	// ====== event handling ====================================================================

	onInit : function () {
		this.router = sap.ui.core.UIComponent.getRouterFor(this);
		this.router.attachRoutePatternMatched(this.onRouteMatched, this);
		this._component = sap.ui.core.Component.getOwnerComponentFor(this.getView());
	},

	onTypeLinkPress : function (oEvt) {

		// navigate to entity
		var sType = oEvt.getSource().data("type");
		this.router.navTo("entity", {
			id : sType,
			part : "samples"
		}, false);

		// notify master of selection change
		this._component.getEventBus().publish("app", "selectEntity", {id: sType});
	},

	onTabSelect : function (oEvt) {
		// update URL without updating history
		var sTab = oEvt.getParameter("key");
		this.router.navTo("entity", {
			id : this._sId,
			part : sTab
		}, true);
	},
	
	onNavBack : function (oEvt) {
		this.router.myNavBack("home", {});
	},

	onNavToSample : function (oEvt) {
		var sPath = oEvt.getSource().getBindingContext("entity").getPath();
		var oSample = this.getView().getModel("entity").getProperty(sPath);
		this.router.navTo("sample", {
			id : oSample.id
		});
	},

	_TAB_KEYS : [ "sampes", "about", "properties", "aggregations", "associations", "events", "methods" ],

	onRouteMatched : function (oEvt) {

		var sRouteName = oEvt.getParameter("name"),
			sNewId = oEvt.getParameter("arguments").id,
			sNewTab = oEvt.getParameter("arguments").part;

		// check route
		if (sRouteName !== "entity") {
			return;
		}

		// find entity in index
		// (can be null if the entity is not in the index, e.g. for base classes and types)
		var oEntModel = this.getView().getModel("entity");
		var sPath = sap.ui.demokit.explored.util.ObjectSearch.getEntityPath(oEntModel.getData(), sNewId);
		var oEntity = (sPath) ? oEntModel.getProperty(sPath) : null;

		// set nav button visibility
		var bEntityIsInIndex = !!sPath;
		var oHistory = sap.ui.core.routing.History.getInstance();
		var oPrevHash = oHistory.getPreviousHash();
		var bShowNavButton = sap.ui.Device.system.phone || (!bEntityIsInIndex && !!oPrevHash);
		this.getView().byId("page").setShowNavButton(bShowNavButton);

		// set data model
		var oData;
		if (this._sId !== sNewId) {

			// retrieve entity docu from server
			var oDoc = sap.ui.demokit.EntityInfo.getEntityDocu(sNewId);

			// route to not found page IF there is NO index entry AND NO docu from server
			if (!oEntity && !oDoc) {
				this.router.myNavToWithoutHash("sap.ui.demokit.explored.view.notFound", "XML", false, { path: sNewId });
				return;
			}

			// get view data
			oData = this._getViewData(sNewId, oDoc, oEntity);

			// set view model
			var oModel = new sap.ui.model.json.JSONModel(oData);
			this.getView().setModel(oModel);

			// set also the binding context for entity data
			this.getView().bindElement("entity>" + sPath);

			// done, we can now switch the id
			this._sId = sNewId;

		} else {

			// get existing data model
			oData = this.getView().getModel().getData();
		}

		// handle unknown tab
		if (this._TAB_KEYS.indexOf(sNewTab) === -1) {
			sNewTab = "samples";
		}
		// handle invisible tab
		if (!oData.show[sNewTab]) {
			sNewTab = "samples";
		}
		var oTab = this.getView().byId("tabBar");
		if (sNewTab !== oTab.getSelectedKey() && oTab.getExpanded()) {
			oTab.setSelectedKey(sNewTab);
		}
	},

	// ========= internal ===========================================================================

	_getViewData : function (sId, oDoc, oEntity) {

		// convert docu
		var oData = this._convertEntityInfo(sId, oDoc);

		// apply entity related stuff
		oData.show.samples = (oEntity) ? oEntity.samples.length > 0 : false;
		oData.count.samples = (oEntity) ? oEntity.samples.length : 0;

		// done
		return oData;
	},

	_convertEntityInfo : function (sId, oDoc) {

		// create skeleton data structure
		var oData = {
			name : sId,
			deprecated : (oDoc) ? this._formatDeprecated(oDoc.deprecation) : null,
			baseType : (oDoc) ? this._formatType(oDoc.baseType) : null,
			baseTypeText : (oDoc) ? this._formatTypeText(oDoc.baseType) : null,
			baseTypeNav : (oDoc) ? this._formatTypeNav(oDoc.baseType) : null,
			description : (oDoc) ? oDoc.doc : null,
			properties : [],
			events : [],
			methods : [],
			aggregations : [],
			associations : [],
			values : [], // for enums!
			show : {
				baseType : (oDoc) ? !!oDoc.baseType : false,
				about : !!oDoc,
				// computed later in this function
				properties : false,
				events : false,
				methods : false,
				aggregations : false,
				associations : false,
				values : false
			},
			count : {
				properties : 0,
				events : 0,
				methods : 0,
				aggregations : 0,
				associations : 0
			}
		};

		// no documentation !
		if (!oDoc) {
			return oData;
		}

		// fill data
		var key = null;
		for (key in oDoc.properties) {
			if (oDoc.properties.hasOwnProperty(key) && key.indexOf("_") !== 0) {
				var oProp = oDoc.properties[key];
				oProp.name = key;
				oProp.doc = this._formatDoc(oProp.doc, oProp.deprecation);
				oProp.deprecated = this._formatDeprecated(oProp.deprecation);
				oProp.typeText = this._formatTypeText(oProp.type);
				oProp.typeNav = this._formatTypeNav(oProp.type);
				oProp.type = this._formatType(oProp.type);
				oProp.defaultValue = (oProp.defaultValue) ? String(oProp.defaultValue).replace("empty/undefined", "-") : "";
				oData.properties.push(oProp);
			}
		}
		for (key in oDoc.events) {
			if (oDoc.events.hasOwnProperty(key) && key.indexOf("_") !== 0) {
				var oEvent = oDoc.events[key];
				oEvent.name = key;
				oEvent.doc = this._formatDoc(oEvent.doc, oEvent.deprecation);
				oEvent.deprecated = this._formatDeprecated(oEvent.deprecation);
				oData.events.push(oEvent);
				for (var p in oEvent.parameters) { // TODO why is parameters not an array ???
					if (oEvent.parameters.hasOwnProperty(p) && p.indexOf("_") !== 0) {
						oData.events.push({
							param : p,
							since : oEvent.parameters[p].since,
							typeText: this._formatTypeText(oEvent.parameters[p].type),
							typeNav: this._formatTypeNav(oEvent.parameters[p].type),
							type: this._formatType(oEvent.parameters[p].type),
							doc : this._formatDoc(oEvent.parameters[p].doc, oEvent.parameters[p].deprecation),
							deprecated : this._formatDeprecated(oEvent.parameters[p].deprecation)
						});
					}
				}
			}
		}
		for (key in oDoc.methods) {
			if (oDoc.methods.hasOwnProperty(key) && key.indexOf("_") !== 0) {
				var oMethod = oDoc.methods[key];
				oMethod.name = key;
				oMethod.doc = this._formatDoc(oMethod.doc, oMethod.deprecation);
				oMethod.deprecated = this._formatDeprecated(oMethod.deprecation);
				oMethod.param = "returnValue";
				oMethod.typeText = this._formatTypeText(oMethod.type);
				oMethod.typeNav = this._formatTypeNav(oMethod.type);
				oMethod.type = this._formatType(oMethod.type);
				oData.methods.push(oMethod);
				for (var i = 0 ; i < oMethod.parameters.length ; i++) {
					var sParamName = oMethod.parameters[i].name;
					if (sParamName.indexOf("_") !== 0) {
						oData.methods.push({
							param : sParamName,
							since : oMethod.parameters[i].since,
							typeText: this._formatTypeText(oMethod.parameters[i].type),
							typeNav: this._formatTypeNav(oMethod.parameters[i].type),
							type: this._formatType(oMethod.parameters[i].type),
							doc : this._formatDoc(oMethod.parameters[i].doc, oMethod.parameters[i].deprecation),
							deprecated : this._formatDeprecated(oMethod.parameters[i].deprecation)
						});
					}
				}
			}
		}
		for (key in oDoc.aggregations) {
			var oAggr = oDoc.aggregations[key];
			var bNotHidden = (!oAggr.hasOwnProperty("visibility") || oAggr.visibility !== "hidden");
			if (oDoc.aggregations.hasOwnProperty(key) && key.indexOf("_") !== 0 && bNotHidden) {
				oAggr.name = key;
				oAggr.doc = this._formatDoc(oAggr.doc, oAggr.deprecation);
				oAggr.deprecated = this._formatDeprecated(oAggr.deprecation);
				oAggr.typeText = this._formatTypeText(oAggr.type);
				oAggr.typeNav = this._formatTypeNav(oAggr.type);
				oAggr.type = this._formatType(oAggr.type);
				oData.aggregations.push(oAggr);
			}
		}
		for (key in oDoc.associations) {
			if (oDoc.associations.hasOwnProperty(key) && key.indexOf("_") !== 0) {
				var oAssoc = oDoc.associations[key];
				oAssoc.name = key;
				oAssoc.doc = this._formatDoc(oAssoc.doc, oAssoc.deprecation);
				oAssoc.deprecated = this._formatDeprecated(oAssoc.deprecation);
				oAssoc.typeText = this._formatTypeText(oAssoc.type);
				oAssoc.typeNav = this._formatTypeNav(oAssoc.type);
				oAssoc.type = this._formatType(oAssoc.type);
				oData.associations.push(oAssoc);
			}
		}
		for (key in oDoc.values) {
			if (oDoc.values.hasOwnProperty(key) && key.indexOf("_") !== 0) {
				var oValue = oDoc.values[key];
				oValue.name = key;
				oValue.doc = this._formatDoc(oValue.doc, oValue.deprecation);
				oValue.deprecated = this._formatDeprecated(oValue.deprecation);
				oData.values.push(oValue);
			}
		}

		// determine if the parts shall be shown
		oData.show.properties = oData.properties.length > 0;
		oData.show.events = oData.events.length > 0;
		oData.show.methods = oData.methods.length > 0;
		oData.show.aggregations = oData.aggregations.length > 0;
		oData.show.associations = oData.associations.length > 0;
		oData.show.values = oData.values.length > 0;

		// set counts
		oData.count.properties = oData.properties.length;
		oData.count.events = oData.events.length;
		oData.count.methods = oData.methods.length;
		oData.count.aggregations = oData.aggregations.length;
		oData.count.associations = oData.associations.length;

		return oData;
	},

	/**
	 * Sets the boolean-as-string flag
	 */
	_formatDeprecated : function (sDeprecation) {
		return (sDeprecation && sDeprecation.length > 0) ? "true" : "false";
	},

	/**
	 * Sets the description to the deprecation text if available
	 */
	_formatDoc : function (sDoc, sDeprecation) {
		return (sDeprecation && sDeprecation.length > 0) ? "DEPRECATED. " + sDeprecation : sDoc;
	},

	/**
	 * Converts the type to navigable type
	 */
	_formatType : function (sType) {
		if (!sType) {
			return null;
		} else {
			// remove arrays
			return sType.replace("[]", "");
		}
	},

	/**
	 * Converts the type to a friendly readable text
	 */
	_formatTypeText : function (sType) {
		if (!sType) {
			return null;
		} else {
			// remove core prefix
			sType = sType.replace("sap.ui.core.", "");
			// only take text after last dot
			var index = sType.lastIndexOf(".");
			return (index !== -1) ? sType.substr(index + 1) : sType;
		}
	},

	/**
	 * Determines if the type can be navigated to
	 */
	_baseTypes : [
		"sap.ui.core.any",
		"sap.ui.core.object",
		"sap.ui.core.function",
		"sap.ui.core.number", // TODO discuss with Thomas, type does not exist
		"sap.ui.core.float",
		"sap.ui.core.int",
		"sap.ui.core.boolean",
		"sap.ui.core.string",
		"sap.ui.core.URI", // TODO discuss with Thomas, type is not a base type (it has documentation)
		"sap.ui.core.ID", // TODO discuss with Thomas, type is not a base type (it has documentation)
		"sap.ui.core.void",
		"sap.ui.core.CSSSize", // TODO discuss with Thomas, type is not a base type (it has documentation)
		"any",
		"object",
		"function",
		"float",
		"int",
		"boolean",
		"string"
	],
	_formatTypeNav : function (sType) {
		return this._baseTypes.indexOf(sType) === -1;
	}
});

}; // end of sap/ui/demokit/explored/view/entity.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.DemokitApp') ) {
/*!
 * @copyright@
 */

// Main class for Demokit-like applications
jQuery.sap.declare('sap.ui.demokit.DemokitApp'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.DropdownBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Splitter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.layout.AbsoluteLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.search.OpenSearchProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.ux3.NavigationItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.ux3.Shell'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/DemokitApp",['jquery.sap.global', 'sap/ui/commons/DropdownBox', 'sap/ui/commons/Label', 'sap/ui/commons/Splitter', 'sap/ui/commons/layout/AbsoluteLayout', 'sap/ui/core/ListItem', 'sap/ui/core/search/OpenSearchProvider', './Tag', './TagCloud', './library', 'sap/ui/ux3/NavigationItem', 'sap/ui/ux3/Shell'],
	function(jQuery, DropdownBox, Label, Splitter, AbsoluteLayout, ListItem, OpenSearchProvider, Tag, TagCloud, library, NavigationItem, Shell) {
	"use strict";


	var DemokitApp = function(sTitle, sVersion, aThemes) {
		
		var that = this;
		
		function basename(sPath) {
			return sPath.split('/').slice(0, -1).join('/') + '/';
		}
	
		// Calculate Application Base HRef and Pathname
		var sBaseUrl = window.location.href;
		if (sBaseUrl.indexOf('#') >= 0) {
			// remove the hash from the URL (otherwise the URL + hash is used as base URL)
			sBaseUrl = sBaseUrl.slice(0, sBaseUrl.indexOf('#'));
		}
		this.sBaseUrl = basename(sBaseUrl);
		this.sBasePathname = basename(window.location.pathname);
		this._iPendingCalls = 0;
		this._mBestMatchingPage = {};
		this._aTopLevelNavItems = [];
		this._aThemes = aThemes || ["sap_bluecrystal", "sap_goldreflection", "sap_hcb"];
		this._sTheme = this._aThemes[0]; // 'aThemes' must contain at least one theme
		this._sCurrentContent = null;
		this._mAliases = {};
		this._bIgnoreIFrameOnLoad = false;
		
		// view state
		this._sTitleStr = sTitle;
		this._sVersionStr = sVersion;
		this._sSelectedWorkSetItem = null;
	
		// make this instance available statically 
		DemokitApp.getInstance = jQuery.sap.getter(this);
		
		jQuery(window).bind('hashchange', function() {
			var sHash = window.location.hash;
			jQuery.sap.log.debug("hashchange occured, current='" + that._sCurrentContent + "', new='" + sHash + "'");
			if ( sHash  &&  sHash != "#" + that._sCurrentContent ) {
				jQuery.sap.log.info("navigate to " + sHash);
				that.navigateTo(sHash, true);
			}
		});
	
	};
	
	DemokitApp.getInstance = function() {
		var oTopDemokit = jQuery.sap.getObject("top.sap.ui.demokit.DemokitApp");
		if ( oTopDemokit && oTopDemokit != DemokitApp ) {
			return oTopDemokit.getInstance();
		}
	};
	
	/**
	 * Checks whether the given URL references a page within the demokit app.
	 * If so, only the internal part of the path is returned, otherwise null.  
	 */
	DemokitApp.prototype.calcRelativeUrl = function (sUrl) {
		return sUrl.indexOf(this.sBaseUrl) == 0 ? sUrl.substring(this.sBaseUrl.length) : null;
	};
	
	DemokitApp.prototype.registerPageForType = function(sUrl, aControls) {
		this._mBestMatchingPage[aControls[0]] = sUrl;
	};
	
	DemokitApp.prototype.findPageForType = function(sType) {
		return this._mBestMatchingPage[sType] || "docs/api/symbols/" + sType + ".html";
	};
	
	DemokitApp.prototype._addPendingCall = function() {
		this._iPendingCalls++;
	};
	
	DemokitApp.prototype._removePendingCall = function() {
		this._iPendingCalls--;
	};
	
	DemokitApp.prototype.addIndex = function(sId, oSettings) {
		oSettings = oSettings || {};
		
		var that = this;
		
		var oTLNItem = {
			id : "mi-" + sId,
			text : oSettings.caption || sId,
			newWindow : oSettings.newWindow,
			visible : (typeof oSettings.visible === "boolean") ? oSettings.visible : true,
			themable : oSettings.themable || false
		};
		this._aTopLevelNavItems.push(oTLNItem);
		this._createWorksetItem(oTLNItem);
		if ( oSettings.index ) {
			if ( oSettings.extend ) {
				oSettings.extend(oSettings.index, function(oData){
					that._setIndexData(sId, oData);
				});
			} else {
				that._setIndexData(sId, oSettings.index);
			}
		} else if ( oSettings.url ) {
			this._loadIndexFromUrl(sId, oSettings.url, oSettings.transformer, oSettings.extend);
		}
	};
	
	DemokitApp.prototype._loadIndexFromUrl = function(sId, sUrl, fnTransformer, fnExtend) {
		var that = this;
	
		jQuery.ajax({
			url : sUrl,
			dataType : sUrl.slice(-4) == ".xml" ? "xml" : "json",
			error : function(xhr, status, e) {
				that._removePendingCall();
				jQuery.sap.log.error("failed to load index '" + sId + "' from '" + sUrl + "': " + status + ", " + e);
				var oTopLevelNavItem = that._findIndexById(sId);
				if ( oTopLevelNavItem ) {
					// TODO find better way to handle errors... NavigationItem unfortunately has no 'enabled' 
					oTopLevelNavItem.navItem.setVisible(false);
				}
			},
			success : function(oData, sStatus, oXHR) {
				var oIndex = fnTransformer ? fnTransformer.call(this, oData) : oData;
				if ( fnExtend ) {
					fnExtend(oIndex, function(oData){
						that._removePendingCall();
						that._setIndexData(sId, oData);
					});
				} else {
					that._removePendingCall();
					that._setIndexData(sId, oIndex);
				}
			}
		});
		this._addPendingCall();
	};
	
	DemokitApp.prototype._setIndexData = function(sId, oIndex) {
		var that = this;
		
		function processNode(oNode) {
			iNodes++;
			if ( oNode.ref && oNode.controls ) {
				var aControls = jQuery.isArray(oNode.controls) ? oNode.controls : oNode.controls.split(/,/);
				that.registerPageForType(oNode.ref, aControls);
			}
			if ( oNode.alias && oNode.ref ) {
				var aAliases = oNode.alias.split(",");
				for (var i = 0; i < aAliases.length; i++) {
					that._mAliases[aAliases[i]] = oNode.ref;
				}
			}
			if ( oNode.links ) {
				for (var i = 0; i < oNode.links.length; i++) {
					processNode(oNode.links[i]);
				}
			}
		}

		var oTopLevelNavItem = this._findIndexById(sId);
		if ( oTopLevelNavItem ) {
			oTopLevelNavItem.ref = oIndex.ref;
			oTopLevelNavItem.links = oIndex;
			
			var iNodes = 0;
				
			processNode(oIndex);
			oTopLevelNavItem._iTreeSize = iNodes;
			this._createNavigationTree(oTopLevelNavItem);
			oTopLevelNavItem.navItem.setEnabled(!!oTopLevelNavItem._oTree);
			oTopLevelNavItem.navItem.setHref(oIndex.ref);
		}
	};
	
	DemokitApp.prototype._findIndexById = function(sId) {
		for (var i = 0; i < this._aTopLevelNavItems.length; i++) {
			var oTopLevelNavItem = this._aTopLevelNavItems[i];
			if ( oTopLevelNavItem.id === "mi-" + sId ) {
				return oTopLevelNavItem;
			}
		}
	};
	
	DemokitApp.prototype.getInitialPage = function(sDefaultPage, bSupportModuleSets) {
	
		var sInitialPage = sDefaultPage,
			sHash = window.location.hash,
			sModuleSet = jQuery.sap.getUriParameters().get("optimized-module-set");
	
		/**
		 * Checks whether the given URL is a valid relative URL within the current app
		 */
		function isRelativeUrl(sUrl) {
			return /^([a-zA-Z0-9-_]+\/)*[a-zA-Z0-9-_.]+\.html(#.*)?$/.test(sUrl);
		}
		
		if ( sHash ) {
			sHash = sHash.indexOf("#") === 0 ? sHash.substring(1) : sHash;
			if (isRelativeUrl(sHash)) {
				sInitialPage = sHash;
			}
		}
	
		if ( bSupportModuleSets && sModuleSet ) {
			sInitialPage = "customize.html?data=" + sModuleSet;
		}
	
		return sInitialPage;
	};
	
	DemokitApp.prototype.getPagesForCategory = function(sCategory) {
		var oTopLevelNavItem = this._findIndexById("controls"); // TODO get rid of hard coded index id
		if ( !oTopLevelNavItem || !oTopLevelNavItem.links ) {
			return DemokitApp.RETRY_LATER;
		}
		var aPaths = sCategory.split('/');
		var o = oTopLevelNavItem.links;
		for (var i = 0; i < aPaths.length; i++) {
			var sPath = aPaths[i];
			for (var j = 0; j < o.links.length; j++) {
				if ( sPath == o.links[j].text ) {
					break;
				}
			}
			if ( j == o.links.length ) {
				return [];
			}
			o = o.links[j];
		}
		return o.links || [];
	};
	
	DemokitApp.RETRY_LATER = -2;
	
	DemokitApp.prototype.findIndexForPage = function(sUrl) {
		
		function findURL(oNode, sUrl) {
			if ( sUrl && oNode.ref && sUrl.indexOf(oNode.ref) === 0 ) {
				return true;
			}
			if ( oNode.links ) {
				for (var j = 0; j < oNode.links.length; j++) {
					if ( findURL(oNode.links[j], sUrl) ) {
						return true;
					}
				}
			}
			return false;
		}
		
		for (var i = 0; i < this._aTopLevelNavItems.length; i++) {
			if ( this._aTopLevelNavItems[i].links && findURL(this._aTopLevelNavItems[i].links, sUrl) ) {
				return i;
			}
		}
	
		if ( this._aTopLevelNavItems.length === 0 || this._iPendingCalls > 0 ) {
			// either no indexes have been added yet or some of them are still pending
			return DemokitApp.RETRY_LATER;
		} else {
			jQuery.sap.log.error("could not find " + sUrl + " in nav tree");
			return -1;
		}
	};
	
	DemokitApp.DEFAULT_TLN_ITEM = 0;
	
	// ---- View ------------------------------------------------------
	
	DemokitApp.prototype._createNavigationTree = function(oTopLevelNavItem) {
		
		var that = this;
		var iNodes = 0;
		
		function selected(oEvent) {
			that.navigateTo(oEvent.getSource()._ref_);
		}
		
		function initLinks(oTarget, aLinks, iLevel) {
			for (var i = 0; i < aLinks.length; i++) {
				var oNode = new sap.ui.commons.TreeNode({
					text: aLinks[i].text,
					tooltip: aLinks[i].tooltip,
					expanded: iLevel < 1,
					selectable: !!aLinks[i].ref,
					icon: aLinks[i].ico || null,
					selected: selected
				});
				oNode._ref_ = aLinks[i].ref;
				oTarget.addNode(oNode);
				iNodes++;
				if (aLinks[i].links && aLinks[i].links.length > 0) {
					initLinks(oNode, aLinks[i].links, iLevel + 1);
				}
			}
		}
	
		if (oTopLevelNavItem._oTree) {
			return;
		}
		
		var oTree = new sap.ui.commons.Tree(oTopLevelNavItem.id + "-index", {
			showHeader: true,
			width: "100%",
			height: "100%",
			showHorizontalScrollbar: true
		});
		oTree.addStyleClass("sapUiTreeWithHeader");
		initLinks(oTree, oTopLevelNavItem.links.links, 0);
		oTopLevelNavItem._oTree = oTree;
		oTopLevelNavItem._iTreeSize = iNodes;
	};
	
	DemokitApp.prototype._createWorksetItem = function(oTLNItem) {
		var oNavItem = oTLNItem.navItem = new NavigationItem({
			key: oTLNItem.id,
			text: oTLNItem.text,
			href: "#" + oTLNItem.ref,
			visible : oTLNItem.visible,
			enabled: false
		});
		oNavItem._itemData_ = oTLNItem;
		if ( this._oShell ) {
			this._oShell.addWorksetItem(oNavItem);
		}
	};
	
	DemokitApp.prototype.createUI = function(bSearchSupported, sInitialPage) {
		var bShowScrollBars;
		var that = this;
		var sIconPrefix = "theme/img/themeswitch_";
		var THEMES = DemokitApp.THEMES;
		
		this._oThemeSwitch = new DropdownBox({
			change: [this._handleThemeChanged, this],
			items: jQuery.map(this._aThemes, function(sThemeId) {
				return new ListItem({text: THEMES[sThemeId], key: sThemeId});
			}),
			value: THEMES[this._sTheme]
		});
	
		this._oThemeSwitchPopup = new sap.ui.ux3.ToolPopup({
			title:"Select a theme",
			icon:sIconPrefix + "regular.png", //TODO find a proper icon
			iconHover:sIconPrefix + "hover.png", //TODO find a proper icon
			iconSelected:sIconPrefix + "selected.png", //TODO find a proper icon
			content:[ this._oThemeSwitch ],
			initialFocus: this._oThemeSwitch
		});
		
		var oContent = new sap.ui.core.HTML("content", {
			content: "<iframe id=\"content\" name=\"content\" src=\"about:blank\" frameborder=\"0\" onload=\"sap.ui.demokit.DemokitApp.getInstance().onContentLoaded();\"></iframe>"
		});
	
		var oSidePanelLayout = this._oSidePanelLayout = new AbsoluteLayout();
	
		// TODO oSidePanelLayout.addContent(oDemokit._aTopLevelNavItems[0]._oTree, {top:"0", bottom:"0", left:"0", right:"0"});
		sap.ui.Device.os.name == sap.ui.Device.os.OS.IOS ? bShowScrollBars = true : bShowScrollBars = false;
	
		var oVersionInfo = new sap.ui.commons.Link({
			text: this._sVersionStr,
			tooltip: "Open Version Info",
			press: function() {
				that.navigateTo("versioninfo.html");
			}
		});
		
		var oShell = this._oShell = new Shell({
			appTitle: this._sTitleStr,
			showLogoutButton: false,
			showFeederTool: false,
			applyContentPadding: false,
			showSearchTool: bSearchSupported,
			fullHeightContent: true,
			toolPopups: [ this._oThemeSwitchPopup ],
			search: function(oEvent){
				that.navigateTo("search.html?q=" + encodeURIComponent(oEvent.getParameter("text")));
				that._oShell._getSearchTool().close();
			},
			worksetItemSelected: function(oEvent){
				var oNavItem = oEvent.getParameter("item");
				if ( oNavItem.getEnabled() ) {
					var oItem = oNavItem._itemData_;
					// skip update of shell for new windows
					if (oItem.newWindow) {
						oEvent.preventDefault();
					}
					// navigate to the default reference
					that.navigateTo(oItem.ref, null, null, oItem.newWindow);
				} else {
					oEvent.preventDefault();
				}
			},
			content:[
				new Splitter("demokitSplitter", {
					width:"100%",
					height:"100%",
					splitterPosition:"0%",
					splitterBarVisible:false,
					firstPaneContent:[oSidePanelLayout],
					secondPaneContent:[oContent],
					showScrollBars:bShowScrollBars
				})
			],
			headerItems:[oVersionInfo]
		});
	
		this._oShell.addStyleClass("sapDkShell");
		
		function addTagCloud(aKeywords) {
			
			var oTagCloud = new TagCloud({
				minFontSize:15,
				maxFontSize:30,
				press : function (oEvent) {
					var term = sap.ui.getCore().byId(oEvent.getParameter("tagId")).getText();
					oShell.fireSearch({text : term});
				}
			}).addStyleClass("grTagCloud");
			for (var i = 0; i < aKeywords.length; i++) {
				oTagCloud.addTag(new Tag({ text : aKeywords[i].tag, weight : aKeywords[i].score }));
			}
			
			// enhance the original search tool
			oShell._getSearchTool && oShell._getSearchTool().addContent(oTagCloud);
		}
		
		if ( bSearchSupported ) {
			
			var oSearchField = oShell.getSearchField();
			oSearchField.setEnableListSuggest(true);
			oSearchField.setShowListExpander(false);
			oSearchField.setVisibleItemCount(5);
			oSearchField.setSearchProvider(new OpenSearchProvider({
				suggestType: "json",
				suggestUrl: "suggest?q={searchTerms}"
			}));
		
			// request top keywords
			jQuery.ajax({
				url : "keywords?kind=tags&max=50",
				dataType : "json",
				success : function(data, status, xhr) {
					if ( data && data[0] && data[0].success && data[0].keywords && data[0].keywords.length ) {
						addTagCloud(data[0].keywords);
						oSearchField.setWidth("80%");
					}
				}
			});
				
		}
	
		jQuery.each(this._aTopLevelNavItems, function(i, oTLNItem) {
			oShell.addWorksetItem(oTLNItem.navItem);
		});
	
		this.navigateTo(sInitialPage);
		
		jQuery(function(){
			jQuery("body").append("<div id=\"logo\"><img id=\"logoico\"><img id=\"logotxt\"></div>");
			jQuery("#logoico").attr("src", "resources/sap/ui/core/mimes/logo/icotxt_white_220x72_blue.png").addClass("sapUiImg");
			//jQuery("#logotxt").attr("src", "resources/sap/ui/core/mimes/logo/txtonly_32x32.png").addClass("sapUiImg");
		});
	};
	
	DemokitApp.prototype.placeAt = function(sId) {
		this._oShell.placeAt(sId);
	};
	
	// ---- controller ----------------------------------------------------
	
	// Listen to IFrame load
	DemokitApp.prototype.onContentLoaded = function (e) {
		
		var that = this;
		var oContentWindow = jQuery("#content")[0].contentWindow;
		var sIFrameContent = this.calcRelativeUrl(oContentWindow.location.href);
		if (sIFrameContent && !this._bIgnoreIFrameOnLoad) {
			this.navigateTo(sIFrameContent, true, true);
			window.location.replace("#" + sIFrameContent);
		}
		this._applyTheme();
		this._bIgnoreIFrameOnLoad = false;
	
		jQuery(oContentWindow).bind("hashchange", function() {
			var sIFrameContent = that.calcRelativeUrl(oContentWindow.location.href);
			if (sIFrameContent && !that._bIgnoreIFrameOnLoad) {
				that.navigateTo(sIFrameContent, true, true);
				window.location.hash = sIFrameContent;
			}
			that._bIgnoreIFrameOnLoad = false;
		});
		
	};
	
	
	DemokitApp.prototype.navigateTo = function(sName, bSkipSetHash, bSkipSwitchLocation, bNewWindow) {
		
		var that = this;
		
		// normalize page name (from hash)
		var sPageName = sName.indexOf("#") === 0 ? sName.substring(1) : sName;
		// resolve aliases
		var sResolvedPageName = this._mAliases[sPageName];
		if (sResolvedPageName && sPageName != sResolvedPageName) {
			bSkipSwitchLocation = false;
			sPageName = sResolvedPageName;
		}
		
		if (this._sCurrentContent == sPageName) {
			return;
		}
	
		var oContent = jQuery("#content")[0];
		var oContentWindow = oContent && oContent.contentWindow;
		var topNavIdx = this.findIndexForPage(sPageName);
	
		// open in new window and do nothing else
		if (bNewWindow) {
			window.open(sPageName, "_blank");
			return;
		}
	
		// postpone navigation if either rendering did not happen yet or indexes are not yet loaded 
		if ( !oContentWindow || topNavIdx === DemokitApp.RETRY_LATER ) {
			setTimeout(function() {
				that.navigateTo(sPageName, bSkipSetHash, bSkipSwitchLocation);
			}, 200);
			return;
		}
			
		var oNewTLNItem = topNavIdx >= 0 ? this._aTopLevelNavItems[topNavIdx] : null;
		var oShell = this._oShell;
		var oSplitter = sap.ui.getCore().byId("demokitSplitter");
		if ( oNewTLNItem && oNewTLNItem._iTreeSize <= 1 ) {
			if (oSplitter.getSplitterBarVisible()) {
				var sOldPos = oSplitter.getSplitterPosition();
				if (sOldPos !== "0%") {
					oSplitter._oldPos = sOldPos;
					oSplitter.setSplitterPosition("0%");
				}
				oSplitter.setSplitterBarVisible(false);
			}
		} else {
			if (!oSplitter.getSplitterBarVisible()) {
				var sOldPos = oSplitter._oldPos || "20%";
				oSplitter.setSplitterPosition(sOldPos);
				oSplitter.setSplitterBarVisible(true);
			}
		}
		
		this._sCurrentContent = sPageName;
	
		function findAndSelectTreeNode(sPageName, oParent, bClearSelection) {
			if ( oParent ) {
				if (bClearSelection && oParent.getSelectedNode && oParent.getSelectedNode()) {
					oParent.getSelectedNode().setIsSelected(false);
				}
				var aNodes = oParent.getNodes();
				for (var i = 0; i < aNodes.length; i++) {
					if (aNodes[i]._ref_ && aNodes[i]._ref_.indexOf(sPageName) >= 0) {
						aNodes[i].setIsSelected(true);
						var par = oParent;
						while (par instanceof sap.ui.commons.TreeNode) {
							par.expand();
							par = par.getParent();
						}
						return aNodes[i];
					} else {
						var node = findAndSelectTreeNode(sPageName, aNodes[i], false);
						if (node) {
							return node;
						}
					}
				}
			}
			return null;
		}
	
		//Update Top Level Navigation and Navigation Tree
		var oSelectedNavEntry = null;
		var oNewNavItem = oNewTLNItem && oNewTLNItem.navItem;
		if ( oNewNavItem && this._sSelectedWorkSetItem != oNewNavItem.getId() ) {
			oNewNavItem.setVisible(true);
			oShell.setSelectedWorksetItem(oNewNavItem);
			this._oSidePanelLayout.removeAllContent();
			if ( oNewTLNItem._oTree ) {
				this._oSidePanelLayout.addContent(oNewTLNItem._oTree);
			}
			oSelectedNavEntry = findAndSelectTreeNode(sPageName, oNewTLNItem._oTree, true);
	
			//Hide/Show Theme Switch
			if ( oNewTLNItem.themable ) {
				if (oShell.getToolPopups().length == 0) {
					oShell.addToolPopup(this._oThemeSwitchPopup );
				}
			} else {
				oShell.removeAllToolPopups();
			}
		} else {
			oSelectedNavEntry = findAndSelectTreeNode(sPageName, this._oSidePanelLayout.getContent()[0], true);
			//If no entry is found, try again without hash
			if (!oSelectedNavEntry && sPageName.indexOf("#") > 0) {
				var sShortName = sPageName.substr(0, sPageName.indexOf("#") - 1);
				oSelectedNavEntry = findAndSelectTreeNode(sShortName, this._oSidePanelLayout.getContent()[0]);
			}
	
		}
	
		sap.ui.getCore().applyChanges();
		this._sSelectedWorkSetItem = oShell.getSelectedWorksetItem();
	
		// Update IFrame content and URL hash
		if (!bSkipSetHash) {
			window.location.hash = sPageName;
		}
		
		if (!bSkipSwitchLocation) {
			
			this._bIgnoreIFrameOnLoad = true;
			
			// set fakeOS for mobile test pages (BUT not for mobile demo apps)
			var isMobilePage = sPageName && sPageName.match(/\/sap\/me?\//);
			var isMobileDemoApp = sPageName && sPageName.indexOf("sap/m/demokit") !== -1;
			var sFakeOS = (isMobilePage && !isMobileDemoApp) ? "?sap-ui-xx-fakeOS=ios" : "";
			
			oContentWindow.location.replace((sPageName.indexOf("/") == 0 ? "" : this.sBasePathname) + sPageName + sFakeOS);
		}
	
	};
	
	DemokitApp.THEMES = {
		"sap_bluecrystal" : "Blue Crystal",
		"sap_goldreflection" : "Gold Reflection",
		"sap_hcb" : "High Contrast Black"
	};
	
	DemokitApp.prototype._handleThemeChanged = function(oEvent) {
		var newTheme = oEvent.getParameter("newValue");
		for (var x in DemokitApp.THEMES) {
			if (DemokitApp.THEMES[x] == newTheme) {
				this._sTheme = x;
				this._applyTheme();
				oEvent.getSource().getParent().close();
				break;
			}
		}
	};
	
	DemokitApp.prototype._applyTheme = function() {
		var oContentWindow = jQuery("#content")[0].contentWindow;
		var sIFrameContent = this.calcRelativeUrl(oContentWindow.location.href);
		var topNavIdx = sIFrameContent ? this.findIndexForPage(sIFrameContent) : -1;
	
		if (sIFrameContent
				&& topNavIdx >= 0 && this._aTopLevelNavItems[topNavIdx].themable
				&& oContentWindow
				&& oContentWindow.sap
				&& oContentWindow.sap.ui
				&& oContentWindow.sap.ui.getCore ) {
			
			//Find supported themes
			var isMobilePage = sIFrameContent.match(/\/sap\/me?\//);
			var aMySupportedThemes = isMobilePage ? ["sap_bluecrystal"] : this._aThemes;
			var aSupportedThemes = oContentWindow.sap.ui.demokit && oContentWindow.sap.ui.demokit._supportedThemes ? oContentWindow.sap.ui.demokit._supportedThemes : aMySupportedThemes;
			
			//Update theme switch 
			var aItems = this._oThemeSwitch.getItems();
			for (var i = 0; i < aItems.length; i++) {
				aItems[i].setEnabled(jQuery.inArray(aItems[i].getKey(), aSupportedThemes) >= 0);
			}
			
			//Current theme is not supported -> Use a different one 
			if (jQuery.inArray(this._sTheme, aSupportedThemes) < 0) {
				this._sTheme = aSupportedThemes[0];
				this._oThemeSwitch.setValue(DemokitApp.THEMES[this._sTheme]);
			}
	
			oContentWindow.sap.ui.getCore().applyTheme(this._sTheme);
		}
	};
	
	
	(function() {
		
		function resolve(oLink, sLibUrl){
			if (oLink.ref && oLink.resolve === "lib") {
				oLink.ref = sLibUrl + oLink.ref;
			}
			if (oLink.links) {
				for (var i = 0; i < oLink.links.length; i++) {
					resolve(oLink.links[i], sLibUrl);
				}
			}
		}
		
		function merge(oNode1, oNode2){
			if (oNode1.key != oNode2.key || !oNode2.links || oNode2.links.length == 0) {
				return;
			}
			if (!oNode1.links) {
				oNode1.links = oNode2.links;
				return;
			}
			
			function findNodeWithKey(oNode, key){
				for (var j = 0; j < oNode.links.length; j++) {
					if (oNode.links[j].key === key) {
						return oNode.links[j];
					}
				}
				return null;
			}
			
			var oSubNode;
			
			for (var i = 0; i < oNode2.links.length; i++) {
				oSubNode = oNode2.links[i];
				if (!oSubNode.key) {
					oNode1.links.push(oSubNode);
				} else {
					var oNode = findNodeWithKey(oNode1, oSubNode.key);
					if (oNode) {
						merge(oNode, oSubNode);
					} else {
						oNode1.links.push(oSubNode);
					}
				}
			}
		}
		
		function finalize(oIndexData, fnCallback, aLibs, oDocIndices){
			for (var j = 0; j < aLibs.length; j++) {
				var oData = oDocIndices[aLibs[j]];
				if (oData && oData.docu) {
					resolve(oData.docu, oData.libraryUrl);
					merge(oIndexData, oData.docu);
				}
			}
			
			fnCallback(oIndexData);
		}
		
		DemokitApp.addReleaseNotesToDevGuide = function(oIndexData, sUrl, sTitle, iLevel) {
			if (!sUrl) {
				sUrl = "docs/guide/relnotes/ReleaseNotes.html";
			}
			if (!sTitle) {
				sTitle = "Release Notes";
			}
			if (!iLevel) {
				iLevel = 1;
			}
			
			function firstChild(node){
				if (node && node.links && node.links.length > 0) {
					return node.links[0];
				}
				return null;
			}
			
			var oIndex = oIndexData;
			for (var i = 0; i < iLevel; i++) {
				oIndex = firstChild(oIndex);
			}
			
			if (oIndex) {
				oIndex.links = oIndex.links || [];
				oIndex.links.push({ref: sUrl, text: sTitle, alias: "docs/guide/ReleaseNotes.html"});
			}
			
			return oIndexData;
		};
		
		DemokitApp.extendDevGuide = function(oIndexData, fnCallback) {
			jQuery.sap.require("sap.ui.core.util.LibraryInfo");
			var libInfo = new sap.ui.core.util.LibraryInfo();
			var sUrl = "discovery/all_libs";
			
			jQuery.ajax({
				url : sUrl,
				dataType : "json",
				error : function(xhr, status, e) {
					jQuery.sap.log.error("failed to load library list from '" + sUrl + "': " + status + ", " + e);
					fnCallback(oIndexData);
				},
				success : function(oData, sStatus, oXHR) {
					var libs = oData["all_libs"];
					if (!libs) {
						jQuery.sap.log.error("failed to load library list from '" + sUrl + "': " + sStatus + ", Data: " + libs);
						fnCallback(oIndexData);
						return;
					}
					
					var count = 0,
						len = libs.length,
						oDocIndices = {},
						aLibs = [],
						libName;
					for (var i = 0; i < len; i++) {
						libName = libs[i].entry.replace(/\//g, ".");
						aLibs.push(libName);
						/*eslint-disable no-loop-func */
						libInfo._getDocuIndex(libName, function(oExtensionData){
							oDocIndices[oExtensionData.library] = oExtensionData;
							count++;
							if (count == len) {
								finalize(oIndexData, fnCallback, aLibs, oDocIndices);
							}
						});
						/*eslint-enable no-loop-func */
					}
				}
			});
		};
	
	})();
	

	return DemokitApp;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/DemokitApp.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.IndexPage') ) {
/*!
 * @copyright@
 */
// Provides a pseudo control for index pages within the Demokit
jQuery.sap.declare('sap.ui.demokit.IndexPage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/demokit/IndexPage",['jquery.sap.global', './DemokitApp'],
	function(jQuery, DemokitApp) {
	"use strict";


	var IndexPage = function(sCategory) {
		var oDemokit = DemokitApp.getInstance(),
			iHierarchyLevel = 3,
			iCols;
		
		function suffix(s,n) {
			return s.split('/').slice(-n - 1).join('/');
		}
		
		this.oDemokit = oDemokit;
		this.sPathToRoot = suffix("../../../../../../../", iHierarchyLevel);
		this.sRootUrl = window.location.pathname.split('/').slice(-iHierarchyLevel - 1, -1).join('/') + '/';
		this.sColor = "Blue";
		this.oHexGroup = new sap.ui.demokit.HexagonButtonGroup({colspan: (iCols || 5)});
		if ( sCategory && oDemokit ) {
			var aPages = oDemokit.getPagesForCategory(sCategory);
			for (var i = 0;i < aPages.length; i++) {
				this.add(true, aPages[i].text, '', this.sPathToRoot + aPages[i].ico, undefined, aPages[i].ref);
			}
		}
	};
	
	IndexPage.prototype.add = function add(bEnabled, sControl, sTooltip, sIcon, sLibrary, sRef) {
	
		var that = this,
			oButton;
		
		if ( typeof bEnabled !== "boolean" ) {
			sRef = sLibrary;
			sLibrary = sIcon;
			sIcon = sTooltip;
			sTooltip = sControl;
			sControl = bEnabled;
			bEnabled = true;
		}
		
		sRef = sRef || this.sRootUrl + sControl + '.html';
		if ( !sLibrary ) {
			sLibrary = "sap.ui.commons";
		}
	
		if ( !sTooltip ) {
			if ( bEnabled ) {
				sTooltip = "A short tutorial that explains how to use the " + sControl + ". Click to start it.";
			} else {
				sTooltip = "Here you should find a tutorial for the " + sControl + ". Unfortunately we didn't write it in time. Please hover back soon ;-)";
			}
		}
	
		oButton = new sap.ui.demokit.HexagonButton({
			enabled: bEnabled,
			color: "Gray",//this.sColor,
			tooltip : new sap.ui.commons.RichTooltip({
				title : sControl, // TODO + " - " + sLibrary,
				imageSrc : sIcon || (bEnabled ? "" : this.sPathToRoot + "theme/img/Under-construction.png"),
				text : sTooltip
			}),
			press: function() {
				that.oDemokit.navigateTo(sRef);
			}
		});
		if ( sIcon ) {
			oButton.setIcon(sIcon);
		}
		this.oHexGroup.addButton(oButton);
	
		return this;
	};
	
	IndexPage.prototype.placeAt = function(sId) {
		this.oHexGroup.placeAt(sId);
		jQuery(function() {
			if ( jQuery("#vistaico-license").size() == 0 ) {
				jQuery("body").append('<div id="vistaico-license" class="license">Some icon(s) created by <a class="sapUiDemokitLink" href="http://VistaICO.com" target="_blank">VistaICO.com</a> and <a class="sapUiDemokitLink" href="http://www.iconarchive.com/artist/fatcow.html" target="_blank">Fatcow Web Hosting</a>,	used under Creative Commons 3.0 Attribution Unported license</div>');
			}
		});
	};
	

	return IndexPage;

}, /* bExport= */ true);

}; // end of sap/ui/demokit/IndexPage.js
